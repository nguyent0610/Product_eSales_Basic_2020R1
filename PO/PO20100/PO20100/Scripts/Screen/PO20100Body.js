Ext.net.ResourceMgr.init({ isMVC: true }); Ext.onReady(function () { Ext.ns("App.direct"); Ext.apply(App.direct, { CallMessageTimeOut: function (config) { return Ext.net.DirectMethod.request("CallMessageTimeOut", Ext.applyIf(config || {}, { url: "HQ/CallMessageTimeOut" })); }, CallMessage: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessage", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessage" })); }, CallMessageArray: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessageArray", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessageArray" })); }, PlayMedia: function (PathVideo, fileVideo, config) { return Ext.net.DirectMethod.request("PlayMedia", Ext.applyIf(config || {}, { params: { PathVideo: PathVideo, fileVideo: fileVideo }, url: "HQ/PlayMedia" })); }, PO20100GetTreeBranch: function (panelID, config) { return Ext.net.DirectMethod.request("PO20100GetTreeBranch", Ext.applyIf(config || {}, { params: { panelID: panelID }, url: "PO20100/PO20100GetTreeBranch" })); } }); Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature" }); Ext.create("Ext.ux.ProgressBarPager", {}); window.App.stoPOPriceHeader = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlPOPriceHeader", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "Status", type: "boolean" }, { name: "Descr", type: "string" }, { name: "EffDate", type: "date", dateFormat: "c" }, { name: "Public", type: "boolean" }, { name: "HOCreate", type: "boolean" }, { name: "tstamp", type: "string" }, { name: "Disc", type: "float" }, { name: "StatusApprove", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }], idProperty: "PriceID" }), storeId: "stoPOPriceHeader", autoLoad: true, readParameters: function (operation) { return { apply: { "PriceID": App.cboPriceID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO20100/GetPOPriceHeader", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: stoBeforeLoad }, load: { fn: stoLoad } } }); window.App.stoUOM_InvtID = Ext.create("Ext.data.Store", { model: Ext.define("App.stoUOM_InvtIDmdl", { extend: "Ext.data.Model", fields: [{ name: "FromUnit", mapping: "FromUnit", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "InvtId", mapping: "InvtId", type: "string" }] }), storeId: "stoUOM_InvtID", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": _invtID, "procName": "PO20100_pcUOM_InvtID", "procParam": "@InvtID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPriceIDCopy = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlPriceIDCopy", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "Status", type: "boolean" }, { name: "Descr", type: "string" }] }), storeId: "stoPriceIDCopy", proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO20100/GetPOPriceCopy", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoGetPOPriceCopy = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlGetPOPriceCopy", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "VendID", type: "string" }, { name: "QtyBreak", type: "float" }, { name: "Price", type: "float" }, { name: "Disc", type: "float" }, { name: "InvtID", type: "string" }, { name: "UOM", type: "string" }, { name: "tstamp", type: "string" }, { name: "Descr", type: "string" }] }), storeId: "stoGetPOPriceCopy", readParameters: function (operation) { return { apply: { "priceID": App.cboPriceIDCopy.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO20100/GetPOPriceCopy", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPOPriceCpnyCopy = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlgetPOPriceCpnyCopy", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "CpnyID", type: "string" }, { name: "CpnyName", type: "string" }, { name: "CpnyType", type: "string" }] }), storeId: "stoPOPriceCpnyCopy", readParameters: function (operation) { return { apply: { "priceID": App.cboPriceIDCopy.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO20100/GetPOPriceCpnyCopy", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoHeaderCopy = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlHeaderCopy", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "Descr", type: "string" }, { name: "CreateTime", type: "date", dateFormat: "c" }] }), storeId: "stoHeaderCopy", readParameters: function (operation) { return { apply: { "priceID": App.cboPriceIDCopy.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO20100/GetPriceHeader", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); Ext.create("Ext.container.Viewport", { renderTo: Ext.getBody(), items: [{ id: "frmMain", xtype: "form", keyMap: { binding: [{ ctrl: true, alt: true, handler: function () { menuClick('save'); }, key: "S" }, { ctrl: true, alt: true, handler: function () { menuClick('delete'); }, key: "D" }, { ctrl: true, alt: true, handler: function () { menuClick('new'); }, key: "N" }, { ctrl: true, alt: true, handler: function () { menuClick('print'); }, key: "P" }, { ctrl: true, handler: function () { menuClick('first'); }, key: "Up" }, { ctrl: true, handler: function () { menuClick('prev'); }, key: "Left" }, { ctrl: true, handler: function () { menuClick('last'); }, key: "Down" }, { ctrl: true, handler: function () { menuClick('next'); }, key: "Right" }], target: Ext.getBody() }, items: [{ id: "pnlHeader", region: "north", autoScroll: true, items: [{ margin: "5 0 5 0", xtype: "container", items: [{ id: "cboPriceID", width: 250, xtype: "combobox", fieldLabel: HQ.common.getLang('PRICEID'), labelAlign: "right", name: "cboPriceID", allowBlank: false, enforceMaxLength: true, maxLength: 20, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "PriceID", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('PRICEID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('STATUSDESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('EFFDATE') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{PriceID}</td><td style='min-width: 100px !important;'>{Descr}</td><td style='min-width: 100px !important;'>{StatusDescr}</td><td style='min-width: 100px !important;'>{EffDate:date('" + HQ.formatDateJS + "')}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 450, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "PriceID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "PriceID", mapping: "PriceID", type: "string" }, { name: "Status", mapping: "Status", type: "boolean" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "StatusDescr", mapping: "StatusDescr", type: "string" }, { name: "EffDate", mapping: "EffDate", type: "date", dateFormat: "c" }] }), storeId: "cboPriceIDPO20100_pcPriceID", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "PO20100_pcPriceID", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: cboPriceID_Blur }, focus: { fn: cboPriceID_Focus }, triggerclick: { fn: cboPriceID_TriggerClick }, expand: { fn: cboPriceID_Expand }, select: { fn: cboPriceID_Select }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'PriceID,Descr,StatusDescr,EffDate') } } } }, { id: "txtFill", width: 250, xtype: "numberfield", fieldLabel: HQ.common.getLang('PO20100FILL'), labelAlign: "right", name: "txtFill", decimalSeparator: "." }], layout: "vbox" }, { margin: "5 0 5 0", xtype: "container", items: [{ id: "Descr", margin: "0 0 0 10", width: 200, xtype: "textfield", keyMap: { binding: { handler: function () { App.LastPONbr.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('DESCR'), hideLabel: true, name: "Descr", allowBlank: false, enforceMaxLength: true, maxLength: 200 }, { id: "btnFill", margin: "5 0 0 10", width: 200, xtype: "button", iconCls: "#TabEdit", text: HQ.common.getLang('FILL'), listeners: { click: { fn: function (item, e) { btnFill_Click() } } } }], layout: "vbox" }, { margin: "5 0 5 0", xtype: "container", items: [{ margin: "0 0 5 0", xtype: "container", items: [{ id: "btnCopy", margin: "0 5 0 10", width: 110, xtype: "button", text: HQ.common.getLang('COPYFROM'), listeners: { click: { fn: btnCopy_click } } }, { id: "cboPriceIDCopy", width: 200, xtype: "combobox", fieldLabel: HQ.common.getLang('PRICEID'), hideLabel: true, labelAlign: "right", name: "cboPriceIDCopy", enforceMaxLength: true, maxLength: 20, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "PriceID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('PRICEID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('STATUSDESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('EFFDATE') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{PriceID}</td><td style='min-width: 100px !important;'>{Descr}</td><td style='min-width: 100px !important;'>{StatusDescr}</td><td style='min-width: 100px !important;'>{EffDate:date('" + HQ.formatDateJS + "')}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 450, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "PriceID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "PriceID", mapping: "PriceID", type: "string" }, { name: "Status", mapping: "Status", type: "boolean" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "StatusDescr", mapping: "StatusDescr", type: "string" }, { name: "EffDate", mapping: "EffDate", type: "date", dateFormat: "c" }] }), storeId: "cboPriceIDCopyPO20100_pcPriceIDCopy", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "PO20100_pcPriceIDCopy", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: cboPriceIDCopy_Blur }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'PriceID,Descr,StatusDescr,EffDate') } } } }], layout: "hbox" }, { id: "EffDate", margin: "0 0 0 -25", width: 325, xtype: "datefield", fieldLabel: HQ.common.getLang('EFFDATE'), inputWidth: 200, labelAlign: "right", labelWidth: 145, name: "EffDate", allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y" }], layout: "vbox" }, { xtype: "container", margins: "0 0 0 0", items: [{ id: "Status", tag: "X", width: 200, xtype: "checkboxfield", margins: "5 0 0 10", labelWidth: 200, name: "Status", boxLabel: HQ.common.getLang('ACTIVE'), inputValue: "App.Status" }, { id: "Public", width: 200, xtype: "checkboxfield", margins: "0 0 0 10", labelWidth: 160, name: "Public", boxLabel: HQ.common.getLang('PUBLIC'), inputValue: "App.Public", listeners: { change: { fn: chkPublic_Change } } }], layout: "vbox" }, { xtype: "container", margins: "5 0 0 0", items: [{ id: "cboStatus", tag: "X", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('STATUS'), labelAlign: "right", name: "cboStatus", dataIndex: "StatusApprove", readOnly: true, enforceMaxLength: true, maxLength: 20, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboStatusPO20100_pcStatus", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "PO20100_pcStatus", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: function (item, newValue, oldValue) { App.cboHandle.store.reload(); } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }, { id: "cboHandle", tag: "X", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('HANDLE'), labelAlign: "right", name: "cboHandle", enforceMaxLength: true, maxLength: 20, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Handle", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Handle", mapping: "Handle", type: "string" }, { name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboHandlePO20100_pcHandle", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "param3": App.cboStatus.getValue(), "procName": "PO20100_pcHandle", "procParam": "@UserName,@CpnyID,@LangID,@Status,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }], layout: "vbox" }], layout: "hbox", listeners: { render: { fn: pnl_render } } }, { id: "tabBot", xtype: "tabpanel", region: "center", items: [{ id: "pnlPO_Price", items: [{ store: { model: Ext.define("App.mdlPO_Price", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "VendID", type: "string" }, { name: "InvtID", type: "string" }, { name: "UOM", type: "string" }, { name: "tstamp", type: "string" }, { name: "Descr", type: "string" }, { name: "QtyBreak", type: "float" }, { name: "Price", type: "float" }, { name: "Disc", type: "float" }], idProperty: "PriceID,InvtID" }), storeId: "stoPO_Price", type: "paging", readParameters: function (operation) { return { apply: { "PriceID": App.cboPriceID.getValue() } }; }, serverProxy: { type: "ajax", url: "PO20100/GetPO_Price" }, pageSize: 50, proxy: { type: 'pagingmemory' }, listeners: { load: { fn: stoPO_Price_Load }, update: { fn: frmChange } } }, id: "grdPO_Price", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: grdPO_Price_BeforeEdit }, edit: { fn: grdPO_Price_Edit }, validateedit: { fn: grdPO_Price_ValidateEdit } } }], xtype: "grid", region: "center", flex: 1, bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "50", value: "50" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoPO_Price", hideRefresh: true }, columns: { items: [{ xtype: "rownumberer" }, { id: "InvtID", width: 150, dataIndex: "InvtID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboInvtID", width: 200, xtype: "combobox", name: "cboInvtID", matchFieldWidth: false, delimiter: ",", displayField: "InvtID", forceSelection: true, listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('INVTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{InvtID}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 400, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "InvtID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BarCode", mapping: "BarCode", type: "string" }, { name: "Descr1", mapping: "Descr1", type: "string" }, { name: "InvtID", mapping: "InvtID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "Color", mapping: "Color", type: "string" }, { name: "CpnyID", mapping: "CpnyID", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "StkUnit", mapping: "StkUnit", type: "string" }, { name: "PriceClassID", mapping: "PriceClassID", type: "string" }, { name: "TaxCat", mapping: "TaxCat", type: "string" }, { name: "DfltSite", mapping: "DfltSite", type: "string" }, { name: "DfltSOUnit", mapping: "DfltSOUnit", type: "string" }, { name: "SOPrice", mapping: "SOPrice", type: "float" }, { name: "SOFee", mapping: "SOFee", type: "float" }, { name: "ValMthd", mapping: "ValMthd", type: "string" }, { name: "StkItem", mapping: "StkItem", type: "int" }, { name: "StkWt", mapping: "StkWt", type: "string" }] }), storeId: "cboInvtIDPO20100_pcInventoryActive", readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "PO20100_pcInventoryActive", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: cboInvtID_Change }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'InvtID,Descr') } } } } }, {})), text: HQ.common.getLang('INVTID') }, { width: 250, dataIndex: "Descr", renderer: renderInvtName, text: HQ.common.getLang('DESCR') }, { width: 100, dataIndex: "UOM", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboUOM", width: 300, xtype: "combobox", name: "cboUOM", delimiter: ",", displayField: "FromUnit", queryMode: "local", valueField: "FromUnit", store: "stoUOM_InvtID", listeners: { blur: { fn: function (item) { App.cboUOM.forceSelection = true } }, focus: { fn: function (item) { App.cboUOM.forceSelection = false } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'FromUnit') } } } } }, {})), text: HQ.common.getLang('UOM') }, { style: "text-align:left", width: 120, xtype: "numbercolumn", align: "right", dataIndex: "QtyBreak", text: HQ.common.getLang('QTYBREAK'), format: "0,000,000" }, { id: "colPrice", style: "text-align:left", width: 120, xtype: "numbercolumn", align: "right", dataIndex: "Price", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "colNbrPrice", xtype: "numberfield", maskRe: /[\d]/, allowExponential: false, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('PO20100PRICE'), format: "0,000" }, { style: "text-align:left", width: 150, xtype: "numbercolumn", align: "right", dataIndex: "Disc", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", maskRe: /[0-9-,-/ ]/, decimalSeparator: "." } }, {})), text: HQ.common.getLang('PO20100DISC'), format: "00.00" }, { width: 150, xtype: "commandcolumn", commands: [{ xtype: "button", command: "reject", tooltip: { text: "Rejectrowchanges" }, iconCls: "#ArrowUndo", text: HQ.common.getLang('REJECT') }], prepareToolbar: function (grid, toolbar, rowIndex, record) { toolbar.items.get(0).setVisible(record.dirty); }, listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { grdPO_Price_Reject(record); } } } }] }, selModel: window.App.slmPO_Price = Ext.create("Ext.selection.RowModel", { proxyId: "slmPO_Price", selType: "rowmodel", mode: "multi" }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "InvtID", type: "string" }, { dataIndex: "Descr", type: "string" }, { dataIndex: "UOM", type: "string" }, { dataIndex: "QtyBreak", type: "numeric" }, { dataIndex: "Price", type: "numeric" }, { dataIndex: "Disc", type: "numeric" }] })], viewConfig: { xtype: "gridview", trackOver: false }, listeners: { boxready: { fn: function (item, width, height) { App.stoPO_Price.reload(); } } } }], layout: "border", title: HQ.common.getLang('POPRICE'), listeners: { render: { fn: pnl_render } } }, { id: "pnlPO_PriceCpny", items: [{ id: "treeBranch", minWidth: 150, region: "west", split: true, flex: 30, autoScroll: true, bbar: { xtype: "toolbar", items: [{ xtype: "tbfill" }, { id: "btnExpand", handler: btnExpand_click, iconCls: "#BulletTogglePlus", text: HQ.common.getLang('EXPAND') }, { xtype: "tbspacer" }, { xtype: "tbseparator" }, { xtype: "tbspacer" }, { id: "btnCollapse", handler: btnCollapse_click, iconCls: "#BulletToggleMinus", text: HQ.common.getLang('COLLAPSE') }, { xtype: "tbfill" }] }, listeners: { afterrender: { fn: function (item) { treeBranch_AfterRender('treeBranch'); } } } }, { minWidth: 50, region: "center", flex: 10, items: [{ id: "btnAddAll", margin: "5 5 0 5", xtype: "button", handler: btnAddAll_click, iconCls: "#ForwardGreen", text: HQ.common.getLang('ADDALL'), tooltip: HQ.common.getLang('ADDALL') }, { id: "btnAdd", margin: "5 5 0 5", xtype: "button", handler: btnAdd_click, iconCls: "#PlayGreen", text: HQ.common.getLang('ADD'), tooltip: HQ.common.getLang('ADD') }, { id: "btnDel", margin: "5 5 0 5", xtype: "button", handler: btnDel_click, iconCls: "#ReverseGreen", text: HQ.common.getLang('DEL'), tooltip: HQ.common.getLang('DEL') }, { id: "btnDelAll", margin: "5 5 0 5", xtype: "button", handler: btnDelAll_click, iconCls: "#RewindGreen", text: HQ.common.getLang('DELALL'), tooltip: HQ.common.getLang('DELALL') }], layout: { type: "vbox", pack: "center", align: "stretch" } }, { id: "pnlgrid_Tree", region: "east", flex: 60, items: [{ store: { model: Ext.define("App.mdlPO_PriceCpny", { extend: "Ext.data.Model", fields: [{ name: "PriceID", type: "string" }, { name: "CpnyID", type: "string" }, { name: "CpnyName", type: "string" }, { name: "CpnyType", type: "string" }], idProperty: "PriceID,CpnyID" }), storeId: "stoPO_PriceCpny", type: "paging", readParameters: function (operation) { return { apply: { "PriceID": App.cboPriceID.getValue() } }; }, serverProxy: { type: "ajax", url: "PO20100/GetPO_PriceCpny" }, pageSize: 50, proxy: { type: 'pagingmemory' }, listeners: { load: { fn: stoPO_PriceCpny_Load } } }, id: "grdPO_PriceCpny", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: grdPO_PriceCpny_BeforeEdit }, edit: { fn: grdPO_PriceCpny_Edit }, validateedit: { fn: grdPO_PriceCpny_ValidateEdit } } }], xtype: "grid", region: "center", flex: 1, bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "50", value: "50" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoPO_PriceCpny", hideRefresh: true }, columns: { items: [{ width: 30, xtype: "rownumberer" }, { id: "txtCpny", width: 150, dataIndex: "CpnyID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboCpnyID", width: 300, xtype: "combobox", name: "cboCpnyID", matchFieldWidth: false, delimiter: ",", displayField: "BranchID", forceSelection: true, listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('BRANCHID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('BRANCHNAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{BranchID}</td><td style='min-width: 100px !important;'>{BranchName}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 400, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "BranchID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BranchID", mapping: "BranchID", type: "string" }, { name: "BranchName", mapping: "BranchName", type: "string" }, { name: "Addr", mapping: "Addr", type: "string" }, { name: "CpnyType", mapping: "CpnyType", type: "string" }] }), storeId: "cboCpnyIDPO20100_pcBranchAllByUser", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "procName": "PO20100_pcBranchAllByUser", "procParam": "@UserID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { beforequery: { fn: function (queryEvent) { FilterCombo(this, 'BranchID,BranchName') } } } } }, {})), text: HQ.common.getLang('CPNYID') }, { flex: 1, dataIndex: "CpnyName", renderer: renderBranchName, text: HQ.common.getLang('CPNYNAME') }, { id: "ColCpnyType", flex: 1, dataIndex: "CpnyType", text: HQ.common.getLang('PO20100CPNYTYPE') }, { width: 150, xtype: "commandcolumn", commands: [{ xtype: "button", command: "reject", tooltip: { text: "Rejectrowchanges" }, iconCls: "#ArrowUndo", text: HQ.common.getLang('REJECT') }], prepareToolbar: function (grid, toolbar, rowIndex, record) { toolbar.items.get(0).setVisible(record.dirty); }, listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { grdPO_PriceCpny_Reject(record); } } } }] }, selModel: window.App.slmPO_PriceCpny = Ext.create("Ext.selection.RowModel", { proxyId: "slmPO_PriceCpny", selType: "rowmodel", mode: "multi" }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "CpnyID", type: "string" }, { dataIndex: "CpnyName", type: "string" }] })], viewConfig: { xtype: "gridview", trackOver: false } }], layout: "border" }], layout: "border", closeAction: "hide", title: HQ.common.getLang('APPCOMP'), listeners: { render: { fn: pnl_render } } }], activeTab: 0, listeners: { tabchange: { fn: pnlPO_PriceCpny_Active } } }], layout: "border", bodyPadding: 0, tbar: { id: "toolbar", xtype: "toolbar", items: [{ id: "menuClickbtnFirst", iconCls: "#ResultsetFirst", tooltip: HQ.common.getLang('BTNFIRST'), listeners: { click: { fn: function (item, e) { menuClick('first'); } } } }, { id: "menuClickbtnPrev", iconCls: "#ResultsetPrevious", tooltip: HQ.common.getLang('BTNPREV'), listeners: { click: { fn: function (item, e) { menuClick('prev'); } } } }, { id: "menuClickbtnNext", iconCls: "#ResultsetNext", tooltip: HQ.common.getLang('BTNNEXT'), listeners: { click: { fn: function (item, e) { menuClick('next'); } } } }, { id: "menuClickbtnLast", iconCls: "#ResultsetLast", tooltip: HQ.common.getLang('BTNLAST'), listeners: { click: { fn: function (item, e) { menuClick('last'); } } } }, { id: "menuClickbtnRefresh", iconCls: "#ArrowRefresh", tooltip: HQ.common.getLang('BTNREFRESH'), listeners: { click: { fn: function (item, e) { menuClick('refresh'); } } } }, { xtype: "tbseparator" }, { id: "menuClickbtnNew", iconCls: "#Add", tooltip: HQ.common.getLang('BTNNEW'), listeners: { click: { fn: function (item, e) { menuClick('new'); } } } }, { id: "menuClickbtnSave", iconCls: "#Disk", tooltip: HQ.common.getLang('BTNSAVE'), listeners: { click: { fn: function (item, e) { menuClick('save'); } } } }, { id: "menuClickbtnDelete", iconCls: "#Delete", tooltip: HQ.common.getLang('BTNDELETE'), listeners: { click: { fn: function (item, e) { menuClick('delete'); } } } }, { xtype: "tbseparator" }, { id: "btnImport", xtype: "filefield", iconCls: "#BookAdd", buttonConfig: { iconCls: "#BookAdd" }, buttonText: HQ.common.getLang('IMPORT'), buttonOnly: true, listeners: { render: { fn: btnImport_Render }, change: { fn: btnImport_Click } } }, { id: "btnExport", iconCls: "#ArrowTurnRight", text: HQ.common.getLang('EXPORT'), listeners: { render: { fn: btnExport_Render }, click: { fn: btnExport_Click } } }] }, waitMsgTarget: "", listeners: { boxready: { fn: function (item, width, height) { firstLoad() } }, fieldchange: { fn: frmChange } } }], layout: "fit" }); Ext.net.ResourceMgr.registerIcon(["ResultsetFirst", "ResultsetPrevious", "ResultsetNext", "ResultsetLast", "ArrowRefresh", "Add", "Disk", "Delete", "BookAdd", "ArrowTurnRight", "TabEdit", "ArrowUndo", "BulletTogglePlus", "BulletToggleMinus", "ForwardGreen", "PlayGreen", "ReverseGreen", "RewindGreen"]); });
