Ext.net.ResourceMgr.init({ isMVC: true }); Ext.onReady(function () { Ext.ns("App.direct"); Ext.apply(App.direct, { PO10200POPrice: function (branchID, invtID, Unit, podate, orderDate, config) { return Ext.net.DirectMethod.request("PO10200POPrice", Ext.applyIf(config || {}, { params: { branchID: branchID, invtID: invtID, Unit: Unit, podate: podate, orderDate: orderDate }, url: "PO10200/PO10200POPrice" })); }, PO10200ItemSitePrice: function (branchID, invtID, siteID, config) { return Ext.net.DirectMethod.request("PO10200ItemSitePrice", Ext.applyIf(config || {}, { params: { branchID: branchID, invtID: invtID, siteID: siteID }, url: "PO10200/PO10200ItemSitePrice" })); }, PO10200ItemSiteQty: function (branchID, invtID, siteID, batNbr, rcptNbr, lineRef, whseLoc, showWhseLoc, config) { return Ext.net.DirectMethod.request("PO10200ItemSiteQty", Ext.applyIf(config || {}, { params: { branchID: branchID, invtID: invtID, siteID: siteID, batNbr: batNbr, rcptNbr: rcptNbr, lineRef: lineRef, whseLoc: whseLoc, showWhseLoc: showWhseLoc }, url: "PO10200/PO10200ItemSiteQty" })); }, INNumberingLot: function (invtID, tranDate, getType, config) { return Ext.net.DirectMethod.request("INNumberingLot", Ext.applyIf(config || {}, { params: { invtID: invtID, tranDate: tranDate, getType: getType }, url: "PO10200/INNumberingLot" })); }, GetPO10200_pdWhseLoc: function (siteID, branchID, invtID, config) { return Ext.net.DirectMethod.request("GetPO10200_pdWhseLoc", Ext.applyIf(config || {}, { params: { siteID: siteID, branchID: branchID, invtID: invtID }, url: "PO10200/GetPO10200_pdWhseLoc" })); }, CallMessageTimeOut: function (config) { return Ext.net.DirectMethod.request("CallMessageTimeOut", Ext.applyIf(config || {}, { url: "HQ/CallMessageTimeOut" })); }, CallMessage: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessage", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessage" })); }, CallMessageArray: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessageArray", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessageArray" })); }, PlayMedia: function (PathVideo, fileVideo, config) { return Ext.net.DirectMethod.request("PlayMedia", Ext.applyIf(config || {}, { params: { PathVideo: PathVideo, fileVideo: fileVideo }, url: "HQ/PlayMedia" })); } }); Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature" }); Ext.create("Ext.ux.ProgressBarPager", {}); window.App.stoItemLot = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlItemLot", { extend: "Ext.data.Model", fields: [{ name: "SiteID", type: "string" }, { name: "InvtID", type: "string" }, { name: "LotSerNbr", type: "string" }, { name: "Cost", type: "float" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "LIFODate", type: "date", dateFormat: "c" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocOther", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "tstamp", type: "string" }, { name: "WhseLoc", type: "string" }, { name: "PackageID", type: "string" }, { name: "QtyAllocPDASO", type: "float" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoItemLot", proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "PO10200/GetItemLot", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoItemSite = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlItemSite", { extend: "Ext.data.Model", fields: [{ name: "InvtID", type: "string" }, { name: "SiteID", type: "string" }, { name: "AvgCost", type: "float" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyInTransit", type: "float" }, { name: "QtyOnBO", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyOnPO", type: "float" }, { name: "QtyOnTransferOrders", type: "float" }, { name: "QtyOnSO", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "StkItem", type: "int" }, { name: "TotCost", type: "float" }, { name: "QtyUncosted", type: "float" }, { name: "LastPurchaseDate", type: "date", dateFormat: "c" }, { name: "tstamp", type: "string" }, { name: "LastPurchasePrice", type: "float" }, { name: "QtyAllocPDASO", type: "float" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoItemSite", proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "PO10200/GetItemSite", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoOldTrans = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOldTrans", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CnvFact", type: "float" }, { name: "CostID", type: "string" }, { name: "CostVouched", type: "float" }, { name: "ExtWeight", type: "float" }, { name: "ExtVolume", type: "float" }, { name: "DiscPct", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "InvtID", type: "string" }, { name: "JrnlType", type: "string" }, { name: "OrigRcptDate", type: "date", dateFormat: "c" }, { name: "OrigRcptNbr", type: "string" }, { name: "OrigRetRcptNbr", type: "string" }, { name: "POLineRef", type: "string" }, { name: "PONbr", type: "string" }, { name: "POOriginal", type: "string" }, { name: "PurchaseType", type: "string" }, { name: "Qty", type: "float" }, { name: "QtyVouched", type: "float" }, { name: "RcptConvFact", type: "float" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFee", type: "float" }, { name: "RcptMultDiv", type: "string" }, { name: "RcptQty", type: "float" }, { name: "RcptUnitDescr", type: "string" }, { name: "ReasonCD", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID", type: "string" }, { name: "TranAmt", type: "float" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranDesc", type: "string" }, { name: "TranType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitDescr", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitVolume", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "tstamp", type: "string" }, { name: "IsChanged", type: "int" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "PosmID", type: "string" }, { name: "ClassID", type: "string" }, { name: "DiscCode", type: "string" }, { name: "FromPO10200", type: "boolean" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "QtyFromOM", type: "float" }, { name: "WhseLoc", type: "string" }, { name: "MaxReturnQty", type: "float" }, { name: "Revenue", type: "float" }, { name: "ReferDescr", type: "string" }, { name: "LineGiftPoint", type: "float" }, { name: "Level", type: "int" }] }), storeId: "stoOldTrans", proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "PO10200/GetPO10200_pgDetail", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoHeader = Ext.create("Ext.data.Store", { model: Ext.define("App.PO10200_pdHeaderModel", { extend: "Ext.data.Model", fields: [{ name: "BatNbr", type: "string" }, { name: "TotAmt", type: "float" }, { name: "Descr", type: "string" }, { name: "RefNbr", type: "string" }, { name: "Status", type: "string" }, { name: "tstamp", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "NoteID", type: "int" }, { name: "PONbr", type: "string" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFeeTot", type: "float" }, { name: "RcptFrom", type: "string" }, { name: "RcptQtyTot", type: "float" }, { name: "RcptTot", type: "float" }, { name: "RcptType", type: "string" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "DiscAmt", type: "float" }, { name: "DiscAmtPct", type: "float" }, { name: "RcptTotAmt", type: "float" }, { name: "TxblAmtTot00", type: "float" }, { name: "TxblAmtTot01", type: "float" }, { name: "TxblAmtTot02", type: "float" }, { name: "TxblAmtTot03", type: "float" }, { name: "TaxAmtTot00", type: "float" }, { name: "TaxAmtTot01", type: "float" }, { name: "TaxAmtTot02", type: "float" }, { name: "TaxAmtTot03", type: "float" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "DocDiscAmt", type: "float" }, { name: "APBatNbr", type: "string" }, { name: "APRefNbr", type: "string" }, { name: "DocDate", type: "date", dateFormat: "c" }, { name: "DocType", type: "string" }, { name: "InvcDate", type: "date", dateFormat: "c" }, { name: "InvcNbr", type: "string" }, { name: "InvcNote", type: "string" }, { name: "PerPost", type: "string" }, { name: "Terms", type: "string" }, { name: "OrigBranchID", type: "string" }, { name: "OrigBatNbr", type: "string" }, { name: "ReasonCD", type: "string" }, { name: "Module", type: "string" }, { name: "InTransit", type: "boolean" }, { name: "InvcNoteImport", type: "string" }, { name: "InvcNbrImport", type: "string" }, { name: "TruckRcptDate", type: "date", dateFormat: "c" }, { name: "ReplaceInvoice", type: "boolean" }, { name: "InvcDateImport", type: "date", dateFormat: "c" }, { name: "InvcDateOld", type: "date", dateFormat: "c" }, { name: "InvcNoteOld", type: "string" }, { name: "InvcNbrOld", type: "string" }, { name: "POType", type: "string" }, { name: "SONbrERP", type: "string" }], idProperty: "BatNbr,RcptNbr" }), storeId: "stoHeader", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": App.cboBatNbr.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetHeader", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: stoHeader_Load } } }); window.App.stoLotTrans = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlLotTrans", { extend: "Ext.data.Model", fields: [{ name: "LotSerNbr", type: "string" }, { name: "POTranLineRef", type: "string" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "InvtID", type: "string" }, { name: "InvtMult", type: "int" }, { name: "KitID", type: "string" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "Qty", type: "float" }, { name: "SiteID", type: "string" }, { name: "ToSiteID", type: "string" }, { name: "ToWhseLoc", type: "string" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranType", type: "string" }, { name: "TranScr", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitPrice", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "WhseLoc", type: "string" }, { name: "tstamp", type: "string" }, { name: "CnvFact", type: "float" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitDesc", type: "string" }, { name: "MfcDate", type: "date", dateFormat: "c" }, { name: "MaxReturnQty", type: "float" }] }), storeId: "stoLotTrans", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": App.cboBatNbr.getValue(), "rcptNbr": App.txtRcptNbr.getValue(), "poNbr": App.cboPONbr.getValue(), "type": App.cboRcptType.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "PO10200/GetLotTrans", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoDisc = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlDisc", { extend: "Ext.data.Model", fields: [{ name: "DiscCode", type: "string" }, { name: "Descr", type: "string" }] }), storeId: "stoDisc", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": App.cboBatNbr.getValue(), "inputDate": getRcptDate(), "invtID": _invtIDDisc } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "PO10200/GetDiscCode", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: stoDisc_load } } }); window.App.stoPO10200_pgLoadTaxTrans = Ext.create("Ext.data.Store", { model: Ext.define("App.ModelPO10200_pgLoadTaxTrans_Result", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "TaxID", type: "string" }, { name: "TxblAmt", type: "float" }, { name: "TaxAmt", type: "float" }, { name: "TaxRate", type: "float" }, { name: "TaxLevel", type: "string" }] }), storeId: "stoPO10200_pgLoadTaxTrans", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": App.cboBatNbr.getValue(), "rcptNbr": App.txtRcptNbr.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetPO10200_pgLoadTaxTrans", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { loadstoPO10200_pgLoadTaxTrans(); } } } }); window.App.stoPO10200_pdOM_UserDefault = Ext.create("Ext.data.Store", { model: Ext.define("App.stoPO10200_pdOM_UserDefaultmdl", { extend: "Ext.data.Model", fields: [{ name: "POSite", mapping: "POSite", type: "string" }, { name: "DiscSite", mapping: "DiscSite", type: "string" }, { name: "POWhseLoc", mapping: "POWhseLoc", type: "string" }] }), storeId: "stoPO10200_pdOM_UserDefault", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboBranchID.getValue(), "procName": "PO10200_pdOM_UserDefault", "procParam": "@UserID,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPO10200_pdPO_Setup = Ext.create("Ext.data.Store", { model: Ext.define("App.stoPO10200_pdPO_Setupmdl", { extend: "Ext.data.Model", fields: [{ name: "BranchID", mapping: "BranchID", type: "string" }, { name: "SetupID", mapping: "SetupID", type: "string" }, { name: "AutoRef", mapping: "AutoRef", type: "int" }, { name: "AutoReleaseAP", mapping: "AutoReleaseAP", type: "int" }, { name: "BillAddr1", mapping: "BillAddr1", type: "string" }, { name: "BillAddr2", mapping: "BillAddr2", type: "string" }, { name: "BillAttn", mapping: "BillAttn", type: "string" }, { name: "BillCity", mapping: "BillCity", type: "string" }, { name: "BillCountry", mapping: "BillCountry", type: "string" }, { name: "BillEmail", mapping: "BillEmail", type: "string" }, { name: "BillFax", mapping: "BillFax", type: "string" }, { name: "BillName", mapping: "BillName", type: "string" }, { name: "BillPhone", mapping: "BillPhone", type: "string" }, { name: "BillState", mapping: "BillState", type: "string" }, { name: "BillZip", mapping: "BillZip", type: "string" }, { name: "DfltLstUnitCost", mapping: "DfltLstUnitCost", type: "string" }, { name: "DfltRcptFrom", mapping: "DfltRcptFrom", type: "string" }, { name: "DfltRcptUnitFromIN", mapping: "DfltRcptUnitFromIN", type: "int" }, { name: "LastBatNbr", mapping: "LastBatNbr", type: "string" }, { name: "LastPONbr", mapping: "LastPONbr", type: "string" }, { name: "LastRcptNbr", mapping: "LastRcptNbr", type: "string" }, { name: "PreFixBat", mapping: "PreFixBat", type: "string" }, { name: "ShipAddr1", mapping: "ShipAddr1", type: "string" }, { name: "ShipAddr2", mapping: "ShipAddr2", type: "string" }, { name: "ShipAttn", mapping: "ShipAttn", type: "string" }, { name: "ShipCity", mapping: "ShipCity", type: "string" }, { name: "ShipCountry", mapping: "ShipCountry", type: "string" }, { name: "ShipEmail", mapping: "ShipEmail", type: "string" }, { name: "ShipFax", mapping: "ShipFax", type: "string" }, { name: "ShipName", mapping: "ShipName", type: "string" }, { name: "ShipPhone", mapping: "ShipPhone", type: "string" }, { name: "ShipState", mapping: "ShipState", type: "string" }, { name: "ShipZip", mapping: "ShipZip", type: "string" }, { name: "UseBarCode", mapping: "UseBarCode", type: "int" }, { name: "EditablePOPrice", mapping: "EditablePOPrice", type: "boolean" }, { name: "UseIN", mapping: "UseIN", type: "boolean" }, { name: "UseAP", mapping: "UseAP", type: "boolean" }] }), storeId: "stoPO10200_pdPO_Setup", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboBranchID.getValue(), "procName": "PO10200_pdPO_Setup", "procParam": "@UserID,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPO10200_pdAP_VenDorTaxes = Ext.create("Ext.data.Store", { model: Ext.define("App.PO10200_pdAP_VenDorTaxes_ResultModel", { extend: "Ext.data.Model", fields: [{ name: "Sel", type: "boolean" }, { name: "taxid", type: "string" }, { name: "Descr", type: "string" }, { name: "TaxRate", type: "float" }, { name: "TaxBasis", type: "string" }, { name: "TaxCalcType", type: "string" }, { name: "TaxCalcLvl", type: "string" }, { name: "TxblMax", type: "float" }, { name: "TxblMin", type: "float" }, { name: "InclFrt", type: "string" }, { name: "Inclmisc", type: "string" }, { name: "PrcTaxIncl", type: "string" }, { name: "Lvl2Exmpt", type: "int" }, { name: "InclInDocTot", type: "string" }, { name: "ApplTermDisc", type: "string" }, { name: "ApplTermsDiscTax", type: "int" }, { name: "AdjByTermsDisc", type: "string" }, { name: "ARTaxPtDate", type: "string" }, { name: "APTaxPtDate", type: "string" }, { name: "OPTaxPtDate", type: "string" }, { name: "POTaxPtDate", type: "string" }, { name: "CatFlg", type: "string" }, { name: "CatExcept00", type: "string" }, { name: "CatExcept01", type: "string" }, { name: "CatExcept02", type: "string" }, { name: "CatExcept03", type: "string" }, { name: "CatExcept04", type: "string" }, { name: "CatExcept05", type: "string" }], idProperty: "taxid" }), storeId: "stoPO10200_pdAP_VenDorTaxes", readParameters: function (operation) { return { apply: { "vendID": App.cboVendID.getValue(), "ordFromId": "" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetAP_VendorTax", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPO10200_pdSI_Tax = Ext.create("Ext.data.Store", { model: Ext.define("App.stoPO10200_pdSI_Taxmdl", { extend: "Ext.data.Model", fields: [{ name: "TaxID", mapping: "TaxID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "TaxRate", mapping: "TaxRate", type: "float" }, { name: "TaxBasis", mapping: "TaxBasis", type: "string" }, { name: "TaxCalcType", mapping: "TaxCalcType", type: "string" }, { name: "TaxCalcLvl", mapping: "TaxCalcLvl", type: "string" }, { name: "TxblMax", mapping: "TxblMax", type: "float" }, { name: "TxblMin", mapping: "TxblMin", type: "float" }, { name: "InclFrt", mapping: "InclFrt", type: "string" }, { name: "Inclmisc", mapping: "Inclmisc", type: "string" }, { name: "PrcTaxIncl", mapping: "PrcTaxIncl", type: "string" }, { name: "Lvl2Exmpt", mapping: "Lvl2Exmpt", type: "int" }, { name: "InclInDocTot", mapping: "InclInDocTot", type: "string" }, { name: "ApplTermDisc", mapping: "ApplTermDisc", type: "string" }, { name: "ApplTermsDiscTax", mapping: "ApplTermsDiscTax", type: "int" }, { name: "AdjByTermsDisc", mapping: "AdjByTermsDisc", type: "string" }, { name: "ARTaxPtDate", mapping: "ARTaxPtDate", type: "string" }, { name: "APTaxPtDate", mapping: "APTaxPtDate", type: "string" }, { name: "OPTaxPtDate", mapping: "OPTaxPtDate", type: "string" }, { name: "POTaxPtDate", mapping: "POTaxPtDate", type: "string" }, { name: "CatFlg", mapping: "CatFlg", type: "string" }, { name: "CatExcept00", mapping: "CatExcept00", type: "string" }, { name: "CatExcept01", mapping: "CatExcept01", type: "string" }, { name: "CatExcept02", mapping: "CatExcept02", type: "string" }, { name: "CatExcept03", mapping: "CatExcept03", type: "string" }, { name: "CatExcept04", mapping: "CatExcept04", type: "string" }, { name: "CatExcept05", mapping: "CatExcept05", type: "string" }] }), storeId: "stoPO10200_pdSI_Tax", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "procName": "PO10200_pdSI_Tax", "procParam": "@UserID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { loadPO10200_pdSI_Tax() } } } }); window.App.stoPO10200_pdIN_Inventory = Ext.create("Ext.data.Store", { model: Ext.define("App.stoPO10200_pdIN_Inventorymdl", { extend: "Ext.data.Model", fields: [{ name: "InvtID", mapping: "InvtID", type: "string" }, { name: "BarCode", mapping: "BarCode", type: "string" }, { name: "Buyer", mapping: "Buyer", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "Color", mapping: "Color", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "Descr1", mapping: "Descr1", type: "string" }, { name: "DfltPOUnit", mapping: "DfltPOUnit", type: "string" }, { name: "DfltSite", mapping: "DfltSite", type: "string" }, { name: "DfltSOUnit", mapping: "DfltSOUnit", type: "string" }, { name: "Exported", mapping: "Exported", type: "int" }, { name: "InvtType", mapping: "InvtType", type: "string" }, { name: "IRSftyStkDays", mapping: "IRSftyStkDays", type: "float" }, { name: "IRSftyStkPct", mapping: "IRSftyStkPct", type: "float" }, { name: "IRSftyStkQty", mapping: "IRSftyStkQty", type: "float" }, { name: "IROverStkQty", mapping: "IROverStkQty", type: "float" }, { name: "LastCost", mapping: "LastCost", type: "float" }, { name: "LossRate00", mapping: "LossRate00", type: "float" }, { name: "LossRate01", mapping: "LossRate01", type: "float" }, { name: "LossRate02", mapping: "LossRate02", type: "float" }, { name: "LossRate03", mapping: "LossRate03", type: "float" }, { name: "LotSerFxdLen", mapping: "LotSerFxdLen", type: "int" }, { name: "LotSerFxdTyp", mapping: "LotSerFxdTyp", type: "string" }, { name: "LotSerFxdVal", mapping: "LotSerFxdVal", type: "string" }, { name: "LotSerIssMthd", mapping: "LotSerIssMthd", type: "string" }, { name: "LotSerNumLen", mapping: "LotSerNumLen", type: "int" }, { name: "LotSerNumVal", mapping: "LotSerNumVal", type: "string" }, { name: "LotSerTrack", mapping: "LotSerTrack", type: "string" }, { name: "MaterialType", mapping: "MaterialType", type: "string" }, { name: "NodeID", mapping: "NodeID", type: "string" }, { name: "NodeLevel", mapping: "NodeLevel", type: "int" }, { name: "ParentRecordID", mapping: "ParentRecordID", type: "int" }, { name: "Picture", mapping: "Picture", type: "string" }, { name: "POFee", mapping: "POFee", type: "float" }, { name: "POPrice", mapping: "POPrice", type: "float" }, { name: "PrePayPct", mapping: "PrePayPct", type: "float" }, { name: "PriceClassID", mapping: "PriceClassID", type: "string" }, { name: "SerAssign", mapping: "SerAssign", type: "string" }, { name: "ShelfLife", mapping: "ShelfLife", type: "int" }, { name: "Size", mapping: "Size", type: "string" }, { name: "SOFee", mapping: "SOFee", type: "float" }, { name: "SOPrice", mapping: "SOPrice", type: "float" }, { name: "Source", mapping: "Source", type: "string" }, { name: "Status", mapping: "Status", type: "string" }, { name: "StkItem", mapping: "StkItem", type: "int" }, { name: "StkUnit", mapping: "StkUnit", type: "string" }, { name: "StkVol", mapping: "StkVol", type: "float" }, { name: "StkWt", mapping: "StkWt", type: "float" }, { name: "StkWtUnit", mapping: "StkWtUnit", type: "string" }, { name: "Style", mapping: "Style", type: "string" }, { name: "TaxCat", mapping: "TaxCat", type: "string" }, { name: "ValMthd", mapping: "ValMthd", type: "string" }, { name: "VendID1", mapping: "VendID1", type: "string" }, { name: "VendID2", mapping: "VendID2", type: "string" }, { name: "WarrantyDays", mapping: "WarrantyDays", type: "int" }, { name: "Public", mapping: "Public", type: "int" }, { name: "ApproveStatus", mapping: "ApproveStatus", type: "string" }, { name: "LotSerRcptAuto", mapping: "LotSerRcptAuto", type: "int" }, { name: "DfltWhseLoc", mapping: "DfltWhseLoc", type: "string" }] }), storeId: "stoPO10200_pdIN_Inventory", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "param3": App.cboBranchID.getValue(), "procName": "PO10200_pdIN_Inventory", "procParam": "@UserID,@CpnyID,@LangID,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { loadPO10200_pdIN_Inventory() } } } }); window.App.stoPO10200_pdIN_UnitConversion = Ext.create("Ext.data.Store", { model: Ext.define("App.stoPO10200_pdIN_UnitConversionmdl", { extend: "Ext.data.Model", fields: [{ name: "UnitType", mapping: "UnitType", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "InvtID", mapping: "InvtID", type: "string" }, { name: "FromUnit", mapping: "FromUnit", type: "string" }, { name: "ToUnit", mapping: "ToUnit", type: "string" }, { name: "MultDiv", mapping: "MultDiv", type: "string" }, { name: "CnvFact", mapping: "CnvFact", type: "float" }] }), storeId: "stoPO10200_pdIN_UnitConversion", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "PO10200_pdIN_UnitConversion", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { loadPO10200_pdIN_UnitConversion() } } } }); window.App.stoPO10200_ppCheckingPONbr = Ext.create("Ext.data.Store", { model: Ext.define("App.PO10200_ppCheckingPONbrModel", { extend: "Ext.data.Model", fields: [{ name: "PONbr", type: "string" }], idProperty: "PONbr" }), storeId: "stoPO10200_ppCheckingPONbr", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "poNbr": App.cboPONbr.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetPO10200_ppCheckingPONbr", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPO10200_pdPODetailReceipt = Ext.create("Ext.data.Store", { model: Ext.define("App.PO10200_pdPODetailReceiptModel", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CnvFact", type: "float" }, { name: "CostID", type: "string" }, { name: "CostVouched", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "DiscPct", type: "float" }, { name: "TranAmt", type: "float" }, { name: "ExtWeight", type: "float" }, { name: "ExtVolume", type: "float" }, { name: "InvtID", type: "string" }, { name: "JrnlType", type: "string" }, { name: "OrigRcptDate", type: "date", dateFormat: "c" }, { name: "OrigRcptNbr", type: "string" }, { name: "OrigRetRcptNbr", type: "string" }, { name: "POLineRef", type: "string" }, { name: "PONbr", type: "string" }, { name: "POOriginal", type: "string" }, { name: "PurchaseType", type: "string" }, { name: "Qty", type: "float" }, { name: "QtyVouched", type: "float" }, { name: "RcptConvFact", type: "float" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFee", type: "float" }, { name: "RcptMultDiv", type: "string" }, { name: "RcptQty", type: "float" }, { name: "RcptUnitDescr", type: "string" }, { name: "ReasonCD", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID", type: "string" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranDesc", type: "string" }, { name: "TranType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitDescr", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitVolume", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "tstamp", type: "string" }, { name: "IsChanged", type: "string" }, { name: "WhseLoc", type: "string" }], idProperty: "PONbr,LineRef" }), storeId: "stoPO10200_pdPODetailReceipt", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "poNbr": App.cboPONbr.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetPO10200_pdPODetailReceipt", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPO10200_pdPODetailReturn = Ext.create("Ext.data.Store", { model: Ext.define("App.PO10200_pdPODetailReturnModel", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CnvFact", type: "float" }, { name: "CostID", type: "string" }, { name: "CostVouched", type: "float" }, { name: "DiscPct", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "ExtWeight", type: "float" }, { name: "ExtVolume", type: "float" }, { name: "InvtID", type: "string" }, { name: "JrnlType", type: "string" }, { name: "NoteID", type: "int" }, { name: "OrigRcptDate", type: "date", dateFormat: "c" }, { name: "OrigRcptNbr", type: "string" }, { name: "OrigRetRcptNbr", type: "string" }, { name: "POLineRef", type: "string" }, { name: "PONbr", type: "string" }, { name: "POOriginal", type: "string" }, { name: "PurchaseType", type: "string" }, { name: "Qty", type: "float" }, { name: "QtyVouched", type: "float" }, { name: "RcptConvFact", type: "float" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFee", type: "float" }, { name: "RcptMultDiv", type: "string" }, { name: "RcptQty", type: "float" }, { name: "RcptUnitDescr", type: "string" }, { name: "ReasonCD", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID", type: "string" }, { name: "TranAmt", type: "float" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranDesc", type: "string" }, { name: "TranType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitDescr", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitVolume", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "tstamp", type: "string" }, { name: "IsChanged", type: "string" }, { name: "DiscCode", type: "string" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "WhseLoc", type: "string" }], idProperty: "PONbr,LineRef" }), storeId: "stoPO10200_pdPODetailReturn", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "poNbr": App.cboPONbr.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetPO10200_pdPODetailReturn", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPO10200_pgBackOrderDetail = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlPO10200_pgBackOrderDetail", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CnvFact", type: "float" }, { name: "CostID", type: "string" }, { name: "CostVouched", type: "float" }, { name: "ExtWeight", type: "float" }, { name: "ExtVolume", type: "float" }, { name: "DiscPct", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "InvtID", type: "string" }, { name: "JrnlType", type: "string" }, { name: "OrigRcptDate", type: "date", dateFormat: "c" }, { name: "OrigRcptNbr", type: "string" }, { name: "OrigRetRcptNbr", type: "string" }, { name: "POLineRef", type: "string" }, { name: "PONbr", type: "string" }, { name: "POOriginal", type: "string" }, { name: "PurchaseType", type: "string" }, { name: "Qty", type: "float" }, { name: "QtyVouched", type: "float" }, { name: "RcptConvFact", type: "float" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFee", type: "float" }, { name: "RcptMultDiv", type: "string" }, { name: "RcptQty", type: "float" }, { name: "RcptUnitDescr", type: "string" }, { name: "ReasonCD", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID", type: "string" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "TranAmt", type: "float" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranDesc", type: "string" }, { name: "TranType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitDescr", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitVolume", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "tstamp", type: "string" }, { name: "IsChanged", type: "int" }, { name: "PosmID", type: "string" }, { name: "ClassID", type: "string" }, { name: "DiscCode", type: "string" }, { name: "FromPO10200", type: "boolean" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "QtyFromOM", type: "float" }, { name: "WhseLoc", type: "string" }], idProperty: "PONbr,LineRef" }), storeId: "stoPO10200_pgBackOrderDetail", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": _backOrderBatNbr, "rcptNbr": _backOrderRcptNbr } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "PO10200/GetPO10200_pgBackOrderDetail", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: sto_BeforeLoad }, load: { fn: stoPO10200_pgBackOrderDetail_Load } } }); window.App.stoLotTransBackOrder = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlLotTransBackOrder", { extend: "Ext.data.Model", fields: [{ name: "LotSerNbr", type: "string" }, { name: "POTranLineRef", type: "string" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "InvtID", type: "string" }, { name: "InvtMult", type: "int" }, { name: "KitID", type: "string" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "Qty", type: "float" }, { name: "SiteID", type: "string" }, { name: "ToSiteID", type: "string" }, { name: "ToWhseLoc", type: "string" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranType", type: "string" }, { name: "TranScr", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitPrice", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "WhseLoc", type: "string" }, { name: "tstamp", type: "string" }, { name: "CnvFact", type: "float" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitDesc", type: "string" }, { name: "MfcDate", type: "date", dateFormat: "c" }, { name: "MaxReturnQty", type: "float" }] }), storeId: "stoLotTransBackOrder", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": _backOrderBatNbr, "rcptNbr": _backOrderRcptNbr, "poNbr": "", "type": App.cboRcptType.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "PO10200/GetLotTrans", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: sto_BeforeLoad }, load: { fn: stoLotTransBackOrder_Load } } }); Ext.create("Ext.container.Viewport", { renderTo: Ext.getBody(), items: [{ id: "winBackOrder", height: 400, minHeight: 200, minWidth: 300, width: 650, xtype: "window", defaultButton: "btnLoad", items: [{ region: "north", items: [{ margin: "5", xtype: "container", items: [{ id: "dteFromDate", width: 170, xtype: "datefield", fieldLabel: HQ.common.getLang('FROMDATE'), labelAlign: "right", labelWidth: 70, allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { change: { fn: dteFromDate_change } } }, { id: "dteToDate", width: 170, xtype: "datefield", fieldLabel: HQ.common.getLang('TODATE'), labelAlign: "right", labelWidth: 70, allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y" }, { id: "btnLoad", margin: "0 0 0 10", width: 120, xtype: "button", iconCls: "#ArrowRefresh", text: HQ.common.getLang('LOADDATA'), listeners: { click: { fn: btnLoad_Click } } }], layout: "hbox" }], layout: "fit" }, { region: "center", items: [{ store: { model: Ext.define("App.mdlPO10200_pgPONbr", { extend: "Ext.data.Model", fields: [{ name: "BatNbr", type: "string" }, { name: "TotAmt", type: "float" }, { name: "RefNbr", type: "string" }, { name: "Status", type: "string" }, { name: "tstamp", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "Descr", type: "string" }, { name: "NoteID", type: "int" }, { name: "PONbr", type: "string" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFeeTot", type: "float" }, { name: "RcptFrom", type: "string" }, { name: "RcptQtyTot", type: "float" }, { name: "RcptTot", type: "float" }, { name: "RcptType", type: "string" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "DiscAmt", type: "float" }, { name: "DiscAmtPct", type: "float" }, { name: "RcptTotAmt", type: "float" }, { name: "TxblAmtTot00", type: "float" }, { name: "TxblAmtTot01", type: "float" }, { name: "TxblAmtTot02", type: "float" }, { name: "TxblAmtTot03", type: "float" }, { name: "TaxAmtTot00", type: "float" }, { name: "TaxAmtTot01", type: "float" }, { name: "TaxAmtTot02", type: "float" }, { name: "TaxAmtTot03", type: "float" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "DocDiscAmt", type: "float" }, { name: "APBatNbr", type: "string" }, { name: "APRefNbr", type: "string" }, { name: "DocDate", type: "date", dateFormat: "c" }, { name: "DocType", type: "string" }, { name: "InvcDate", type: "date", dateFormat: "c" }, { name: "InvcNbr", type: "string" }, { name: "InvcNote", type: "string" }, { name: "PerPost", type: "string" }, { name: "Terms", type: "string" }, { name: "OrigBranchID", type: "string" }, { name: "OrigBatNbr", type: "string" }] }), storeId: "stoBackOrder", type: "paging", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "fromDate": App.dteFromDate.getValue(), "toDate": App.dteToDate.getValue() } }; }, serverProxy: { type: "ajax", timeout: 2147483647, url: "PO10200/GetBackOrder" }, pageSize: 30, proxy: { type: 'pagingmemory' }, listeners: { beforeload: { fn: sto_BeforeLoad }, load: { fn: stoBackOrder_Load } } }, id: "grdBackOrder", xtype: "grid", layout: "fit", bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "30", value: "30" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoBackOrder", hideRefresh: true }, columns: { items: [{ maxWidth: 100, minWidth: 20, width: 30, xtype: "rownumberer", listeners: { afterrender: { fn: function (item) { this.resizable = true } } } }, { width: 110, dataIndex: "BatNbr", text: HQ.common.getLang('BATNBR') }, { width: 110, dataIndex: "InvcNbr", text: HQ.common.getLang('INVCNBR') }, { style: "text-align:left", width: 120, xtype: "numbercolumn", align: "right", dataIndex: "TotAmt", text: HQ.common.getLang('TOTAMT'), format: "0,000" }, { width: 150, dataIndex: "PONbr", text: HQ.common.getLang('PONBR') }, { width: 120, xtype: "datecolumn", dataIndex: "InvcDate", text: HQ.common.getLang('INVCDATE'), format: HQ.formatDateJS }] }, selModel: Ext.create("Ext.selection.CheckboxModel", { selType: "checkboxmodel", mode: "single", showHeaderCheckbox: false }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "BatNbr", type: "string" }, { dataIndex: "InvcNbr", type: "string" }, { dataIndex: "TotAmt", type: "numeric" }, { dataIndex: "PONbr", type: "string" }, { dataIndex: "InvcDate", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }] })], viewConfig: { xtype: "gridview", trackOver: false }, listeners: { celldblclick: { fn: btnOK_click } } }], layout: "fit" }, { margin: "5 5 5 5", xtype: "container", region: "south", items: [{ id: "btnOK", minWidth: 60, xtype: "button", handler: btnOK_click, iconCls: "#Disk", text: HQ.common.getLang('OK') }, { margin: "0 0 0 5", minWidth: 60, xtype: "button", handler: function () { App.winBackOrder.close(); }, iconCls: "#ApplicationHome", text: HQ.common.getLang('CLOSE') }], layout: { type: "hbox", pack: "center" } }], layout: "border", title: HQ.common.getLang('PO10200BACKORDER'), listeners: { beforeshow: { fn: winBackOrder_BeforeShow }, hide: { fn: function (item) { App.frmMain.unmask(); } }, close: { fn: function (item) { App.frmMain.unmask(); } } } }, { id: "frmMain", xtype: "form", keyMap: { binding: [{ ctrl: true, alt: true, handler: function () { menuClick('save'); }, key: "S" }, { ctrl: true, alt: true, handler: function () { menuClick('delete'); }, key: "D" }, { ctrl: true, alt: true, handler: function () { menuClick('new'); }, key: "N" }, { ctrl: true, alt: true, handler: function () { menuClick('print'); }, key: "P" }, { ctrl: true, handler: function () { menuClick('first'); }, key: "Up" }, { ctrl: true, handler: function () { menuClick('prev'); }, key: "Left" }, { ctrl: true, handler: function () { menuClick('last'); }, key: "Down" }, { ctrl: true, handler: function () { menuClick('next'); }, key: "Right" }], target: Ext.getBody() }, defaultAnchor: "100%", items: [{ id: "pnlHeader", border: false, autoScroll: true, items: [{ xtype: "container", items: [{ id: "cboBranchID", margin: "3 0 0 0", xtype: "combobox", fieldLabel: HQ.common.getLang('BRANCHID'), inputWidth: 150, labelAlign: "right", labelWidth: 110, name: "cboBranchID", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "BranchID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('BRANCHID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('BRANCHNAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{BranchID}</td><td style='min-width: 100px !important;'>{BranchName}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "BranchID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BranchID", mapping: "BranchID", type: "string" }, { name: "BranchName", mapping: "BranchName", type: "string" }, { name: "Addr", mapping: "Addr", type: "string" }] }), storeId: "cboBranchIDPO10200_pcBranchAllByUser", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "procName": "PO10200_pcBranchAllByUser", "procParam": "@UserID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboBranchID_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, select: { fn: cboBranchID_Select }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'BranchID,BranchName') } } } }, { id: "txtBranchName", tag: "X", margin: "3 0 0 0", xtype: "textfield", fieldLabel: HQ.common.getLang('BRANCHNAME'), inputWidth: 310, labelWidth: 110, name: "BranchName", readOnly: true, maxLength: 400 }, { id: "cboStatus", tag: "X", margin: "3 0 0 0", xtype: "combobox", fieldLabel: HQ.common.getLang('STATUS'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "Status", dataIndex: "Status", readOnly: true, delimiter: ",", displayField: "Descr", queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboStatusPO10200_pcStatus", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "param1": HQ.cpnyID, "param2": HQ.userName, "procName": "PO10200_pcStatus", "procParam": "@LangID,@CpnyID,@UserID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: cboStatus_Change }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }], layout: "hbox" }, { xtype: "container", items: [{ id: "cboBatNbr", margin: "3 0 0 0", xtype: "combobox", fieldLabel: HQ.common.getLang('BATNBR'), inputWidth: 150, labelAlign: "right", labelWidth: 110, name: "cboBatNbr", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "BatNbr", listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<table style='table-layout: fixed; max-width:1100px !important'>", "<tr>", "<th style='min-width:130px;'>" + HQ.common.getLang('BATNBR') + "</th>", "<th style='min-width:130px;'>" + HQ.common.getLang('REFNBR') + "</th>", "<th style='min-width:130px;'>" + HQ.common.getLang('TOTAMT') + "</th>", "<th style='min-width:130px;'>" + HQ.common.getLang('INVCDATE') + "</th>", "<th style='min-width:130px;'>" + HQ.common.getLang('RECEIPTDATE') + "</th>", "<th style='min-width:200px;'>" + HQ.common.getLang('PONBR') + "</th>", "<th style='min-width:130px;'>" + HQ.common.getLang('STATUS') + "</th>", "<th>" + HQ.common.getLang('VENDNAME') + "</th>", "</tr>", "</tpl>", "<tr class='x-boundlist-item'>", "<td>{BatNbr}</td>", "<td>{RefNbr}</td>", "<td>{TotAmt}</td>", "<td>{INVCDATE}</td>", "<td>{ReceiptDate}</td>", "<td>{PONbr}</td>", "<td>{Status}</td>", "<td>{Name}</td>", "</tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</tpl>", "</tpl>"] }), itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, valueField: "BatNbr", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BatNbr", mapping: "BatNbr", type: "string" }, { name: "TotAmt", mapping: "TotAmt", type: "string" }, { name: "RcptDate", mapping: "RcptDate", type: "string" }, { name: "PONbr", mapping: "PONbr", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "invcnbr", mapping: "invcnbr", type: "string" }, { name: "BranchID", mapping: "BranchID", type: "string" }, { name: "Status", mapping: "Status", type: "string" }, { name: "NoteID", mapping: "NoteID", type: "int" }, { name: "RefNbr", mapping: "RefNbr", type: "string" }, { name: "tstamp", mapping: "tstamp" }, { name: "INVCDATE", mapping: "INVCDATE", type: "string" }, { name: "ReceiptDate", mapping: "ReceiptDate", type: "string" }] }), storeId: "cboBatNbrPO10200_pcReceipt_Batch", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboBranchID.getValue(), "param2": HQ.langID, "procName": "PO10200_pcReceipt_Batch", "procParam": "@UserID,@BranchID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: cboBatNbr_Blur }, focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboBatNbr_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); App.stoHeader.reload(); } } }, select: { fn: cboBatNbr_Select }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'BatNbr,RefNbr,TotAmt,INVCDATE,ReceiptDate,PONbr,Status,Name') } } } }, { id: "txtIssueRcptNbr", tag: "X", hidden: true, margin: "3 0 0 0", xtype: "textfield", fieldLabel: HQ.common.getLang('ISSRCPTNBR'), inputWidth: 110, labelWidth: 110, name: "RefNbr", readOnly: true, maxLength: 20 }, { id: "txtTotAmt", tag: "X", hidden: true, margin: "3 0 0 0", xtype: "numberfield", fieldLabel: HQ.common.getLang('TOTAMT'), inputWidth: 105, labelAlign: "right", labelWidth: 90, name: "TotAmt", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }, { id: "txtDescr", margin: "3 0 0 0", xtype: "textfield", fieldLabel: HQ.common.getLang('DESCR'), inputWidth: 310, labelWidth: 110, name: "Descr", enforceMaxLength: true, maxLength: 200 }, { id: "cboHandle", margin: "3 0 0 0", xtype: "combobox", fieldLabel: HQ.common.getLang('HANDLE'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "Handle", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboHandlePO10200_pcHandle", readParameters: function (operation) { return { apply: { "param0": HQ.langID, "param1": HQ.userName, "param2": App.cboStatus.getValue(), "param3": HQ.cpnyID, "procName": "PO10200_pcHandle", "procParam": "@LangID,@UserID,@Status,@CpnyID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { App.cboHandle.setValue("N") } } } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }, { id: "txtOrigBranchID", hidden: true, xtype: "textfield", name: "OrigBranchID", readOnly: true }, { id: "txtOrigBatNbr", hidden: true, xtype: "textfield", name: "OrigBatNbr", readOnly: true }], layout: "hbox" }], layout: "vbox", listeners: { render: { fn: function (item) { HQ.common.control_render(this, 'header') } }, resize: { fn: function (item, adjWidth, adjHeight) { App.tabDetail.setAnchor("100% -" + App.pnlHeader.getHeight()); } } } }, { id: "tabDetail", margin: "5 0 0 0", xtype: "tabpanel", items: [{ id: "tabDoc", split: true, items: [{ id: "pnlReceipt", autoScroll: true, items: [{ border: false, autoScroll: true, items: [{ margin: "5 0 0 0", xtype: "container", items: [{ id: "txtRcptNbr", tag: "X", xtype: "textfield", fieldLabel: HQ.common.getLang('RCPTNBR'), inputWidth: 150, labelWidth: 105, name: "RcptNbr", readOnly: true, enforceMaxLength: true, maxLength: 20 }, { id: "cboDocType", tag: "X", xtype: "combobox", fieldLabel: HQ.common.getLang('DOCTYPE'), inputWidth: 230, labelAlign: "right", labelWidth: 130, name: "DocType", readOnly: true, allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDocTypePO10200_pcDocType", readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "PO10200_pcDocType", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboDocType_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, select: { fn: cboDocType_Select }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }, { id: "dtInvcDate", xtype: "datefield", fieldLabel: HQ.common.getLang('INVCDATE'), inputWidth: 105, labelAlign: "right", labelWidth: 120, name: "InvcDate", allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { change: { fn: dtInvcDate_Change } } }, { id: "txtRcptAmtTot", tag: "X", xtype: "numberfield", fieldLabel: HQ.common.getLang('TXBLAMT'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "txtRcptAmtTot", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }, { id: "cboPerPost", xtype: "combobox", fieldLabel: HQ.common.getLang('PERPOST'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "PerPost", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "CycleNbr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CYCLENBR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('STARTDATE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('ENDDATE') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{CycleNbr}</td><td style='min-width: 100px !important;'>{StartDate:date('" + HQ.formatDateJS + "')}</td><td style='min-width: 100px !important;'>{EndDate:date('" + HQ.formatDateJS + "')}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "CycleNbr", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "CycleNbr", mapping: "CycleNbr", type: "string" }, { name: "StartDate", mapping: "StartDate", type: "date", dateFormat: "c" }, { name: "EndDate", mapping: "EndDate", type: "date", dateFormat: "c" }] }), storeId: "cboPerPostPO10200_pcPerPost", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "PO10200_pcPerPost", "procParam": "@UserID,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'CycleNbr,StartDate,EndDate') } } } }], layout: "hbox" }, { margin: "3 0 0 0", xtype: "container", items: [{ id: "cboRcptType", xtype: "combobox", fieldLabel: HQ.common.getLang('RECEIPTTYPE'), inputWidth: 150, labelAlign: "right", labelWidth: 105, name: "RcptType", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboRcptTypePO10200_pcRcptType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "PO10200_pcRcptType", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboRcptType_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }, { id: "cboPONbr", tag: "X", xtype: "combobox", fieldLabel: HQ.common.getLang('PONBR'), inputWidth: 230, labelAlign: "right", labelWidth: 130, name: "PONbr", readOnly: true, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "PONbr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('PONBR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('STATUSDESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NOTES') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{PONbr}</td><td style='min-width: 100px !important;'>{StatusDescr}</td><td style='min-width: 100px !important;'>{Name}</td><td style='min-width: 100px !important;'>{Notes}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 500, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "PONbr", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Terms", mapping: "Terms", type: "string" }, { name: "VendID", mapping: "VendID", type: "string" }, { name: "PONbr", mapping: "PONbr", type: "string" }, { name: "Status", mapping: "Status", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "Notes", mapping: "Notes", type: "string" }, { name: "StatusDescr", mapping: "StatusDescr", type: "string" }] }), storeId: "cboPONbrPO10200_pcPONbr", readParameters: function (operation) { return { apply: { "param0": App.cboRcptType.getValue(), "param1": App.cboBranchID.getValue(), "param2": HQ.userName, "param3": HQ.cpnyID, "param4": HQ.langID, "procName": "PO10200_pcPONbr", "procParam": "@Type,@BranchID,@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { if (App.cboStatus.getValue() == 'H' && App.cboPONbr.readOnly != true) { this.forceSelection = true; } else { this.forceSelection = false; } } }, change: { fn: cboPONbr_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, select: { fn: cboPONbr_Select }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'PONbr,StatusDescr,Name,Notes') } } } }, { id: "dtRcptDate", xtype: "datefield", fieldLabel: HQ.common.getLang('RECEIPTDATE'), inputWidth: 105, labelAlign: "right", labelWidth: 120, name: "RcptDate", allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { blur: { fn: dtRcptDate_Blur }, focus: { fn: dtRcptDate_Focus } } }, { id: "txtDiscAmt", tag: "X", xtype: "numberfield", fieldLabel: HQ.common.getLang('DISCOUNT'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "DiscAmt", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }], layout: "hbox" }, { margin: "3 0 0 0", xtype: "container", items: [{ id: "cboRcptFrom", xtype: "combobox", fieldLabel: HQ.common.getLang('RCPTFROM'), inputWidth: 150, labelAlign: "right", labelWidth: 105, name: "RcptFrom", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboRcptFromPO10200_pcRcptFrom", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboRcptType.getValue(), "param2": HQ.cpnyID, "param3": HQ.langID, "procName": "PO10200_pcRcptFrom", "procParam": "@UserName,@RcptType,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: function (item) { this.forceSelection = false; } }, focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboRcptFrom_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }, { id: "cboVendID", xtype: "combobox", fieldLabel: HQ.common.getLang('VENDID'), inputWidth: 230, labelAlign: "right", labelWidth: 130, name: "VendID", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "VendID", listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<table style='table-layout: fixed; max-width:500px !important'>", "<tr>", "<th style='min-width:130px;'>" + HQ.common.getLang('VENDID') + "</th>", "<th style='min-width:130px;'>" + HQ.common.getLang('NAME') + "</th>", "<th>" + HQ.common.getLang('ADDRESS') + "</th>", "</tr>", "</tpl>", "<tr class='x-boundlist-item'>", "<td>{VendID}</td>", "<td>{Name}</td>", "<td>{Address}</td>", "</tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</tpl>", "</tpl>"] }), itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, valueField: "VendID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "VendID", mapping: "VendID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "Address", mapping: "Address", type: "string" }, { name: "Terms", mapping: "Terms", type: "string" }, { name: "TaxID00", mapping: "TaxID00", type: "string" }] }), storeId: "cboVendIDPO10200_pcVendor_Active", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboBranchID.getValue(), "param2": HQ.cpnyID, "param3": HQ.langID, "procName": "PO10200_pcVendor_Active", "procParam": "@UserID,@BranchID,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { loadDefault(this, App.cboVendID); } } } }, listeners: { blur: { fn: function (item) { this.forceSelection = false; } }, focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboVendID_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'VendID,Name,Address') } } } }, { id: "txtRcptTot", tag: "X", hidden: true, xtype: "numberfield", fieldLabel: HQ.common.getLang('LINETOT'), inputWidth: 105, labelAlign: "right", name: "RcptTot", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }, { id: "dteTruckRcptDate", xtype: "datefield", fieldLabel: HQ.common.getLang('TRUCKRCPTDATE'), inputWidth: 105, labelAlign: "right", labelWidth: 120, name: "TruckRcptDate", format: HQ.formatDateJS, submitFormat: "m/d/Y" }, { id: "txtTaxAmt", tag: "X", margin: "0 0 0 0", xtype: "numberfield", fieldLabel: HQ.common.getLang('TAX'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "TaxAmt", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }], layout: "hbox" }, { margin: "3 0 0 0", xtype: "container", items: [{ id: "cboReason", tag: "X", xtype: "combobox", fieldLabel: HQ.common.getLang('PO10200REASON'), inputWidth: 150, labelAlign: "right", labelWidth: 105, name: "ReasonCD", readOnly: true, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboReasonPO10200_pcReasonCode", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "param1": HQ.cpnyID, "param2": HQ.userName, "param3": App.cboBatNbr.getValue(), "param4": App.cboBranchID.getValue(), "procName": "PO10200_pcReasonCode", "procParam": "@LangID,@CpnyID,@UserName,@BatNbr,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.focus(true); this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }, { id: "txtInvcNbr", xtype: "textfield", fieldLabel: HQ.common.getLang('PO10200INVCNBRNOTE'), inputWidth: 115, labelWidth: 130, name: "InvcNbr", enforceMaxLength: true, maxLength: 30, listeners: { blur: { fn: check_UnicodeNbr } } }, { id: "txtInvcNote", xtype: "textfield", fieldLabel: HQ.common.getLang('INVCNBR'), hideLabel: true, inputWidth: 115, name: "InvcNote", enforceMaxLength: true, maxLength: 30, listeners: { blur: { fn: check_UnicodeNote } } }, { id: "txtRcptFeeTot", tag: "X", hidden: true, xtype: "numberfield", fieldLabel: HQ.common.getLang('FEETOT'), inputWidth: 105, labelAlign: "right", name: "RcptFeeTot", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }, { id: "txtRcptQtyTot", tag: "X", xtype: "numberfield", fieldLabel: HQ.common.getLang('QUANTITYTOTAL'), inputWidth: 105, labelAlign: "right", labelWidth: 120, name: "RcptQtyTot", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }, { id: "txtAfterTaxAmt", tag: "X", xtype: "numberfield", fieldLabel: HQ.common.getLang('TOTAMT'), inputWidth: 120, labelAlign: "right", labelWidth: 110, name: "AfterTaxAmt", readOnly: true, allowBlank: false, decimalPrecision: 0, decimalSeparator: "." }], layout: "hbox" }, { margin: "3 0 5 0", xtype: "container", items: [{ id: "chkInTransit", margin: "0 0 0 10", xtype: "checkboxfield", name: "InTransit", boxLabel: HQ.common.getLang('INTRANSIT'), inputValue: "App.chkInTransit" }], layout: "hbox" }], layout: "vbox" }], layout: "fit", listeners: { render: { fn: function (item) { HQ.common.control_render(this, 'header') } }, resize: { fn: function (item, adjWidth, adjHeight) { App.grdPO_Trans.setAnchor("100% -" + App.pnlReceipt.getHeight()); App.grdPO_Trans.view.refresh(); } } } }, { store: { model: Ext.define("App.mdlPO10200_pgDetailModel", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CnvFact", type: "float" }, { name: "CostID", type: "string" }, { name: "CostVouched", type: "float" }, { name: "ExtWeight", type: "float" }, { name: "ExtVolume", type: "float" }, { name: "DiscPct", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "InvtID", type: "string" }, { name: "JrnlType", type: "string" }, { name: "OrigRcptDate", type: "date", dateFormat: "c" }, { name: "OrigRcptNbr", type: "string" }, { name: "OrigRetRcptNbr", type: "string" }, { name: "POLineRef", type: "string" }, { name: "PONbr", type: "string" }, { name: "POOriginal", type: "string" }, { name: "PurchaseType", type: "string" }, { name: "Qty", type: "float" }, { name: "QtyVouched", type: "float" }, { name: "RcptConvFact", type: "float" }, { name: "RcptDate", type: "date", dateFormat: "c" }, { name: "RcptFee", type: "float" }, { name: "RcptMultDiv", type: "string" }, { name: "RcptQty", type: "float" }, { name: "RcptUnitDescr", type: "string" }, { name: "ReasonCD", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID", type: "string" }, { name: "TranAmt", type: "float" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "TranDesc", type: "string" }, { name: "TranType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitDescr", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitVolume", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "VendID", type: "string" }, { name: "VouchStage", type: "string" }, { name: "tstamp", type: "string" }, { name: "IsChanged", type: "int" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "PosmID", type: "string" }, { name: "ClassID", type: "string" }, { name: "DiscCode", type: "string" }, { name: "FromPO10200", type: "boolean" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "QtyFromOM", type: "float" }, { name: "WhseLoc", type: "string" }, { name: "MaxReturnQty", type: "float" }, { name: "Revenue", type: "float" }, { name: "ReferDescr", type: "string" }, { name: "LineGiftPoint", type: "float" }, { name: "Level", type: "int" }], idProperty: "PurchaseType,InvtID" }), storeId: "stoPO10200_pgDetail", type: "paging", readParameters: function (operation) { return { apply: { "branchID": App.cboBranchID.getValue(), "batNbr": App.cboBatNbr.getValue(), "rcptNbr": App.txtRcptNbr.getValue() } }; }, serverProxy: { type: "ajax", url: "PO10200/GetPO10200_pgDetail" }, pageSize: 50, proxy: { type: 'pagingmemory' }, listeners: { load: { fn: stoPO10200_pgDetail_Load } } }, id: "grdPO_Trans", margin: "5 0 0 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: grdPO_Trans_BeforeEdit }, edit: { fn: grdPO_Trans_Edit }, validateedit: { fn: grdPO_Trans_ValidateEdit } } }], xtype: "grid", region: "center", layout: "fit", bbar: { plugins: [window.App.pagDetail = Ext.create("Ext.ux.ProgressBarPager", { proxyId: "pagDetail" })], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "50", value: "50" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoPO10200_pgDetail", hideRefresh: true }, columnLines: true, columns: { items: [{ xtype: "rownumberer" }, { hidden: true, dataIndex: "POLineRef", text: HQ.common.getLang('POLINE') }, { hidden: true, dataIndex: "OrigRcptNbr", text: HQ.common.getLang('ORIGRCPTNBR') }, { width: 120, dataIndex: "PurchaseType", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "PurchaseType", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "PurchaseType", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "PurchaseTypePO10200_pcPurchaseType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "PO10200_pcPurchaseType", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } } }, {})), renderer: renderPurchaseType, text: HQ.common.getLang('PURCHASETYPE') }, { width: 130, dataIndex: "InvtID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboInvtID", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "InvtID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "InvtID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('INVTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('ISPOSM') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{InvtID}</td><td style='min-width: 100px !important;'>{Descr}</td><td style='min-width: 100px !important;'>{IsPOSM}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "InvtID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BarCode", mapping: "BarCode", type: "string" }, { name: "Descr1", mapping: "Descr1", type: "string" }, { name: "InvtID", mapping: "InvtID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "Color", mapping: "Color", type: "string" }, { name: "CpnyID", mapping: "CpnyID", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "StkUnit", mapping: "StkUnit", type: "string" }, { name: "PriceClassID", mapping: "PriceClassID", type: "string" }, { name: "TaxCat", mapping: "TaxCat", type: "string" }, { name: "DfltSite", mapping: "DfltSite", type: "string" }, { name: "DfltSOUnit", mapping: "DfltSOUnit", type: "string" }, { name: "SOPrice", mapping: "SOPrice", type: "float" }, { name: "SOFee", mapping: "SOFee", type: "float" }, { name: "ValMthd", mapping: "ValMthd", type: "string" }, { name: "StkItem", mapping: "StkItem", type: "int" }, { name: "StkWt", mapping: "StkWt", type: "float" }, { name: "ShelfLife", mapping: "ShelfLife", type: "int" }] }), storeId: "cboInvtIDPO10200_pcInventoryActive", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "param3": App.cboBranchID.getValue(), "procName": "PO10200_pcInventoryActive", "procParam": "@CpnyID,@UserName,@LangID,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: cboGInvtID_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'InvtID,Descr,IsPOSM') } } } } }, {})), text: HQ.common.getLang('INVTID') }, { width: 200, dataIndex: "TranDesc", text: HQ.common.getLang('DESCR') }, { dataIndex: "SiteID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboSiteID", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "SiteID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Name", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SITEID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SiteID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SiteID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SiteID", mapping: "SiteID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "CpnyID", mapping: "CpnyID", type: "string" }, { name: "SiteType", mapping: "SiteType", type: "string" }] }), storeId: "cboSiteIDPO10200_pcSiteAll", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.cboBranchID.getValue(), "procName": "PO10200_pcSiteAll", "procParam": "@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, collapse: { fn: cboSiteID_Collapse }, expand: { fn: cboSiteID_Expand }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SiteID,Name') } } } } }, {})), renderer: renderSiteID, text: HQ.common.getLang('SITE') }, { id: "colWhseLoc", width: 120, dataIndex: "WhseLoc", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboWhseLoc", xtype: "combobox", name: "cboWhseLoc", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "SiteID", mapping: "SiteID", type: "string" }] }), storeId: "cboWhseLocPO10200_pcWhseLoc", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "PO10200_pcWhseLoc", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, collapse: { fn: function (item) { App.cboWhseLoc.store.clearFilter(); } }, expand: { fn: cboWhseLoc_Expand }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderWhseLoc, text: HQ.common.getLang('PO12000WHSELOC') }, { style: "text-align:left", width: 110, xtype: "numbercolumn", align: "right", dataIndex: "Qty", text: HQ.common.getLang('PO101QTYORD'), format: "0,000" }, { dataIndex: "UnitDescr", text: HQ.common.getLang('PO101PURCHUNIT') }, { style: "text-align:left", width: 110, xtype: "numbercolumn", align: "right", dataIndex: "RcptQty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", allowExponential: false, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { change: { fn: txtcRcptQty_Change } } } }, {})), text: HQ.common.getLang('PO102QTY'), format: "0,000" }, { width: 30, xtype: "imagecommandcolumn", text: HQ.common.getLang(''), commands: [{ command: "Update", iconCls: "#TabEdit", tooltip: { text: HQ.common.getLang('SHOWLOT') } }], listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { showLot(record); } } } }, { dataIndex: "RcptUnitDescr", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboRcptUnitDescr", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "RcptUnitDescr", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "FromUnit", forceSelection: true, queryMode: "local", valueField: "FromUnit", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "FromUnit", mapping: "FromUnit", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "InvtId", mapping: "InvtId", type: "string" }] }), storeId: "cboRcptUnitDescrPO10200_pcINUnit_Invt_Class_From_To", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": _classID, "param1": _stkUnit, "param2": _invtID, "procName": "PO10200_pcINUnit_Invt_Class_From_To", "procParam": "@ClassID,@StkUnit,@InvtID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { App.cboRcptUnitDescr.setValue(_purUnit == undefined ? '' : _purUnit) } } } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'FromUnit') } } } } }, {})), text: HQ.common.getLang('PO102UOM') }, { id: "colUnitCost", style: "text-align:left", width: 130, xtype: "numbercolumn", align: "right", dataIndex: "UnitCost", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "colNbrUnitCost", xtype: "numberfield", allowExponential: false, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('PRICE'), format: "0,000" }, { style: "text-align:left", width: 130, xtype: "numbercolumn", align: "right", dataIndex: "DiscPct", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", allowExponential: false, decimalSeparator: ".", maxValue: 100.0, minValue: 0.0 } }, {})), text: HQ.common.getLang('DISCPCT') }, { style: "text-align:left", width: 130, xtype: "numbercolumn", align: "right", dataIndex: "DocDiscAmt", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", allowExponential: false, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('DISCOUNT') }, { style: "text-align:left", width: 130, xtype: "numbercolumn", align: "right", dataIndex: "TranAmt", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", allowExponential: false, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderQty, text: HQ.common.getLang('TRANAMT'), format: "0,000" }, { hidden: true, dataIndex: "ClassID" }, { hidden: true, width: 120, xtype: "datecolumn", dataIndex: "OrigRcptDate", text: HQ.common.getLang('ORIGRCPTDATE'), format: HQ.formatDateJS, listeners: { added: { fn: function (a, b, c) {; } } } }, { hidden: true, width: 130, dataIndex: "VouchStage", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "VouchStage", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "VouchStage", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "VouchStagePO10200_pcVouchStage", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "PO10200_pcVouchStage", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } } }, {})), renderer: renderVouchStage, text: HQ.common.getLang('VOUCHSTA') }, { width: 120, dataIndex: "PosmID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboPosmID", xtype: "combobox", name: "cboPosmID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "PosmID", forceSelection: true, queryMode: "local", valueField: "PosmID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "PosmID", mapping: "PosmID", type: "string" }] }), storeId: "cboPosmIDPO10200_pcPOSM", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "PO10200_pcPOSM", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'PosmID') } } } } }, {})), text: HQ.common.getLang('POSMID') }, { width: 120, dataIndex: "DiscCode", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetDiscCode", xtype: "combobox", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "DiscCode", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('DISCCODE') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{DiscCode}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "DiscCode", store: "stoDisc", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('PO10200DISCCODE') }, { width: 100, dataIndex: "TaxCat", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "TaxCat", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "TaxCat", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "CatID", forceSelection: true, queryMode: "local", valueField: "CatID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "CatID", mapping: "CatID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "TaxCatPO10200_pcTaxCat", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "PO10200_pcTaxCat", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'CatID') } } } } }, {})), text: HQ.common.getLang('TAXCAT') }, { hidden: true, width: 100, dataIndex: "TaxID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboTaxID", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "TaxID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "taxid", multiSelect: true, queryMode: "local", valueField: "taxid", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Sel", mapping: "Sel", type: "boolean" }, { name: "taxid", mapping: "taxid", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "TaxRate", mapping: "TaxRate", type: "float" }, { name: "TaxBasis", mapping: "TaxBasis", type: "string" }, { name: "TaxCalcType", mapping: "TaxCalcType", type: "string" }, { name: "TaxCalcLvl", mapping: "TaxCalcLvl", type: "string" }, { name: "TxblMax", mapping: "TxblMax", type: "float" }, { name: "TxblMin", mapping: "TxblMin", type: "float" }, { name: "InclFrt", mapping: "InclFrt", type: "string" }, { name: "Inclmisc", mapping: "Inclmisc", type: "string" }, { name: "PrcTaxIncl", mapping: "PrcTaxIncl", type: "string" }, { name: "Lvl2Exmpt", mapping: "Lvl2Exmpt", type: "int" }, { name: "InclInDocTot", mapping: "InclInDocTot", type: "string" }, { name: "ApplTermDisc", mapping: "ApplTermDisc", type: "string" }, { name: "ApplTermsDiscTax", mapping: "ApplTermsDiscTax", type: "int" }, { name: "AdjByTermsDisc", mapping: "AdjByTermsDisc", type: "string" }, { name: "ARTaxPtDate", mapping: "ARTaxPtDate", type: "string" }, { name: "APTaxPtDate", mapping: "APTaxPtDate", type: "string" }, { name: "OPTaxPtDate", mapping: "OPTaxPtDate", type: "string" }, { name: "POTaxPtDate", mapping: "POTaxPtDate", type: "string" }, { name: "CatFlg", mapping: "CatFlg", type: "string" }, { name: "CatExcept00", mapping: "CatExcept00", type: "string" }, { name: "CatExcept01", mapping: "CatExcept01", type: "string" }, { name: "CatExcept02", mapping: "CatExcept02", type: "string" }, { name: "CatExcept03", mapping: "CatExcept03", type: "string" }, { name: "CatExcept04", mapping: "CatExcept04", type: "string" }, { name: "CatExcept05", mapping: "CatExcept05", type: "string" }] }), storeId: "cboTaxIDPO10200_pdAP_VenDorTaxes", readParameters: function (operation) { return { apply: { "param0": App.cboVendID.getValue(), "param1": "", "procName": "PO10200_pdAP_VenDorTaxes", "procParam": "@VendID,@OrdFromId,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, expand: { fn: function (item) { HQ.combo.expand(App.cboTaxID, ','); } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'taxid') } }, beforeselect: { fn: FilterCombo_BeforeSelect } } } }, {})), text: HQ.common.getLang('TAXID') }, { hidden: true, width: 130, dataIndex: "CostID", text: HQ.common.getLang('COSTID') }, { width: 150, xtype: "commandcolumn", commands: [{ xtype: "button", command: "reject", tooltip: { text: HQ.common.getLang('REJECTROWCHANGES') }, iconCls: "#ArrowUndo", text: HQ.common.getLang('REJECT') }], prepareToolbar: function (grid, toolbar, rowIndex, record) { toolbar.items.get(0).setVisible(record.dirty); }, listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { grdPO_Trans_Reject(record); } } } }] }, sortableColumns: false, selModel: window.App.slmPO_Trans = Ext.create("Ext.selection.RowModel", { proxyId: "slmPO_Trans", selType: "rowmodel" }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "POLineRef", type: "string" }, { dataIndex: "OrigRcptNbr", type: "string" }, { dataIndex: "PurchaseType", type: "string" }, { dataIndex: "InvtID", type: "string" }, { dataIndex: "TranDesc", type: "string" }, { dataIndex: "PosmID", type: "string" }, { dataIndex: "DiscCode", type: "string" }, { dataIndex: "Qty", type: "numeric" }, { dataIndex: "RcptQty", type: "numeric" }, { dataIndex: "RcptUnitDescr", type: "string" }, { dataIndex: "UnitCost", type: "numeric" }, { dataIndex: "DiscPct", type: "numeric" }, { dataIndex: "DocDiscAmt", type: "numeric" }, { dataIndex: "TranAmt", type: "numeric" }, { dataIndex: "RcptFee", type: "numeric" }, { dataIndex: "UnitWeight", type: "numeric" }, { dataIndex: "SiteID", validateRecord: stringFilter, type: "string" }, { dataIndex: "WhseLoc", type: "string" }, { dataIndex: "ExtWeight", type: "numeric" }, { dataIndex: "UnitVolume", type: "numeric" }, { dataIndex: "ExtVolume", type: "numeric" }, { dataIndex: "OrigRcptDate", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }, { dataIndex: "VouchStage", type: "numeric" }, { dataIndex: "TaxCat", type: "string" }, { dataIndex: "TaxID", type: "string" }, { dataIndex: "PosmID", type: "string" }, { dataIndex: "DisplayPeriodID", type: "string" }] })], selectionMemory: false, viewConfig: { xtype: "gridview", trackOver: false }, listeners: { render: { fn: function (item) { HQ.common.control_render(this, 'grdPO_Trans'); } }, select: { fn: slmPO_Trans_Select } } }], layout: "anchor", title: HQ.common.getLang('DOC') }, { id: "tabOption", padding: 5, items: [{ id: "pnlOption", border: false, autoScroll: true, items: [{ xtype: "container", items: [{ id: "txtAPRefNbr", tag: "X", xtype: "textfield", fieldLabel: HQ.common.getLang('REFNBR'), inputWidth: 120, labelWidth: 120, name: "APRefNbr", readOnly: true, enforceMaxLength: true, maxLength: 10, listeners: { blur: { fn: txtAPRefNbr_Blur } } }, { id: "cboTerms", xtype: "combobox", fieldLabel: HQ.common.getLang('TERM'), inputWidth: 120, labelAlign: "right", name: "Terms", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboTermsPO10200_pcTerms", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "PO10200_pcTerms", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }], layout: "hbox" }, { margin: "3 0 0 0", xtype: "container", items: [{ id: "txtAPBatNbr", tag: "X", xtype: "textfield", fieldLabel: HQ.common.getLang('BATNBR'), inputWidth: 120, labelWidth: 120, name: "APBatNbr", readOnly: true, enforceMaxLength: true, maxLength: 10, listeners: { blur: { fn: txtAPBatNbr_Blur } } }, { id: "dtDocDate", xtype: "datefield", fieldLabel: HQ.common.getLang('DOCDATE'), inputWidth: 120, labelAlign: "right", name: "DocDate", allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y" }], layout: "hbox" }], layout: "vbox", listeners: { render: { fn: function (item) { HQ.common.control_render(this, 'header') } } } }], layout: "fit", title: HQ.common.getLang('OPTION') }, { id: "tabTax", padding: 5, autoScroll: true, items: [{ id: "grdTaxTrans", xtype: "grid", flex: 1, columnLines: true, columns: { items: [{ xtype: "rownumberer" }, { width: 120, dataIndex: "LineRef", text: HQ.common.getLang('LINEREF') }, { width: 120, dataIndex: "TaxID", text: HQ.common.getLang('TAXID') }, { style: "text-align:left", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "TxblAmt", text: HQ.common.getLang('TXBLAMT'), format: "0,000" }, { style: "text-align:left", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "TaxAmt", text: HQ.common.getLang('TAXAMT') }, { style: "text-align:left", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "TaxRate", text: HQ.common.getLang('TAXRATE'), format: "0,000" }, { width: 150, dataIndex: "TaxLevel", text: HQ.common.getLang('TAXLEVEL') }] }, store: "stoPO10200_pgLoadTaxTrans", features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "LineRef", type: "string" }, { dataIndex: "TaxID", type: "string" }, { dataIndex: "TxblAmt", type: "numeric" }, { dataIndex: "TaxAmt", type: "numeric" }, { dataIndex: "TaxRate", type: "numeric" }, { dataIndex: "TaxLevel", type: "string" }] })] }, { xtype: "splitter" }, { store: { model: Ext.define("App.mdlPO10200_pgLoadTaxTransDoc", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RcptNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "TaxID", type: "string" }, { name: "TxblAmt", type: "float" }, { name: "TaxAmt", type: "float" }, { name: "TaxRate", type: "float" }, { name: "TaxLevel", type: "string" }] }), storeId: "stoPO10200_LoadTaxDoc", autoLoad: true, proxy: { type: 'memory' } }, id: "grdTaxDoc", xtype: "grid", flex: 1, columnLines: true, columns: { items: [{ xtype: "rownumberer" }, { width: 120, dataIndex: "TaxID", text: HQ.common.getLang('TAXID') }, { style: "text-align:left", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "TxblAmt", text: HQ.common.getLang('TXBLAMT'), format: "0,000" }, { style: "text-align:left", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "TaxAmt", text: HQ.common.getLang('TAXAMT'), format: "0,000" }, { style: "text-align:left", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "TaxRate", text: HQ.common.getLang('TAXRATE'), format: "0,000" }] }, features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "TaxID", type: "string" }, { dataIndex: "TxblAmt", type: "numeric" }, { dataIndex: "TaxAmt", type: "numeric" }, { dataIndex: "TaxRate", type: "numeric" }] })] }], layout: { type: "vbox", align: "stretch" }, title: HQ.common.getLang('TAX') }], activeTab: 0 }], bodyPadding: 5, bbar: { xtype: "toolbar", items: [{ xtype: "tbfill" }, { id: "lblQtyAvail", margin: "0 10 0 10", style: "text-align:right;", width: 400, xtype: "netlabel" }] }, tbar: { id: "toolbar", xtype: "toolbar", items: [{ id: "menuClickbtnFirst", iconCls: "#ResultsetFirst", tooltip: HQ.common.getLang('BTNFIRST'), listeners: { click: { fn: function (item, e) { menuClick('first'); } } } }, { id: "menuClickbtnPrev", iconCls: "#ResultsetPrevious", tooltip: HQ.common.getLang('BTNPREV'), listeners: { click: { fn: function (item, e) { menuClick('prev'); } } } }, { id: "menuClickbtnNext", iconCls: "#ResultsetNext", tooltip: HQ.common.getLang('BTNNEXT'), listeners: { click: { fn: function (item, e) { menuClick('next'); } } } }, { id: "menuClickbtnLast", iconCls: "#ResultsetLast", tooltip: HQ.common.getLang('BTNLAST'), listeners: { click: { fn: function (item, e) { menuClick('last'); } } } }, { id: "menuClickbtnRefresh", iconCls: "#ArrowRefresh", tooltip: HQ.common.getLang('BTNREFRESH'), listeners: { click: { fn: function (item, e) { menuClick('refresh'); } } } }, { xtype: "tbseparator" }, { id: "menuClickbtnNew", iconCls: "#Add", tooltip: HQ.common.getLang('BTNNEW'), listeners: { click: { fn: function (item, e) { menuClick('new'); } } } }, { id: "menuClickbtnSave", iconCls: "#Disk", tooltip: HQ.common.getLang('BTNSAVE'), listeners: { click: { fn: function (item, e) { menuClick('save'); } } } }, { id: "menuClickbtnDelete", iconCls: "#Delete", tooltip: HQ.common.getLang('BTNDELETE'), listeners: { click: { fn: function (item, e) { menuClick('delete'); } } } }, { xtype: "tbseparator" }, { id: "btnBackOrder", iconCls: "#CartRemove", tooltip: HQ.common.getLang('BACKORDER'), listeners: { click: { fn: btnBackOrder_Click } } }, { id: "btnImport", xtype: "filefield", iconCls: "#BookAdd", buttonConfig: { iconCls: "#BookAdd" }, buttonText: HQ.common.getLang('IMPORT'), buttonOnly: true, listeners: { change: { fn: btnImport_Click } } }, { id: "btnExport", iconCls: "#ArrowTurnRight", text: HQ.common.getLang('EXPORT'), listeners: { click: { fn: btnExport_Click } } }] }, trackResetOnLoad: true, waitMsgTarget: "", fieldDefaults: { labelAlign: "right" }, listeners: { boxready: { fn: function (item, width, height) { firstLoad(); } }, fieldchange: { fn: frmChange } } }], layout: "fit" }); Ext.create("Ext.window.Window", { id: "winLot", height: 300, renderTo: Ext.getBody(), width: 550, items: [{ id: "grdLot", border: true, border: "1 0 0 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1 }], xtype: "grid", columns: { items: [{ xtype: "rownumberer", renderer: renderRowNumber }, { id: "colLotSerNbr", width: 120, dataIndex: "LotSerNbr", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboLotSerNbr", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "cboLotSerNbr", maxLength: 25, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "LotSerNbr", forceSelection: true, listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<table style='table-layout: fixed; max-width:370px !important'>", "<tr>", "<th style='min-width:130px;'>" + HQ.common.getLang('LOTSERNBR') + "</th>", "<th style='min-width:120px;'>" + HQ.common.getLang('EXPDATE') + "</th>", "<th>" + HQ.common.getLang('QTY') + "</th>", "</tr>", "</tpl>", "<tr class='x-boundlist-item'>", "<td>{LotSerNbr}</td>", "<td>{ExpDate:date('" + HQ.formatDateJS + "')}</td>", "<td>{Qty}</td>", "</tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</tpl>", "</tpl>"] }), itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, valueField: "LotSerNbr", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "LotSerNbr", mapping: "LotSerNbr", type: "string" }, { name: "ExpDate", mapping: "ExpDate", type: "date", dateFormat: "c" }, { name: "WarrantyDate", mapping: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "Qty", mapping: "Qty", type: "float" }, { name: "WhseLoc", mapping: "WhseLoc", type: "string" }, { name: "QtyAvail", mapping: "QtyAvail", type: "float" }] }), storeId: "cboLotSerNbrPO10200_pcLotSerNbrIssue", readParameters: function (operation) { return { apply: { "param0": App.cboBranchID.getValue(), "param1": App.cboBatNbr.getValue(), "param2": App.txtRcptNbr.getValue(), "param3": App.cboRcptType.getValue(), "param4": _siteID, "param5": _whseLoc, "param6": _invtID, "param7": HQ.showWhseLoc, "param8": _backOrderBatNbr, "param9": HQ.cpnyID, "param10": HQ.userName, "param11": HQ.langID, "param12": App.cboRcptFrom.getValue(), "param13": _stkUnit, "procName": "PO10200_pcLotSerNbrIssue", "procParam": "@BranchID,@BatNbr,@RcptNbr,@RcptType,@SiteID,@WhseLoc,@InvtID,@ShowWhseLoc,@BackOrderBatNbr,@CpnyID,@UserName,@LangID,@RcptFrom,@Unit,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: PopupWinLot.cboLotTrans_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'LotSerNbr,ExpDate,Qty') } } } } }, {})), text: HQ.common.getLang('LOTSERNBR') }, { id: "colLotUnitDesc", dataIndex: "UnitDesc", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cbocolLotUnitDesc", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "cbocolLotUnitDesc", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "FromUnit", forceSelection: true, queryMode: "local", valueField: "FromUnit", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "FromUnit", mapping: "FromUnit", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "InvtId", mapping: "InvtId", type: "string" }] }), storeId: "cbocolLotUnitDescPO10200_pcINUnit_Invt_Class_From_To", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": _classID, "param1": _stkUnit, "param2": _invtID, "procName": "PO10200_pcINUnit_Invt_Class_From_To", "procParam": "@ClassID,@StkUnit,@InvtID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { App.cbocolLotUnitDesc.setValue(_purUnit == undefined ? '' : _purUnit) } } } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'FromUnit') } } } } }, {})), text: HQ.common.getLang('UNIT') }, { id: "colLotQty", width: 75, align: "right", dataIndex: "Qty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", allowExponential: false, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('QTY') }, { id: "colLotPrice", style: "text-align:left", width: 75, xtype: "numbercolumn", align: "right", dataIndex: "UnitPrice", text: HQ.common.getLang('PRICE'), format: "##,###" }, { width: 100, xtype: "datecolumn", dataIndex: "WarrantyDate", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "WarrantyDate", xtype: "datefield", format: HQ.formatDateJS, submitFormat: "m/d/Y" } }, {})), text: HQ.common.getLang('PO10200MANUFDATE'), format: HQ.formatDateJS, listeners: { added: { fn: function (a, b, c) {; } } } }, { width: 100, xtype: "datecolumn", dataIndex: "ExpDate", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "ExpDate", xtype: "datefield", format: HQ.formatDateJS, submitFormat: "m/d/Y" } }, {})), text: HQ.common.getLang('EXPDATE'), format: HQ.formatDateJS, listeners: { added: { fn: function (a, b, c) {; } } } }] }, selModel: window.App.smlLot = Ext.create("Ext.selection.RowModel", { proxyId: "smlLot", selType: "rowmodel" }), store: "stoLotTrans", viewConfig: { xtype: "gridview", trackOver: false }, listeners: { beforeedit: { fn: PopupWinLot.grdLot_BeforeEdit }, edit: { fn: PopupWinLot.grdLot_Edit }, selectionchange: { fn: PopupWinLot.grdLot_SelectionChange }, select: { fn: function (item, record, index) { HQ.focus = 'lot'; } }, validateedit: { fn: PopupWinLot.grdLot_ValidateEdit } } }], layout: "fit", bbar: { border: false, xtype: "toolbar", items: [{ id: "lblLotQtyAvail", margin: "0 0 0 5", width: 350, xtype: "netlabel" }] }, buttons: [{ id: "btnLotDel", text: HQ.common.getLang('DELETERIGHTS'), listeners: { click: { fn: PopupWinLot.btnLotDel_Click } } }, { id: "btnLotOK", text: HQ.common.getLang('OK'), listeners: { click: { fn: PopupWinLot.btnLotOK_Click } } }], closable: false, modal: true }); Ext.net.ResourceMgr.registerIcon(["ArrowRefresh", "Disk", "ApplicationHome", "ResultsetFirst", "ResultsetPrevious", "ResultsetNext", "ResultsetLast", "Add", "Delete", "CartRemove", "BookAdd", "ArrowTurnRight", "TabEdit", "ArrowUndo"]); });
