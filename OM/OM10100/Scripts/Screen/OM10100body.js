Ext.net.ResourceMgr.init({ isMVC: true }); Ext.onReady(function () { Ext.ns("App.direct"); Ext.apply(App.direct, { CallMessageTimeOut: function (config) { return Ext.net.DirectMethod.request("CallMessageTimeOut", Ext.applyIf(config || {}, { url: "HQ/CallMessageTimeOut" })); }, CallMessage: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessage", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessage" })); }, CallMessageArray: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessageArray", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessageArray" })); }, PlayMedia: function (PathVideo, fileVideo, config) { return Ext.net.DirectMethod.request("PlayMedia", Ext.applyIf(config || {}, { params: { PathVideo: PathVideo, fileVideo: fileVideo }, url: "HQ/PlayMedia" })); }, OM10100GetNote: function (branchID, orderNbr, config) { return Ext.net.DirectMethod.request("OM10100GetNote", Ext.applyIf(config || {}, { params: { branchID: branchID, orderNbr: orderNbr }, url: "OM10100/OM10100GetNote" })); }, OM10100UpdateNote: function (branchID, orderNbr, noteText, config) { return Ext.net.DirectMethod.request("OM10100UpdateNote", Ext.applyIf(config || {}, { params: { branchID: branchID, orderNbr: orderNbr, noteText: noteText }, url: "OM10100/OM10100UpdateNote" })); } }); Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature" }); Ext.create("Ext.ux.ProgressBarPager", {}); window.App.stoChoice = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlChoice", { extend: "Ext.data.Model", fields: [{ name: "Sel", type: "boolean" }, { name: "Unit", type: "string" }, { name: "FreeItemID", type: "string" }, { name: "FreeSiteID", type: "string" }, { name: "FreeItemUnit", type: "string" }, { name: "FreeItemQty", type: "float" }, { name: "FreeItemDescr", type: "string" }, { name: "FreeItemQtyBase", type: "float" }, { name: "BudgetID", type: "string" }, { name: "GroupItem", type: "string" }, { name: "Priority", type: "int" }, { name: "MaxQtyInGroup", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "PromoPrice", type: "float" }, { name: "tempLineAmt", type: "float" }, { name: "SiteType", type: "string" }, { name: "IsSetPrioritySite", type: "boolean" }, { name: "FreeItemCnvFact", type: "float" }, { name: "FeeItemUnitMultDiv", type: "string" }, { name: "TotalBudget", type: "float" }, { name: "ToTalQtyFreeItem", type: "float" }, { name: "CnvFact", type: "float" }, { name: "Index", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "DiscLineRef", type: "string" }, { name: "Descr", type: "string" }, { name: "DiscDescr", type: "string" }, { name: "Qty", type: "float" }, { name: "MaxQty", type: "float" }, { name: "InvtID", type: "string" }, { name: "DonateGroupProduct", type: "boolean" }, { name: "LineRef", type: "string" }, { name: "SubBreakType", type: "string" }, { name: "BreakBoundType", type: "string" }, { name: "LevelID", type: "float" }, { name: "PromoAmt", type: "float" }, { name: "ConvertDiscAmtToFreeItem", type: "boolean" }, { name: "PromoBonusAmt", type: "float" }, { name: "PromoLineAmt", type: "float" }, { name: "GroupLineRef", type: "string" }] }), storeId: "stoChoice", proxy: { type: 'memory' } }); window.App.stoChoiceHeader = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlChoiceHeader", { extend: "Ext.data.Model", fields: [{ name: "Index", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "DiscLineRef", type: "string" }, { name: "Descr", type: "string" }, { name: "DiscDescr", type: "string" }, { name: "Qty", type: "float" }, { name: "MaxQty", type: "float" }, { name: "InvtID", type: "string" }, { name: "DonateGroupProduct", type: "boolean" }, { name: "LineRef", type: "string" }, { name: "SubBreakType", type: "string" }, { name: "BreakBoundType", type: "string" }, { name: "LevelID", type: "float" }, { name: "PromoAmt", type: "float" }, { name: "ConvertDiscAmtToFreeItem", type: "boolean" }, { name: "PromoBonusAmt", type: "float" }, { name: "PromoLineAmt", type: "float" }, { name: "GroupLineRef", type: "string" }] }), storeId: "stoChoiceHeader", proxy: { type: 'memory' } }); window.App.stoOrder = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOrder", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "ARBatNbr", type: "string" }, { name: "ARDocDate", type: "date", dateFormat: "c" }, { name: "ARRefNbr", type: "string" }, { name: "BudgetID1", type: "string" }, { name: "BudgetID2", type: "string" }, { name: "CmmnPct", type: "float" }, { name: "CreditMgrID", type: "string" }, { name: "CustID", type: "string" }, { name: "CustOrderNbr", type: "string" }, { name: "DeliveryID", type: "string" }, { name: "DoNotCalDisc", type: "int" }, { name: "ExpiryDate", type: "date", dateFormat: "c" }, { name: "FreightAllocAmt", type: "float" }, { name: "FreightAmt", type: "float" }, { name: "FreightCost", type: "float" }, { name: "FreightTermsID", type: "string" }, { name: "ImpExp", type: "string" }, { name: "INBatNbr", type: "string" }, { name: "INRefNbr", type: "string" }, { name: "InvcNbr", type: "string" }, { name: "InvcNote", type: "string" }, { name: "IssueMethod", type: "string" }, { name: "IssueNumber", type: "int" }, { name: "LineAmt", type: "float" }, { name: "LineDiscAmt", type: "float" }, { name: "MiscAmt", type: "float" }, { name: "NoteId", type: "int" }, { name: "OrdAmt", type: "float" }, { name: "OrdDiscAmt", type: "float" }, { name: "OrderDate", type: "date", dateFormat: "c" }, { name: "OrderType", type: "string" }, { name: "OrderWeight", type: "float" }, { name: "OrdQty", type: "float" }, { name: "OrigOrderNbr", type: "string" }, { name: "PaymentBatNbr", type: "string" }, { name: "PaymentID", type: "string" }, { name: "PaymentNbr", type: "string" }, { name: "PmtAmt", type: "float" }, { name: "PmtDate", type: "date", dateFormat: "c" }, { name: "PremFreightAmt", type: "float" }, { name: "PromiseDate", type: "date", dateFormat: "c" }, { name: "ReceiptAmt", type: "float" }, { name: "ReFundAmt", type: "float" }, { name: "ShiftID", type: "string" }, { name: "ShipDate", type: "date", dateFormat: "c" }, { name: "ShipPriority", type: "string" }, { name: "ShipViaId", type: "string" }, { name: "SlsPerID", type: "string" }, { name: "SOFeeTot", type: "float" }, { name: "StationID", type: "string" }, { name: "Status", type: "string" }, { name: "TaxAmtTot00", type: "float" }, { name: "TaxAmtTot01", type: "float" }, { name: "TaxAmtTot02", type: "float" }, { name: "TaxAmtTot03", type: "float" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "Terms", type: "string" }, { name: "ToSiteID", type: "string" }, { name: "TxblAmtTot00", type: "float" }, { name: "TxblAmtTot01", type: "float" }, { name: "TxblAmtTot02", type: "float" }, { name: "TxblAmtTot03", type: "float" }, { name: "UnitsShipped", type: "float" }, { name: "VolDiscAmt", type: "float" }, { name: "VolDiscPct", type: "float" }, { name: "ReasonCode", type: "string" }, { name: "CreditHold", type: "boolean" }, { name: "OrderNo", type: "int" }, { name: "ClassID", type: "string" }, { name: "PriceClassID", type: "string" }, { name: "tstamp", type: "string" }, { name: "RowNum", type: "int" }, { name: "TotalRecords", type: "int" }, { name: "LTTContractNbr", type: "string" }, { name: "Addr1", type: "string" }, { name: "CustName", type: "string" }, { name: "Remark", type: "string" }, { name: "StatusDescr", type: "string" }, { name: "RewardID", type: "string" }, { name: "SalesMark", type: "float" }, { name: "PromoMark", type: "float" }, { name: "RewardAmt", type: "float" }, { name: "OrigOrderDate", type: "date", dateFormat: "c" }, { name: "ReturnFrom", type: "string" }, { name: "ManualDiscAmt", type: "float" }, { name: "ManualDiscount", type: "boolean" }, { name: "ManualDiscPct", type: "float" }], idProperty: "OrderNbr" }), storeId: "stoOrder", autoLoad: true, readParameters: function (operation) { return { apply: { "orderType": App.cboOrderType.getValue(), "branchID": App.txtBranchID.getValue(), "query": App.cboOrderNbr.rawValue } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrder", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, pageSize: 20, listeners: { load: { fn: stoOrder_Load } } }); window.App.stoShipToID = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlShipToID", { extend: "Ext.data.Model", fields: [{ name: "ShipToId", type: "string" }] }), storeId: "stoShipToID", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetShipToID", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoItemSite = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlItemSite", { extend: "Ext.data.Model", fields: [{ name: "SiteID", type: "string" }, { name: "AvgCost", type: "float" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyInTransit", type: "float" }, { name: "QtyOnBO", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyOnPO", type: "float" }, { name: "QtyOnTransferOrders", type: "float" }, { name: "QtyOnSO", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "StkItem", type: "int" }, { name: "TotCost", type: "float" }, { name: "LastPurchaseDate", type: "date", dateFormat: "c" }, { name: "LastPurchasePrice", type: "float" }, { name: "InvtID", type: "string" }, { name: "QtyAllocPDASO", type: "float" }] }), storeId: "stoItemSite", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetItemSite", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoItemSiteChoice = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlItemSiteChoice", { extend: "Ext.data.Model", fields: [{ name: "SiteID", type: "string" }, { name: "AvgCost", type: "float" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyInTransit", type: "float" }, { name: "QtyOnBO", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyOnPO", type: "float" }, { name: "QtyOnTransferOrders", type: "float" }, { name: "QtyOnSO", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "StkItem", type: "int" }, { name: "TotCost", type: "float" }, { name: "LastPurchaseDate", type: "date", dateFormat: "c" }, { name: "LastPurchasePrice", type: "float" }, { name: "InvtID", type: "string" }, { name: "QtyAllocPDASO", type: "float" }] }), storeId: "stoItemSiteChoice", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetItemSite", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoInvt = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlInvt", { extend: "Ext.data.Model", fields: [{ name: "BarCode", type: "string" }, { name: "Descr1", type: "string" }, { name: "InvtID", type: "string" }, { name: "Descr", type: "string" }, { name: "Color", type: "string" }, { name: "CpnyID", type: "string" }, { name: "ClassID", type: "string" }, { name: "StkUnit", type: "string" }, { name: "PriceClassID", type: "string" }, { name: "TaxCat", type: "string" }, { name: "DfltSite", type: "string" }, { name: "DfltSOUnit", type: "string" }, { name: "SOPrice", type: "float" }, { name: "SOFee", type: "float" }, { name: "ValMthd", type: "string" }, { name: "StkItem", type: "int" }, { name: "StkWt", type: "float" }, { name: "LotSerTrack", type: "string" }] }), storeId: "stoInvt", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetInvt", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoPrice = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlPrice", { extend: "Ext.data.Model", fields: [{ name: "InvtID", type: "string" }, { name: "Unit", type: "string" }, { name: "Price", type: "float" }, { name: "POSMID", type: "string" }] }), storeId: "stoPrice", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetPrice", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoDisc = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlDisc", { extend: "Ext.data.Model", fields: [{ name: "DiscCode", type: "string" }, { name: "Descr", type: "string" }] }), storeId: "stoDisc", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetDiscCode", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoCustomer = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlCustomer", { extend: "Ext.data.Model", fields: [{ name: "CustId", type: "string" }, { name: "CustName", type: "string" }, { name: "Addr1", type: "string" }, { name: "Addr2", type: "string" }, { name: "Attn", type: "string" }, { name: "BillAddr1", type: "string" }, { name: "BillAddr2", type: "string" }, { name: "BillAttn", type: "string" }, { name: "BillCity", type: "string" }, { name: "BillCountry", type: "string" }, { name: "BillFax", type: "string" }, { name: "BillName", type: "string" }, { name: "BillPhone", type: "string" }, { name: "BillSalut", type: "string" }, { name: "BillState", type: "string" }, { name: "BillZip", type: "string" }, { name: "Channel", type: "string" }, { name: "City", type: "string" }, { name: "ClassId", type: "string" }, { name: "Country", type: "string" }, { name: "CrLmt", type: "float" }, { name: "CrRule", type: "string" }, { name: "CustFillPriority", type: "int" }, { name: "CustType", type: "string" }, { name: "DeliveryID", type: "string" }, { name: "DflSaleRouteID", type: "string" }, { name: "DfltShipToId", type: "string" }, { name: "District", type: "string" }, { name: "EMailAddr", type: "string" }, { name: "EmpNum", type: "int" }, { name: "ExpiryDate", type: "date", dateFormat: "c" }, { name: "Exported", type: "int" }, { name: "Fax", type: "string" }, { name: "GracePer", type: "int" }, { name: "LTTContractNbr", type: "string" }, { name: "NodeID", type: "string" }, { name: "NodeLevel", type: "int" }, { name: "ParentRecordID", type: "int" }, { name: "Phone", type: "string" }, { name: "PriceClassID", type: "string" }, { name: "Salut", type: "string" }, { name: "ShopType", type: "string" }, { name: "SiteId", type: "string" }, { name: "SlsperId", type: "string" }, { name: "State", type: "string" }, { name: "Status", type: "string" }, { name: "SupID", type: "string" }, { name: "TaxDflt", type: "string" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "TaxLocId", type: "string" }, { name: "TaxRegNbr", type: "string" }, { name: "Terms", type: "string" }, { name: "Territory", type: "string" }, { name: "TradeDisc", type: "float" }, { name: "Zip", type: "string" }, { name: "Location", type: "string" }, { name: "Area", type: "string" }, { name: "GiftExchange", type: "boolean" }, { name: "HasPG", type: "boolean" }, { name: "tstamp", type: "string" }, { name: "BranchID", type: "string" }, { name: "EstablishDate", type: "date", dateFormat: "c" }, { name: "Birthdate", type: "date", dateFormat: "c" }, { name: "RefCustID", type: "string" }, { name: "SellProduct", type: "string" }, { name: "InActive", type: "string" }, { name: "LastOrderDate", type: "date", dateFormat: "c" }, { name: "SearchName", type: "string" }, { name: "Classification", type: "string" }, { name: "Chain", type: "string" }, { name: "Ward", type: "string" }, { name: "DeliveryUnit", type: "string" }, { name: "SalesProvince", type: "string" }, { name: "BusinessName", type: "string" }, { name: "BusinessPic", type: "string" }, { name: "ProfilePic", type: "string" }, { name: "SubTerritory", type: "string" }, { name: "PhotoCode", type: "string" }, { name: "AllowEdit", type: "int" }, { name: "BillWard", type: "string" }, { name: "BillDistrict", type: "string" }, { name: "PPCPassword", type: "string" }, { name: "TypeCabinets", type: "string" }, { name: "StandID", type: "string" }, { name: "BrandID", type: "string" }, { name: "SizeID", type: "string" }, { name: "DisplayID", type: "string" }, { name: "Mobile", type: "string" }, { name: "Market", type: "string" }, { name: "BillMarket", type: "string" }, { name: "OUnit", type: "string" }, { name: "LocationCheckType", type: "string" }, { name: "VendorID", type: "string" }, { name: "BuyerID", type: "string" }, { name: "OriCustID", type: "string" }, { name: "GeneralCustID", type: "string" }, { name: "BillTerritory", type: "string" }, { name: "PayMethod", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }], idProperty: "CustId" }), storeId: "stoCustomer", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetCustomer", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoSOAddress = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlSOAddress", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "CustId", type: "string" }, { name: "ShipToId", type: "string" }, { name: "Descr", type: "string" }, { name: "SOName", type: "string" }, { name: "Attn", type: "string" }, { name: "Addr1", type: "string" }, { name: "Addr2", type: "string" }, { name: "City", type: "string" }, { name: "State", type: "string" }, { name: "Zip", type: "string" }, { name: "Country", type: "string" }, { name: "Phone", type: "string" }, { name: "Fax", type: "string" }, { name: "TaxRegNbr", type: "string" }, { name: "TaxLocId", type: "string" }, { name: "TaxId00", type: "string" }, { name: "TaxId01", type: "string" }, { name: "TaxId02", type: "string" }, { name: "TaxId03", type: "string" }, { name: "SiteId", type: "string" }, { name: "ShipViaID", type: "string" }, { name: "tstamp", type: "string" }, { name: "District", type: "string" }, { name: "Ward", type: "string" }, { name: "NoteAddr", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoSOAddress", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetSOAddress", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoOrdDet = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOrdDet", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CostID", type: "string" }, { name: "OrderType", type: "string" }, { name: "ShipStatus", type: "string" }, { name: "InvtID", type: "string" }, { name: "ItemPriceClass", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "DumyLineQty", type: "float" }, { name: "TaxID", type: "string" }, { name: "TaxId00", type: "string" }, { name: "TaxId01", type: "string" }, { name: "TaxId02", type: "string" }, { name: "TaxId03", type: "string" }, { name: "SiteID", type: "string" }, { name: "FreeItem", type: "boolean" }, { name: "FreeItemQty1", type: "float" }, { name: "FreeItemQty2", type: "float" }, { name: "LineQty", type: "float" }, { name: "QtyOpenShip", type: "float" }, { name: "QtyShip", type: "float" }, { name: "QtyInvc", type: "float" }, { name: "QtyBO", type: "float" }, { name: "BOType", type: "string" }, { name: "BOCustID", type: "string" }, { name: "OrigOrderNbr", type: "string" }, { name: "StkQty", type: "float" }, { name: "SlsUnit", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitRate", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "SlsPrice", type: "float" }, { name: "LineAmt", type: "float" }, { name: "SOFee", type: "float" }, { name: "Descr", type: "string" }, { name: "BudgetID1", type: "string" }, { name: "DiscPct", type: "float" }, { name: "DiscPct1", type: "float" }, { name: "DiscPct2", type: "float" }, { name: "DiscCode", type: "string" }, { name: "DiscID1", type: "string" }, { name: "DiscID2", type: "string" }, { name: "DiscSeq1", type: "string" }, { name: "DiscSeq2", type: "string" }, { name: "DiscAmt", type: "float" }, { name: "DiscAmt1", type: "float" }, { name: "DiscAmt2", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "GroupDiscPct1", type: "float" }, { name: "GroupDiscPct2", type: "float" }, { name: "GroupDiscID1", type: "string" }, { name: "GroupDiscID2", type: "string" }, { name: "GroupDiscSeq1", type: "string" }, { name: "GroupDiscSeq2", type: "string" }, { name: "GroupDiscAmt1", type: "float" }, { name: "GroupDiscAmt2", type: "float" }, { name: "BarCode", type: "string" }, { name: "BudgetID2", type: "string" }, { name: "tstamp", type: "string" }, { name: "ManuDiscAmt", type: "float" }, { name: "Mark", type: "float" }, { name: "MMark", type: "float" }, { name: "POSM", type: "string" }, { name: "ClassID", type: "string" }, { name: "DisplayID", type: "string" }, { name: "DisplayPeriodID", type: "string" }, { name: "WhseLoc", type: "string" }, { name: "StkItem", type: "int" }, { name: "StkWt", type: "float" }, { name: "StkUnit", type: "string" }, { name: "StkPrice", type: "float" }, { name: "DumyLineAmt", type: "float" }, { name: "ManuDiscPct", type: "float" }, { name: "SumDiscInvoice", type: "float" }] }), storeId: "stoOrdDet", readParameters: function (operation) { return { apply: { "orderNbr": App.cboOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrdDet", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, pageSize: 50, listeners: { beforeload: { fn: stoOrdDet_BeforeLoad }, load: { fn: stoDetail_Load } } }); window.App.stoOldOrdDet = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOldOrdDet", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "CostID", type: "string" }, { name: "OrderType", type: "string" }, { name: "ShipStatus", type: "string" }, { name: "InvtID", type: "string" }, { name: "ItemPriceClass", type: "string" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "DumyLineQty", type: "float" }, { name: "TaxID", type: "string" }, { name: "TaxId00", type: "string" }, { name: "TaxId01", type: "string" }, { name: "TaxId02", type: "string" }, { name: "TaxId03", type: "string" }, { name: "SiteID", type: "string" }, { name: "FreeItem", type: "boolean" }, { name: "FreeItemQty1", type: "float" }, { name: "FreeItemQty2", type: "float" }, { name: "LineQty", type: "float" }, { name: "QtyOpenShip", type: "float" }, { name: "QtyShip", type: "float" }, { name: "QtyInvc", type: "float" }, { name: "QtyBO", type: "float" }, { name: "BOType", type: "string" }, { name: "BOCustID", type: "string" }, { name: "OrigOrderNbr", type: "string" }, { name: "StkQty", type: "float" }, { name: "SlsUnit", type: "string" }, { name: "UnitMultDiv", type: "string" }, { name: "UnitRate", type: "float" }, { name: "UnitWeight", type: "float" }, { name: "SlsPrice", type: "float" }, { name: "LineAmt", type: "float" }, { name: "SOFee", type: "float" }, { name: "Descr", type: "string" }, { name: "BudgetID1", type: "string" }, { name: "DiscPct", type: "float" }, { name: "DiscPct1", type: "float" }, { name: "DiscPct2", type: "float" }, { name: "DiscCode", type: "string" }, { name: "DiscID1", type: "string" }, { name: "DiscID2", type: "string" }, { name: "DiscSeq1", type: "string" }, { name: "DiscSeq2", type: "string" }, { name: "DiscAmt", type: "float" }, { name: "DiscAmt1", type: "float" }, { name: "DiscAmt2", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "GroupDiscPct1", type: "float" }, { name: "GroupDiscPct2", type: "float" }, { name: "GroupDiscID1", type: "string" }, { name: "GroupDiscID2", type: "string" }, { name: "GroupDiscSeq1", type: "string" }, { name: "GroupDiscSeq2", type: "string" }, { name: "GroupDiscAmt1", type: "float" }, { name: "GroupDiscAmt2", type: "float" }, { name: "BarCode", type: "string" }, { name: "BudgetID2", type: "string" }, { name: "tstamp", type: "string" }, { name: "ManuDiscAmt", type: "float" }, { name: "Mark", type: "float" }, { name: "MMark", type: "float" }, { name: "POSM", type: "string" }, { name: "ClassID", type: "string" }, { name: "DisplayID", type: "string" }, { name: "DisplayPeriodID", type: "string" }, { name: "WhseLoc", type: "string" }, { name: "StkItem", type: "int" }, { name: "StkWt", type: "float" }, { name: "StkUnit", type: "string" }, { name: "StkPrice", type: "float" }, { name: "DumyLineAmt", type: "float" }, { name: "ManuDiscPct", type: "float" }, { name: "SumDiscInvoice", type: "float" }] }), storeId: "stoOldOrdDet", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrdDet", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoTaxTrans = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlTaxTrans", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "TaxID", type: "string" }, { name: "TxblAmt", type: "float" }, { name: "TaxAmt", type: "float" }, { name: "TaxRate", type: "float" }, { name: "TaxLevel", type: "string" }] }), storeId: "stoTaxTrans", readParameters: function (operation) { return { apply: { "orderNbr": App.cboOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetTaxTrans", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: stoTaxTrans_BeforeLoad }, load: { fn: stoDetail_Load } } }); window.App.stoTax = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlTax", { extend: "Ext.data.Model", fields: [{ name: "TaxID", type: "string" }, { name: "Descr", type: "string" }, { name: "TaxRate", type: "float" }, { name: "TaxBasis", type: "string" }, { name: "TaxCalcType", type: "string" }, { name: "TaxCalcLvl", type: "string" }, { name: "TxblMax", type: "float" }, { name: "TxblMin", type: "float" }, { name: "InclFrt", type: "string" }, { name: "Inclmisc", type: "string" }, { name: "PrcTaxIncl", type: "string" }, { name: "Lvl2Exmpt", type: "int" }, { name: "InclInDocTot", type: "string" }, { name: "ApplTermDisc", type: "string" }, { name: "ApplTermsDiscTax", type: "int" }, { name: "AdjByTermsDisc", type: "string" }, { name: "ARTaxPtDate", type: "string" }, { name: "APTaxPtDate", type: "string" }, { name: "OPTaxPtDate", type: "string" }, { name: "POTaxPtDate", type: "string" }, { name: "CatFlg", type: "string" }, { name: "CatExcept00", type: "string" }, { name: "CatExcept01", type: "string" }, { name: "CatExcept02", type: "string" }, { name: "CatExcept03", type: "string" }, { name: "CatExcept04", type: "string" }, { name: "CatExcept05", type: "string" }] }), storeId: "stoTax", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetTax", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoTaxDoc = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlTaxDoc", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "TaxID", type: "string" }, { name: "TxblAmt", type: "float" }, { name: "TaxAmt", type: "float" }, { name: "TaxRate", type: "float" }, { name: "TaxLevel", type: "string" }] }), storeId: "stoTaxDoc", proxy: { type: 'memory' } }); window.App.stoUnitConversion = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlUnitConversion", { extend: "Ext.data.Model", fields: [{ name: "UnitType", type: "string" }, { name: "ClassID", type: "string" }, { name: "InvtID", type: "string" }, { name: "FromUnit", type: "string" }, { name: "ToUnit", type: "string" }, { name: "MultDiv", type: "string" }, { name: "CnvFact", type: "float" }] }), storeId: "stoUnitConversion", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetUnitConversion", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoUnit = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlUnit", { extend: "Ext.data.Model", fields: [{ name: "FromUnit", type: "string" }] }), storeId: "stoUnit", proxy: { type: 'memory' } }); window.App.stoPOSMID = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlPOSMID", { extend: "Ext.data.Model", fields: [{ name: "POSMID", type: "string" }] }), storeId: "stoPOSMID", proxy: { type: 'memory' } }); window.App.stoBKReasonCode = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlReasonCode", { extend: "Ext.data.Model", fields: [{ name: "Code", type: "string" }, { name: "Descr", type: "string" }] }), storeId: "stoBKReasonCode", proxy: { type: 'memory' } }); window.App.stoBKOrderType = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOrderType", { extend: "Ext.data.Model", fields: [{ name: "OrderType", type: "string" }, { name: "Active", type: "boolean" }, { name: "ApplShift", type: "boolean" }, { name: "ARDocType", type: "string" }, { name: "AutoPromotion", type: "int" }, { name: "BO", type: "boolean" }, { name: "DaysToKeep", type: "int" }, { name: "Descr", type: "string" }, { name: "DfltCustID", type: "string" }, { name: "DiscType", type: "string" }, { name: "INDocType", type: "string" }, { name: "SalesType", type: "string" }, { name: "RequiredVATInvcNbr", type: "int" }, { name: "ShippingReport", type: "string" }, { name: "TaxFee", type: "boolean" }, { name: "ManualDisc", type: "boolean" }] }), storeId: "stoBKOrderType", proxy: { type: 'memory' } }); window.App.stoOrdDisc = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOrdDisc", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "BreakBy", type: "string" }, { name: "BudgetID", type: "string" }, { name: "DiscAmt", type: "float" }, { name: "DiscFor", type: "string" }, { name: "DisctblAmt", type: "float" }, { name: "DisctblQty", type: "float" }, { name: "DiscType", type: "string" }, { name: "DiscUOM", type: "string" }, { name: "FreeItemBudgetID", type: "string" }, { name: "FreeItemID", type: "string" }, { name: "FreeItemQty", type: "float" }, { name: "OrigFreeItemQty", type: "float" }, { name: "SlsPerID", type: "string" }, { name: "SOLineRef", type: "string" }, { name: "UserOperationLog", type: "string" }, { name: "tstamp", type: "string" }, { name: "DiscBreakLineRef", type: "string" }, { name: "RefLineRef", type: "string" }, { name: "GroupRefLineRef", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoOrdDisc", readParameters: function (operation) { return { apply: { "orderNbr": App.cboOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrdDisc", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: stoOrdDisc_BeforeLoad }, load: { fn: stoDetail_Load } } }); window.App.stoOldOrdDisc = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOldOrdDisc", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "BreakBy", type: "string" }, { name: "BudgetID", type: "string" }, { name: "DiscAmt", type: "float" }, { name: "DiscFor", type: "string" }, { name: "DisctblAmt", type: "float" }, { name: "DisctblQty", type: "float" }, { name: "DiscType", type: "string" }, { name: "DiscUOM", type: "string" }, { name: "FreeItemBudgetID", type: "string" }, { name: "FreeItemID", type: "string" }, { name: "FreeItemQty", type: "float" }, { name: "OrigFreeItemQty", type: "float" }, { name: "SlsPerID", type: "string" }, { name: "SOLineRef", type: "string" }, { name: "UserOperationLog", type: "string" }, { name: "tstamp", type: "string" }, { name: "DiscBreakLineRef", type: "string" }, { name: "RefLineRef", type: "string" }, { name: "GroupRefLineRef", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoOldOrdDisc", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrdDisc", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoOrdAddr = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOrdAddr", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "OrderClass", type: "string" }, { name: "BillName", type: "string" }, { name: "BillAttn", type: "string" }, { name: "BillAddrLine1", type: "string" }, { name: "BillAddrLine2", type: "string" }, { name: "BillCity", type: "string" }, { name: "BillStateID", type: "string" }, { name: "BillCntryID", type: "string" }, { name: "BillZip", type: "string" }, { name: "BillPhone", type: "string" }, { name: "BillFax", type: "string" }, { name: "ShipAddrID", type: "string" }, { name: "ShipCustID", type: "string" }, { name: "ShipSiteID", type: "string" }, { name: "ShiptoType", type: "string" }, { name: "ShipVendAddrID", type: "string" }, { name: "ShipVendID", type: "string" }, { name: "ShiptoID", type: "string" }, { name: "ShipName", type: "string" }, { name: "ShipAttn", type: "string" }, { name: "ShipAddrLine1", type: "string" }, { name: "ShipAddrLine2", type: "string" }, { name: "ShipCity", type: "string" }, { name: "ShipStateID", type: "string" }, { name: "ShipCntryID", type: "string" }, { name: "ShipZip", type: "string" }, { name: "ShipPhone", type: "string" }, { name: "ShipFax", type: "string" }, { name: "CheckNbr", type: "string" }, { name: "CardNbr", type: "string" }, { name: "CardName", type: "string" }, { name: "CardExpDate", type: "date", dateFormat: "c" }, { name: "AuthCode", type: "string" }, { name: "tstamp", type: "string" }, { name: "TaxRegNbr", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoOrdAddr", readParameters: function (operation) { return { apply: { "orderNbr": App.cboOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrdAddr", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: stoDetail_Load } } }); window.App.stoUserDefault = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlUserDefault", { extend: "Ext.data.Model", fields: [{ name: "OMSite", type: "string" }, { name: "INSite", type: "string" }, { name: "POSite", type: "string" }, { name: "DfltOrderType", type: "string" }, { name: "DfltBranchID", type: "string" }, { name: "DfltSlsPerID", type: "string" }, { name: "DfltSupID", type: "string" }, { name: "LastInvcNbr", type: "string" }, { name: "InvcNote", type: "string" }, { name: "WorkingDate", type: "date", dateFormat: "c" }, { name: "DiscSite", type: "string" }, { name: "OMWhseLoc", type: "string" }, { name: "BranchRouteID", type: "string" }, { name: "SalesRouteID", type: "string" }] }), storeId: "stoUserDefault", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue(), "slsperID": App.cboSlsPerID.getValue(), "orderType": App.cboOrderType.getValue(), "orderDate": App.txtOrderDate.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetUserDefault", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoINSetup = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlINSetup", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "SetupID", type: "string" }, { name: "AutoRefNbr", type: "boolean" }, { name: "CnvFactEditable", type: "boolean" }, { name: "NegQty", type: "boolean" }, { name: "LastBatNbr", type: "string" }, { name: "LastRefNbr", type: "string" }, { name: "LastTransferNbr", type: "string" }, { name: "LastIssueNbr", type: "string" }, { name: "LastRcptNbr", type: "string" }, { name: "DfltValMthd", type: "string" }, { name: "DfltSite", type: "string" }, { name: "PreFixBat", type: "string" }, { name: "UseBarCode", type: "boolean" }, { name: "tstamp", type: "string" }, { name: "CheckINVal", type: "boolean" }, { name: "LastStkOutNbr", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoINSetup", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetINSetup", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoOMSetup = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOMSetup", { extend: "Ext.data.Model", fields: [{ name: "SetupID", type: "string" }, { name: "AutoReleaseAR", type: "int" }, { name: "AutoReleaseIN", type: "int" }, { name: "BGWarningMsg", type: "int" }, { name: "DetDiscG1App", type: "int" }, { name: "DetDiscG1C1", type: "string" }, { name: "DetDiscG1C2", type: "string" }, { name: "DetDiscG2App", type: "int" }, { name: "DetDiscG2C1", type: "string" }, { name: "DetDiscG2C2", type: "string" }, { name: "DetDiscG3App", type: "int" }, { name: "DetDiscG3C1", type: "string" }, { name: "DetDiscG3C2", type: "string" }, { name: "DetDiscG4App", type: "int" }, { name: "DetDiscG4C1", type: "string" }, { name: "DetDiscG4C2", type: "string" }, { name: "DetDiscG5App", type: "int" }, { name: "DetDiscG5C1", type: "string" }, { name: "DetDiscG5C2", type: "string" }, { name: "DetDiscG6App", type: "int" }, { name: "DetDiscG6C1", type: "string" }, { name: "DetDiscG6C2", type: "string" }, { name: "DfltOrderType", type: "string" }, { name: "DfltSalesPrice", type: "string" }, { name: "DocDiscG1App", type: "int" }, { name: "DocDiscG1C1", type: "string" }, { name: "DocDiscG1C2", type: "string" }, { name: "DocDiscG2App", type: "int" }, { name: "DocDiscG2C1", type: "string" }, { name: "DocDiscG2C2", type: "string" }, { name: "DocDiscG3App", type: "int" }, { name: "DocDiscG3C1", type: "string" }, { name: "DocDiscG3C2", type: "string" }, { name: "DocDiscG4App", type: "int" }, { name: "DocDiscG4C1", type: "string" }, { name: "DocDiscG4C2", type: "string" }, { name: "DocDiscG5App", type: "int" }, { name: "DocDiscG5C1", type: "string" }, { name: "DocDiscG5C2", type: "string" }, { name: "DocDiscG6App", type: "int" }, { name: "DocDiscG6C1", type: "string" }, { name: "DocDiscG6C2", type: "string" }, { name: "EditableSlsPrice", type: "boolean" }, { name: "GroupDiscG10App", type: "int" }, { name: "GroupDiscG10C1", type: "string" }, { name: "GroupDiscG10C2", type: "string" }, { name: "GroupDiscG11App", type: "int" }, { name: "GroupDiscG11C1", type: "string" }, { name: "GroupDiscG11C2", type: "string" }, { name: "GroupDiscG12App", type: "int" }, { name: "GroupDiscG12C1", type: "string" }, { name: "GroupDiscG12C2", type: "string" }, { name: "GroupDiscG1App", type: "int" }, { name: "GroupDiscG1C1", type: "string" }, { name: "GroupDiscG1C2", type: "string" }, { name: "GroupDiscG2App", type: "int" }, { name: "GroupDiscG2C1", type: "string" }, { name: "GroupDiscG2C2", type: "string" }, { name: "GroupDiscG3App", type: "int" }, { name: "GroupDiscG3C1", type: "string" }, { name: "GroupDiscG3C2", type: "string" }, { name: "GroupDiscG4App", type: "int" }, { name: "GroupDiscG4C1", type: "string" }, { name: "GroupDiscG4C2", type: "string" }, { name: "GroupDiscG5App", type: "int" }, { name: "GroupDiscG5C1", type: "string" }, { name: "GroupDiscG5C2", type: "string" }, { name: "GroupDiscG6App", type: "int" }, { name: "GroupDiscG6C1", type: "string" }, { name: "GroupDiscG6C2", type: "string" }, { name: "GroupDiscG7App", type: "int" }, { name: "GroupDiscG7C1", type: "string" }, { name: "GroupDiscG7C2", type: "string" }, { name: "GroupDiscG8App", type: "int" }, { name: "GroupDiscG8C1", type: "string" }, { name: "GroupDiscG8C2", type: "string" }, { name: "GroupDiscG9App", type: "int" }, { name: "GroupDiscG9C1", type: "string" }, { name: "GroupDiscG9C2", type: "string" }, { name: "POSPrinter", type: "string" }, { name: "PrcClsHierarchyLevel", type: "int" }, { name: "PrefixBat", type: "string" }, { name: "PriceSeq00", type: "string" }, { name: "PriceSeq01", type: "string" }, { name: "PriceSeq02", type: "string" }, { name: "PriceSeq03", type: "string" }, { name: "PriceSeq04", type: "string" }, { name: "PriceSeq05", type: "string" }, { name: "ProrateDisc", type: "int" }, { name: "SimpleDiscounts", type: "int" }, { name: "UseBarCode", type: "int" }, { name: "UseDiscTerm", type: "int" }, { name: "VN32Promotion", type: "int" }, { name: "tstamp", type: "string" }, { name: "AutoInvcNbr", type: "boolean" }, { name: "CreditChkRule", type: "string" }, { name: "InlcSOFeeDisc", type: "boolean" }, { name: "InlcSOFeeProm", type: "boolean" }, { name: "ReqDiscID", type: "boolean" }, { name: "ShowCustClass", type: "boolean" }, { name: "ShowKPI", type: "boolean" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoOMSetup", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOMSetup", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoCalcLot = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlCalcLot", { extend: "Ext.data.Model", fields: [{ name: "SiteID", type: "string" }, { name: "InvtID", type: "string" }, { name: "LotSerNbr", type: "string" }, { name: "Cost", type: "float" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "LIFODate", type: "date", dateFormat: "c" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocOther", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "QtyAllocPDASO", type: "float" }, { name: "WhseLoc", type: "string" }, { name: "PackageID", type: "string" }, { name: "QtyCnvFact", type: "float" }] }), storeId: "stoCalcLot", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetLot", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoLotTrans = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlLotTrans", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LotSerNbr", type: "string" }, { name: "OMLineRef", type: "string" }, { name: "UnitDesc", type: "string" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "InvtID", type: "string" }, { name: "InvtMult", type: "int" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "CnvFact", type: "float" }, { name: "UnitMultDiv", type: "string" }, { name: "Qty", type: "float" }, { name: "SiteID", type: "string" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "INDocType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitPrice", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "tstamp", type: "string" }, { name: "WhseLoc", type: "string" }, { name: "ToWhseLoc", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoLotTrans", readParameters: function (operation) { return { apply: { "orderNbr": App.cboOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetLotTrans", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: stoDetail_Load } } }); window.App.stoOldLotTrans = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOldLotTrans", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LotSerNbr", type: "string" }, { name: "OMLineRef", type: "string" }, { name: "UnitDesc", type: "string" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "InvtID", type: "string" }, { name: "InvtMult", type: "int" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "CnvFact", type: "float" }, { name: "UnitMultDiv", type: "string" }, { name: "Qty", type: "float" }, { name: "SiteID", type: "string" }, { name: "TranDate", type: "date", dateFormat: "c" }, { name: "INDocType", type: "string" }, { name: "UnitCost", type: "float" }, { name: "UnitPrice", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "tstamp", type: "string" }, { name: "WhseLoc", type: "string" }, { name: "ToWhseLoc", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoOldLotTrans", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetLotTrans", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoItemLot = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlItemLot", { extend: "Ext.data.Model", fields: [{ name: "SiteID", type: "string" }, { name: "InvtID", type: "string" }, { name: "LotSerNbr", type: "string" }, { name: "Cost", type: "float" }, { name: "ExpDate", type: "date", dateFormat: "c" }, { name: "LIFODate", type: "date", dateFormat: "c" }, { name: "MfgrLotSerNbr", type: "string" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocOther", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "WarrantyDate", type: "date", dateFormat: "c" }, { name: "tstamp", type: "string" }, { name: "QtyAllocPDASO", type: "float" }, { name: "WhseLoc", type: "string" }, { name: "PackageID", type: "string" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoItemLot", proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetItemLot", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoRewardAmtReturn = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlRewardAmtReturn", { extend: "Ext.data.Model", fields: [{ name: "RewardAmt", type: "float" }, { name: "RewardID", type: "string" }] }), storeId: "stoRewardAmtReturn", readParameters: function (operation) { return { apply: { "orderNbr": App.cboBKOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetRewardAmtReturn", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoEditDetail = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlDetail", { extend: "Ext.data.Model", fields: [{ name: "LineRef", type: "string" }, { name: "DiscType", type: "string" }, { name: "Descr", type: "string" }, { name: "Qty", type: "float" }, { name: "Code", type: "string" }, { name: "Edit", type: "boolean" }] }), storeId: "stoEditDetail", readParameters: function (operation) { return { apply: { "orderNbr": App.cboOrderNbr.getValue(), "branchID": App.txtBranchID.getValue() } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data" }, timeout: 2147483647, url: "OM10100/GetOrdGift", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoCodeProgram = Ext.create("Ext.data.Store", { model: Ext.define("App.stoCodeProgrammdl", { extend: "Ext.data.Model", fields: [{ name: "DiscType", mapping: "DiscType", type: "string" }, { name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "stoCodeProgram", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM10100_pcCodeProgram", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoOM10100_pdDocBal = Ext.create("Ext.data.Store", { model: Ext.define("App.stoOM10100_pdDocBalmdl", { extend: "Ext.data.Model", fields: [{ name: "DocBal", mapping: "DocBal", type: "float" }] }), storeId: "stoOM10100_pdDocBal", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": _ordNbr, "param1": App.txtBranchID.getValue(), "param2": HQ.userName, "param3": HQ.langID, "procName": "OM10100_pdDocBal", "procParam": "@OrdNbr,@BranchID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: stoOM10100_pdDocBal_Load } } }); window.App.stoOM10100_pdInvtMark = Ext.create("Ext.data.Store", { model: Ext.define("App.stoOM10100_pdInvtMarkmdl", { extend: "Ext.data.Model", fields: [{ name: "DiscCode", mapping: "DiscCode", type: "string" }, { name: "InvtID", mapping: "InvtID", type: "string" }, { name: "FreeItem", mapping: "FreeItem", type: "boolean" }, { name: "Mark", mapping: "Mark", type: "float" }] }), storeId: "stoOM10100_pdInvtMark", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": HQ.userName, "param2": HQ.cpnyID, "param3": HQ.langID, "procName": "OM10100_pdInvtMark", "procParam": "@BranchID,@UserID,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); Ext.create("Ext.container.Viewport", { renderTo: Ext.getBody(), items: [{ id: "winReport", width: 350, xtype: "window", resizable: false, items: [{ id: "cboReport", margin: "10 0 10 20", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('REPORT'), labelWidth: 70, matchFieldWidth: false, delimiter: ",", displayField: "ReportName", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('REPORTNBR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('REPORTCAP') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('REPORTNAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{ReportNbr}</td><td style='min-width: 100px !important;'>{ReportCap}</td><td style='min-width: 100px !important;'>{ReportName}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 500, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, pageSize: 20, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "ReportNbr", mapping: "ReportNbr", type: "string" }, { name: "ReportCap", mapping: "ReportCap", type: "string" }, { name: "ReportName", mapping: "ReportName", type: "string" }] }), storeId: "cboReportOM10100_pcReport", type: "paging", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM10100_pcReport", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, serverProxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, pageSize: 20, proxy: { type: 'pagingmemory' } }, listeners: { beforequery: { fn: function (queryEvent) { FilterCombo(this, 'ReportNbr,ReportCap,ReportName') } } } }], buttons: [{ id: "btnShowReport", text: HQ.common.getLang('PREVIEW'), listeners: { click: { fn: btnShowReport_Click } } }, { id: "btnCloseReport", text: HQ.common.getLang('CLOSED'), listeners: { click: { fn: function (item, e) { App.winReport.close() } } } }], title: "Report", listeners: { hide: { fn: function (item) { App.frmMain.unmask(); } }, show: { fn: function (item) { App.frmMain.mask(); } }, close: { fn: function (item) { App.frmMain.unmask(); } } } }, { id: "winNote", height: 300, width: 500, xtype: "window", resizable: false, items: [{ id: "txtNote", height: 300, width: 500, xtype: "textareafield", shadow: false }], buttons: [{ id: "btnNoteOK", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnNoteOK_Click } } }], title: "Note", listeners: { hide: { fn: function (item) { App.frmMain.unmask(); } }, show: { fn: function (item) { App.frmMain.mask(); } }, close: { fn: function (item) { App.frmMain.unmask(); } } } }, { id: "winBackOrder", width: 350, xtype: "window", resizable: false, items: [{ id: "cboBKOrderType", margin: "10 0 0 20", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('ORDERTYPE'), labelAlign: "right", labelWidth: 80, submitValue: false, allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('ORDERTYPE'), matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('ORDERTYPE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{OrderType}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "OrderType", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "OrderType", mapping: "OrderType", type: "string" }, { name: "Active", mapping: "Active", type: "boolean" }, { name: "ApplShift", mapping: "ApplShift", type: "boolean" }, { name: "ARDocType", mapping: "ARDocType", type: "string" }, { name: "AutoPromotion", mapping: "AutoPromotion", type: "int" }, { name: "BO", mapping: "BO", type: "boolean" }, { name: "DaysToKeep", mapping: "DaysToKeep", type: "int" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "DfltCustID", mapping: "DfltCustID", type: "string" }, { name: "DiscType", mapping: "DiscType", type: "string" }, { name: "INDocType", mapping: "INDocType", type: "string" }, { name: "SalesType", mapping: "SalesType", type: "string" }, { name: "RequiredVATInvcNbr", mapping: "RequiredVATInvcNbr", type: "int" }, { name: "ShippingReport", mapping: "ShippingReport", type: "string" }, { name: "TaxFee", mapping: "TaxFee", type: "boolean" }, { name: "ManualDisc", mapping: "ManualDisc", type: "boolean" }] }), storeId: "cboBKOrderTypeOM10100_pcBackOrderType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": HQ.userName, "param2": HQ.langID, "procName": "OM10100_pcBackOrderType", "procParam": "@BranchID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: cboBKOrderType_Change }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'OrderType,Descr') } } } }, { id: "cboBKReasonCode", margin: "5 0 0 20", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('REASONCD'), labelAlign: "right", labelWidth: 80, submitValue: false, allowBlank: false, displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('CODE') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{Code}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, valueField: "Code", store: "stoBKReasonCode" }, { id: "cboBKOrderNbr", margin: "5 0 10 20", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('ORDERNBR'), labelAlign: "right", labelWidth: 80, allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('ORDERNBR'), enforceMaxLength: true, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "OrderNbr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('ORDERNBR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('CUSTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('SLSPERID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('ORDERDATE') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{OrderNbr}</td><td style='min-width: 100px !important;'>{CustID}</td><td style='min-width: 100px !important;'>{SlsPerID}</td><td style='min-width: 100px !important;'>{OrderDate:date('" + HQ.formatDateJS + "')}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "OrderNbr", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "OrderNbr", mapping: "OrderNbr", type: "string" }, { name: "CustID", mapping: "CustID", type: "string" }, { name: "SlsPerID", mapping: "SlsPerID", type: "string" }, { name: "Status", mapping: "Status", type: "string" }, { name: "OrderDate", mapping: "OrderDate", type: "date", dateFormat: "c" }, { name: "VolDiscAmt", mapping: "VolDiscAmt", type: "float" }, { name: "VolDiscPct", mapping: "VolDiscPct", type: "float" }, { name: "ManualDiscPct", mapping: "ManualDiscPct", type: "float" }, { name: "ManualDiscAmt", mapping: "ManualDiscAmt", type: "float" }, { name: "FreightAmt", mapping: "FreightAmt", type: "float" }, { name: "OrdDiscAmt", mapping: "OrdDiscAmt", type: "float" }, { name: "DeliveryID", mapping: "DeliveryID", type: "string" }, { name: "ShipDate", mapping: "ShipDate", type: "date", dateFormat: "c" }, { name: "ARDocDate", mapping: "ARDocDate", type: "date", dateFormat: "c" }] }), storeId: "cboBKOrderNbrOM10100_pcBackOrder", readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": App.cboBKOrderType.getValue(), "param2": App.cboCustID.getValue(), "param3": HQ.userName, "param4": HQ.cpnyID, "param5": HQ.langID, "procName": "OM10100_pcBackOrder", "procParam": "@BranchID,@OrderType,@CustID,@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { beforequery: { fn: function (queryEvent) { FilterCombo(this, 'OrderNbr,CustID,SlsPerID,OrderDate') } } } }], buttons: [{ id: "btnBKOk", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnBKOk_Click } } }], title: "BackOrder", listeners: { hide: { fn: function (item) { App.frmMain.unmask(); } }, show: { fn: function (item) { App.frmMain.mask(); } }, close: { fn: function (item) { App.frmMain.unmask(); } } } }, { id: "winLot", height: 300, width: 550, xtype: "window", items: [{ id: "grdLot", border: true, border: "1 0 0 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1 }], xtype: "grid", columns: { items: [{ xtype: "rownumberer", renderer: renderRowNumber }, { id: "colLotSerNbr", width: 120, dataIndex: "LotSerNbr", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboLotSerNbr", xtype: "combobox", dataIndex: "LotSerNbr", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, displayField: "LotSerNbr", forceSelection: true, listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<table style='width:300px !important'>", "<tr>", "<th>" + HQ.common.getLang('LOTSERNBR') + "</th>", "<th>" + HQ.common.getLang('EXPDATE') + "</th>", "<th>" + HQ.common.getLang('QTYAVAIL') + "</th>", "</tr>", "</tpl>", "<tr class='x-boundlist-item'>", "<td style='width:110px;'>{LotSerNbr}</td>", "<td>{ExpDate:date(\"m-d-Y\")}</td>", "<td>{QtyCnvFact:number(\"###,###.0\")}</td>", "</tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</tpl>", "</tpl>"] }), itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, minChars: 1, queryMode: "local", valueField: "LotSerNbr", store: "stoCalcLot", listeners: { focus: { fn: function (item) { HQ.focus = 'lot' } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('LOTSERNBR') }, { id: "colLotUnitDesc", width: 100, dataIndex: "UnitDesc", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboLotUnitDesc", xtype: "combobox", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], displayField: "FromUnit", queryMode: "local", valueField: "FromUnit", store: "stoUnit", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('UNIT') }, { id: "colLotQty", style: "text-align:left", width: 75, align: "right", dataIndex: "Qty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderQtyAmt, text: HQ.common.getLang('QTY') }, { id: "colLotPrice", style: "text-align:left", width: 75, align: "right", dataIndex: "UnitPrice", renderer: renderQtyAmt, text: HQ.common.getLang('PRICE') }, { id: "ExpDate", xtype: "datecolumn", dataIndex: "ExpDate", text: HQ.common.getLang('EXPDATE') }] }, selModel: window.App.smlLot = Ext.create("Ext.selection.RowModel", { proxyId: "smlLot", selType: "rowmodel" }), store: "stoLotTrans", viewConfig: { xtype: "gridview", trackOver: false }, listeners: { beforeedit: { fn: grdLot_BeforeEdit }, edit: { fn: grdLot_Edit }, selectionchange: { fn: grdLot_SelectionChange }, select: { fn: function (item, record, index) { HQ.focus = 'lot'; } }, validateedit: { fn: grdLot_ValidateEdit } } }], layout: "fit", bbar: { border: false, xtype: "toolbar", items: [{ id: "lblLotQtyAvail", margin: "0 5 0 5", style: "text-align:left;", width: 350, xtype: "netlabel" }] }, buttons: [{ id: "btnLotDel", text: HQ.common.getLang('DELETERIGHTS'), listeners: { click: { fn: btnLotDel_Click } } }, { id: "btnLotOK", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnLotOK_Click } } }], closable: false, modal: true }, { id: "winChoice", height: 500, width: 900, xtype: "window", items: [{ border: false, region: "north", split: true, flex: 5, items: [{ id: "grdChoiceHeader", border: true, border: "1 0 0 0", xtype: "grid", title: HQ.common.getLang('OM10100CHOICEHEADER'), columns: { items: [{ xtype: "rownumberer" }, { width: 100, dataIndex: "DiscID", text: HQ.common.getLang('DISCID') }, { width: 140, dataIndex: "DiscSeq", text: HQ.common.getLang('DISCSEQ') }, { width: 200, dataIndex: "DiscDescr", text: HQ.common.getLang('DISCDESCR') }, { style: "text-align:right", width: 110, xtype: "numbercolumn", align: "right", dataIndex: "MaxQty", renderer: rendererMaxQty, text: HQ.common.getLang('OM10100MAXQTY'), format: "0,000" }, { style: "text-align:right", width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LevelID", text: HQ.common.getLang('OM10100LEVELID'), format: "0,000" }, { width: 120, dataIndex: "InvtID", text: HQ.common.getLang('INVTID') }, { width: 120, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { width: 70, dataIndex: "Unit", text: HQ.common.getLang('UNIT') }] }, selModel: window.App.smlChoiceHeader = Ext.create("Ext.selection.RowModel", { proxyId: "smlChoiceHeader", selType: "rowmodel" }), store: "stoChoiceHeader", viewConfig: { xtype: "gridview", trackOver: false }, listeners: { selectionchange: { fn: grdChoiceHeader_SelectionChange } } }], layout: "fit" }, { border: false, region: "center", flex: 4, items: [{ id: "grdChoice", border: true, border: "1 0 0 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1 }], xtype: "grid", title: HQ.common.getLang('OM10100CHOICEDET'), columns: { items: [{ xtype: "rownumberer" }, { id: "colSel", width: 30, xtype: "checkcolumn", dataIndex: "Sel", filterable: false, editable: true }, { width: 110, dataIndex: "FreeItemID", text: HQ.common.getLang('FREEITEMID') }, { width: 180, dataIndex: "FreeItemDescr", text: HQ.common.getLang('FREEITEMDESCR') }, { width: 100, dataIndex: "FreeItemUnit", text: HQ.common.getLang('FREEITEMUNIT') }, { id: "txtFreeItemQty", style: "text-align:left", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "FreeItemQty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 1, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderQtyAmt1, text: HQ.common.getLang('SOSUAT'), format: "0,000.0" }, { id: "txtMaxQtyInGroup", style: "text-align:right", align: "right", dataIndex: "MaxQtyInGroup", text: HQ.common.getLang('MAXQTYINGROUP') }, { style: "text-align:right", width: 140, xtype: "numbercolumn", align: "right", dataIndex: "FreeItemQtyBase", text: HQ.common.getLang('FREEITEMQTYBASE'), format: "0,000" }, { style: "text-align:left", xtype: "numbercolumn", align: "right", dataIndex: "TotQty", text: HQ.common.getLang('FREEITEMQTY'), format: "0,000" }, { dataIndex: "GroupItem", text: HQ.common.getLang('GROUPITEM') }, { style: "text-align:right", xtype: "numbercolumn", align: "right", dataIndex: "Priority", text: HQ.common.getLang('PRIORITY') }, { style: "text-align:right", xtype: "numbercolumn", align: "right", dataIndex: "PromoPrice", text: HQ.common.getLang('OM10100PROMOPRICE'), format: "0,000" }, { style: "text-align:right", xtype: "numbercolumn", align: "right", dataIndex: "PromoLineAmt", text: HQ.common.getLang('OM10100PROMOLINEAMT'), format: "0,000" }] }, selModel: window.App.smlChoice = Ext.create("Ext.selection.RowModel", { proxyId: "smlChoice", selType: "rowmodel" }), store: "stoChoice", viewConfig: { xtype: "gridview", trackOver: false }, listeners: { edit: { fn: grdChoice_Edit }, select: { fn: smlChoice_Select } } }], layout: "fit" }], layout: "border", bbar: { id: "bottomBar", border: false, xtype: "toolbar", items: [{ id: "ctnBottomBar", xtype: "container", items: [{ id: "lblChoiceQtyAvail", margin: "0 0 0 5", style: "style='float: left;width: 400px;font-weight: bold;'", width: 400, xtype: "netlabel" }, { id: "lblChoiceAmtUsed", margin: "0 0 0 5", style: "style='float: left;width: 300px;font-weight: bold;'", xtype: "netlabel" }, { id: "btnChoiceOk", style: "style='float: right;width: 100px;font-weight: bold; margin-right: 10px;'", xtype: "button", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnChoiceOk_Click } } }] }] }, modal: true, listeners: { hide: { fn: winChoice_Close }, close: { fn: winChoice_Close } } }, { id: "winSearchBackOrder", height: 400, minHeight: 200, minWidth: 300, width: 650, xtype: "window", defaultButton: "btnLoad", items: [{ region: "north", items: [{ xtype: "container", items: [{ margin: "5 0 0 0", xtype: "container", items: [{ id: "cboSearchSlsperID", width: 310, xtype: "combobox", fieldLabel: HQ.common.getLang('SLSPERID'), labelAlign: "right", labelWidth: 110, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('SLSPERID'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Name", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SLSPERID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SlsperID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SlsperID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SlsperID", mapping: "SlsperID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "DeliveryID", mapping: "DeliveryID", type: "string" }, { name: "DiscSite", mapping: "DiscSite", type: "string" }, { name: "OMSite", mapping: "OMSite", type: "string" }] }), storeId: "cboSearchSlsperIDOM10100_pcSalesPerson", readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": App.cboOrderType.getValue(), "param2": HQ.langID, "param3": HQ.cpnyID, "param4": HQ.userName, "procName": "OM10100_pcSalesPerson", "procParam": "@BranchID,@OrderType,@LangID,@CpnyID,@UserName,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: function (item, newValue, oldValue) { App.cboSearchCustID.setValue(''); App.cboSearchCustID.store.reload() } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SlsperID,Name') } } } }, { id: "dteFromDate", width: 200, xtype: "datefield", fieldLabel: HQ.common.getLang('FROMDATE'), labelAlign: "right", labelWidth: 70, allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { change: { fn: dteFromDate_change } } }], layout: "hbox" }, { margin: "5 0 0 0", xtype: "container", items: [{ id: "cboSearchCustID", tag: "X", width: 310, xtype: "combobox", fieldLabel: HQ.common.getLang('CUSTID'), labelAlign: "right", labelWidth: 110, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('CUSTID'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "CustName", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CUSTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('CUSTNAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{CustID}</td><td style='min-width: 100px !important;'>{CustName}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 400, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, pageSize: 20, queryMode: "local", valueField: "CustID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "CustID", mapping: "CustID", type: "string" }, { name: "CustName", mapping: "CustName", type: "string" }, { name: "Addr1", mapping: "Addr1", type: "string" }, { name: "Addr2", mapping: "Addr2", type: "string" }, { name: "Terms", mapping: "Terms", type: "string" }, { name: "BranchID", mapping: "BranchID", type: "string" }, { name: "DfltShipToID", mapping: "DfltShipToID", type: "string" }] }), storeId: "cboSearchCustIDOM10100_pcSearchCustomer", type: "paging", readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "param3": App.cboSearchSlsperID.getValue(), "param4": App.txtBranchID.getValue(), "procName": "OM10100_pcSearchCustomer", "procParam": "@CpnyID,@Username,@LangID,@SlsperID,@BranchID,", "sys": "False" } }; }, serverProxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, pageSize: 20, proxy: { type: 'pagingmemory' } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'CustID,CustName') } } } }, { id: "dteToDate", width: 200, xtype: "datefield", fieldLabel: HQ.common.getLang('TODATE'), labelAlign: "right", labelWidth: 70, allowBlank: false, format: HQ.formatDateJS, submitFormat: "m/d/Y" }, { id: "btnLoad", margin: "0 0 5 10", width: 120, xtype: "button", iconCls: "#ArrowRefresh", text: HQ.common.getLang('LOADDATA'), listeners: { click: { fn: btnLoad_Click } } }], layout: "hbox" }], layout: "vbox" }], layout: "fit" }, { region: "center", items: [{ store: { model: Ext.define("App.mdlOM10100_pgSearchBackOrder", { extend: "Ext.data.Model", fields: [{ name: "OrderNbr", type: "string" }, { name: "CustID", type: "string" }, { name: "CustName", type: "string" }, { name: "SlsPerID", type: "string" }, { name: "SlsName", type: "string" }, { name: "OrderDate", type: "date", dateFormat: "c" }, { name: "VolDiscAmt", type: "float" }, { name: "VolDiscPct", type: "float" }, { name: "FreightAmt", type: "float" }, { name: "OrdDiscAmt", type: "float" }, { name: "DeliveryID", type: "string" }, { name: "OrderAmt", type: "float" }, { name: "ManualDiscPct", type: "float" }, { name: "ManualDiscAmt", type: "float" }, { name: "DfltShipToID", type: "string" }] }), storeId: "stoSearchBackOrder", type: "paging", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue(), "slsperID": App.cboSearchSlsperID.getValue(), "custID": App.cboSearchCustID.getValue(), "fromDate": App.dteFromDate.getValue(), "toDate": App.dteToDate.getValue() } }; }, serverProxy: { type: "ajax", timeout: 2147483647, url: "OM10100/GetSearchBackOrder" }, pageSize: 30, proxy: { type: 'pagingmemory' }, listeners: { beforeload: { fn: stoSearchBackOrder_BeforeLoad }, load: { fn: stoSearchBackOrder_Load } } }, id: "grdBackOrder", xtype: "grid", layout: "fit", bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "30", value: "30" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoSearchBackOrder", hideRefresh: true }, columns: { items: [{ maxWidth: 100, minWidth: 20, width: 30, xtype: "rownumberer", listeners: { afterrender: { fn: function (item) { this.resizable = true } } } }, { width: 100, dataIndex: "SlsPerID", text: HQ.common.getLang('SLSPERID') }, { width: 120, dataIndex: "SlsName", text: HQ.common.getLang('SLSNAME') }, { width: 110, dataIndex: "CustID", text: HQ.common.getLang('CUSTID') }, { width: 120, dataIndex: "CustName", text: HQ.common.getLang('CUSTNAME') }, { width: 100, dataIndex: "OrderNbr", text: HQ.common.getLang('ORDERNBR') }, { style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "OrderAmt", text: HQ.common.getLang('TOTAMT'), format: "0,000" }, { width: 110, xtype: "datecolumn", dataIndex: "OrderDate", text: HQ.common.getLang('ORDERDATE'), format: HQ.formatDateJS }] }, selModel: Ext.create("Ext.selection.CheckboxModel", { selType: "checkboxmodel", mode: "single", showHeaderCheckbox: false }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "SlsperID", type: "string" }, { dataIndex: "SlsName", type: "string" }, { dataIndex: "TotAmt", type: "numeric" }, { dataIndex: "CustID", type: "string" }, { dataIndex: "CustName", type: "string" }, { dataIndex: "OrderNbr", type: "string" }, { dataIndex: "OrderDate", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }] })], viewConfig: { xtype: "gridview", trackOver: false }, listeners: { celldblclick: { fn: btnSearchBackOrderOK_click } } }], layout: "fit" }, { margin: "5 5 5 5", xtype: "container", region: "south", items: [{ id: "btnOK", minWidth: 60, xtype: "button", handler: btnSearchBackOrderOK_click, iconCls: "#Disk", text: HQ.common.getLang('OK') }, { margin: "0 0 0 5", minWidth: 60, xtype: "button", handler: function () { App.winSearchBackOrder.close(); }, iconCls: "#ApplicationHome", text: HQ.common.getLang('CLOSE') }], layout: { type: "hbox", pack: "center" } }], layout: "border", title: HQ.common.getLang('OM10100BACKORDER'), listeners: { beforeshow: { fn: winSearchBackOrder_BeforeShow }, hide: { fn: function (item) { App.frmMain.unmask(); } }, close: { fn: function (item) { App.frmMain.unmask(); } } } }, { id: "winManualPromo", height: 400, minHeight: 100, minWidth: 150, width: 1000, xtype: "window", items: [{ store: { model: Ext.define("App.mdlManualPromo", { extend: "Ext.data.Model", fields: [{ name: "DiscCode", type: "string" }, { name: "Descr", type: "string" }, { name: "PromoType", type: "string" }, { name: "Discount", type: "float" }, { name: "FreeItemID", type: "string" }, { name: "UnitDescr", type: "string" }, { name: "FreeItemQty", type: "float" }, { name: "TotalDiscout", type: "float" }, { name: "SiteType", type: "string" }, { name: "Selected", type: "boolean" }, { name: "LineRef", type: "string" }, { name: "PromoTypeDescr", type: "string" }, { name: "QtyAvail", type: "float" }, { name: "ClassID", type: "string" }, { name: "StkUnit", type: "string" }] }), storeId: "stoManualPromo", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue(), "slsperID": App.cboSlsPerID.getValue(), "custID": App.cboCustID.getValue(), "orderDate": App.txtOrderDate.getValue(), "totalAmt": _totalAmt, "orderNbr": App.cboOrderNbr.getValue() } }; }, serverProxy: { type: "ajax", url: "OM10100/GetManualPromo" }, pageSize: 50, proxy: { type: 'memory' }, listeners: { load: { fn: PopupwinManualPromo.stoManualPromo_Load } } }, id: "grdManualPromo", border: true, border: "1 0 0 0", margin: "5 0 5 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: PopupwinManualPromo.grdManualPromo_BeforeEdit }, edit: { fn: PopupwinManualPromo.grdManualPromo_Edit } } }], xtype: "grid", anchor: "100% -25", columns: { items: [{ xtype: "rownumberer" }, { width: 40, xtype: "checkcolumn", align: "center", dataIndex: "Selected", editable: true }, { dataIndex: "DiscCode", text: HQ.common.getLang('DISCCODE') }, { minWidth: 150, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { minWidth: 100, dataIndex: "PromoTypeDescr", text: HQ.common.getLang('PROMOTYPE') }, { style: "text-align:right", width: 80, xtype: "numbercolumn", align: "right", dataIndex: "Discount", text: HQ.common.getLang('DISCOUNT') }, { width: 100, dataIndex: "FreeItemID", text: HQ.common.getLang('FREEITEMID') }, { width: 60, dataIndex: "UnitDescr", text: HQ.common.getLang('UNITDESCR') }, { minWidth: 90, dataIndex: "SiteType", text: HQ.common.getLang('SITEID') }, { style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "FreeItemQty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 10000.0, minValue: 0.0 } }, {})), text: HQ.common.getLang('FREEITEMQTY'), format: "0,000" }, { style: "text-align:right", width: 120, xtype: "numbercolumn", align: "right", dataIndex: "TotalDiscout", text: HQ.common.getLang('OM10100TOTALDISCOUT'), format: "0,000" }] }, selModel: window.App.smlManualPromo = Ext.create("Ext.selection.RowModel", { proxyId: "smlManualPromo", selType: "rowmodel" }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "Selected", type: "boolean" }, { dataIndex: "DiscCode", type: "string" }, { dataIndex: "Descr", type: "string" }, { dataIndex: "PromoTypeDescr", type: "boolean" }, { dataIndex: "Discount", type: "numeric" }, { dataIndex: "FreeItemID", type: "string" }, { dataIndex: "UnitDescr", type: "string" }, { dataIndex: "SiteType", type: "string" }, { dataIndex: "FreeItemQty", type: "numeric" }, { dataIndex: "TotalDiscout", type: "numeric" }] })], viewConfig: { xtype: "gridview", trackOver: false } }], layout: "anchor", buttons: [{ id: "btnManualOk", text: HQ.common.getLang('OK'), listeners: { click: { fn: PopupwinManualPromo.btnManualOk_Click } } }], modal: true }, { id: "frmMain", xtype: "form", keyMap: { binding: [{ ctrl: true, alt: true, handler: function () { menuClick('save'); }, key: "S" }, { ctrl: true, alt: true, handler: function () { menuClick('delete'); }, key: "D" }, { ctrl: true, alt: true, handler: function () { menuClick('new'); }, key: "N" }, { ctrl: true, alt: true, handler: function () { menuClick('print'); }, key: "P" }, { ctrl: true, handler: function () { menuClick('first'); }, key: "Up" }, { ctrl: true, handler: function () { menuClick('prev'); }, key: "Left" }, { ctrl: true, handler: function () { menuClick('last'); }, key: "Down" }, { ctrl: true, handler: function () { menuClick('next'); }, key: "Right" }], target: Ext.getBody() }, defaultAnchor: "100%", items: [{ border: false, region: "north", autoScroll: true, items: [{ margin: "10 0 5 0", xtype: "fieldcontainer", items: [{ id: "tstamp", xtype: "hiddenfield" }, { id: "cboOrderType", width: 260, xtype: "combobox", keyMap: { binding: { handler: function () { App.cboOrderNbr.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ORDERTYPE'), labelAlign: "right", labelWidth: 110, name: "OrderType", dataIndex: "OrderType", allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('ORDERTYPE'), matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('ORDERTYPE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{OrderType}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "OrderType", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "OrderType", mapping: "OrderType", type: "string" }, { name: "Active", mapping: "Active", type: "boolean" }, { name: "ApplShift", mapping: "ApplShift", type: "boolean" }, { name: "ARDocType", mapping: "ARDocType", type: "string" }, { name: "AutoPromotion", mapping: "AutoPromotion", type: "int" }, { name: "BO", mapping: "BO", type: "boolean" }, { name: "DaysToKeep", mapping: "DaysToKeep", type: "int" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "DfltCustID", mapping: "DfltCustID", type: "string" }, { name: "DiscType", mapping: "DiscType", type: "string" }, { name: "INDocType", mapping: "INDocType", type: "string" }, { name: "SalesType", mapping: "SalesType", type: "string" }, { name: "RequiredVATInvcNbr", mapping: "RequiredVATInvcNbr", type: "int" }, { name: "ShippingReport", mapping: "ShippingReport", type: "string" }, { name: "TaxFee", mapping: "TaxFee", type: "boolean" }, { name: "ManualDisc", mapping: "ManualDisc", type: "boolean" }] }), storeId: "cboOrderTypeOM10100_pcOrderType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "param1": App.txtBranchID.getValue(), "param2": HQ.userName, "procName": "OM10100_pcOrderType", "procParam": "@LangID,@BranchID,@UserName,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: cboOrderType_Change }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'OrderType,Descr') } } } }, { id: "txtInvcNbr", width: 240, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtInvcNote.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('INVCNBR'), labelWidth: 105, name: "InvcNbr", dataIndex: "InvcNbr", enforceMaxLength: true, maxLength: 30, listeners: { blur: { fn: txtInvcNbr_Blur }, focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "cboOrderNbr", width: 260, xtype: "combobox", keyMap: { binding: { handler: function () { App.cboCustID.focus(); }, key: 13 } }, fieldLabel: HQ.common.getLang('ORDERNBR'), name: "OrderNbr", dataIndex: "OrderNbr", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, displayField: "OrderNbr", forceSelection: true, listConfig: { height: 500, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<table style='width:650px !important'>", "<tr>", "<th>" + HQ.common.getLang('ORDERNBR') + "</th>", "<th>" + HQ.common.getLang('ORDERDATE') + "</th>", "<th>" + HQ.common.getLang('CUSTNAME') + "</th>", "<th>" + HQ.common.getLang('LTTCONTRACTNBR') + "</th>", "<th>" + HQ.common.getLang('ADDRESS') + "</th>", "<th>" + HQ.common.getLang('ORDERPDA') + "</th>", "<th>" + HQ.common.getLang('CUSTID') + "</th>", "<th>" + HQ.common.getLang('SLSPERID') + "</th>", "<th>" + HQ.common.getLang('STATUS') + "</th>", "</tr>", "</tpl>", "<tr class='x-boundlist-item'>", "<td style='width:100px;'>{OrderNbr}</td>", "<td style='width:100px;'>{OrderDate:date('" + HQ.formatDateJS + "')}</td>", "<td style='width:150px;'>{CustName}</td>", "<td style='width:100px;'>{LTTContractNbr}</td>", "<td style='width:100px;'>{Addr1}</td>", "<td style='width:100px;'>{OrigOrderNbr}</td>", "<td>{CustID}</td>", "<td>{SlsPerID}</td>", "<td>{StatusDescr}</td>", "</tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</tpl>", "</tpl>"] }), itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, minChars: 1, pageSize: 20, queryDelay: 1000, valueField: "OrderNbr", store: "stoOrder", listeners: { focus: { fn: function (item) { HQ.focus = 'order' } }, change: { fn: cboOrderNbr_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } defaultOnNew(); } }, expand: { fn: function (item) { App.cboOrderNbr.store.reload(); } } } }, { id: "cboHandle", width: 280, xtype: "combobox", keyMap: { binding: { handler: function () { App.cboCustID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('HANDLE'), labelAlign: "right", labelWidth: 120, name: "Handle", allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('HANDLE'), matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboHandleOM10100_pcHandle", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.cboStatus.getValue(), "param1": HQ.langID, "param2": App.txtBranchID.getValue(), "param3": HQ.userName, "param4": App.cboOrderType.getValue(), "procName": "OM10100_pcHandle", "procParam": "@Status,@LangID,@BranchID,@UserName,@OrderType,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtBranchID", tag: "X", width: 260, xtype: "textfield", keyMap: { binding: { handler: function () { App.cboOrderNbr.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('BRANCHID'), labelWidth: 110, name: "BranchID", readOnly: true, allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('BRANCHID'), enforceMaxLength: true, maxLength: 30, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtInvcNote", width: 240, xtype: "textfield", keyMap: { binding: { handler: function () { App.cboOrderNbr.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('INVCNOTE'), labelWidth: 105, name: "InvcNote", dataIndex: "InvcNote", enforceMaxLength: true, maxLength: 30, listeners: { blur: { fn: txtInvcNote_Blur }, focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { xtype: "container", items: [{ id: "cboCustID", tag: "X", width: 225, xtype: "textfield", fieldLabel: HQ.common.getLang('CUSTID'), name: "CustID", dataIndex: "CustID", readOnly: true, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: cboCustID_Change } } }, { id: "btnFindCust", width: 30, xtype: "button", iconCls: "#Find", listeners: { click: { fn: btnFindCust_Click } } }], layout: "hbox" }, { id: "cboStatus", width: 280, xtype: "combobox", fieldLabel: HQ.common.getLang('STATUS'), labelAlign: "right", labelWidth: 120, name: "Status", dataIndex: "Status", allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('STATUS'), matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboStatusOM10100_pcStatus", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM10100_pcStatus", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: cboStatus_Change }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtCustAddr", width: 500, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtOrderDate.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ADDRESSCUST'), labelWidth: 110, name: "CustAddr", dataIndex: "CustAddr", allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('ADDRESSCUST'), listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtCustName", width: 540, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtOrderDate.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('CUSTNAME'), name: "CustName", dataIndex: "CustName", blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('CUSTNAME'), listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtRemark", width: 500, xtype: "textfield", fieldLabel: HQ.common.getLang('REMARK'), labelWidth: 110, name: "Remark", dataIndex: "Remark", blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('REMARK'), enforceMaxLength: true, maxLength: 200, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtCodeHT", width: 260, xtype: "textfield", fieldLabel: HQ.common.getLang('CODEHT'), name: "LTTContractNbr", dataIndex: "LTTContractNbr", blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('CODEHT'), enforceMaxLength: true, maxLength: 30 }], layout: "hbox" }], layout: "vbox" }, { id: "tabInfo", xtype: "tabpanel", region: "center", items: [{ id: "itmDetail", height: 142, padding: "5 0 0 0", region: "north", items: [{ border: false, region: "north", autoScroll: true, items: [{ xtype: "fieldcontainer", items: [{ id: "txtOrderDate", width: 280, xtype: "datefield", keyMap: { binding: { handler: function () { App.txtFreightAmt.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ORDERDATE'), labelAlign: "right", labelWidth: 120, name: "OrderDate", dataIndex: "OrderDate", allowBlank: false, blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('TRANDATE'), format: HQ.formatDateJS, maxValue: new Date(2100, 0, 1), minValue: new Date(2000, 0, 1), submitFormat: "m/d/Y", listeners: { focus: { fn: function (item) { HQ.focus = 'batch'; } }, change: { fn: txtOrderDate_Change } } }, { id: "txtVolDiscPct", tag: "X", margin: "0 0 0 5", width: 260, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtOrdDiscAmt.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('MANUALVOLDISCAMT'), labelAlign: "right", labelWidth: 180, name: "ManualDiscPct", dataIndex: "ManualDiscPct", readOnly: true, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: txtVolDiscPct_Change } } }, { id: "txtOrdDiscAmt", tag: "X", margin: "0 0 0 5", width: 85, xtype: "numberfield", keyMap: { binding: { handler: function () { App.cboOrderType.focus(true); }, key: 13 } }, name: "ManualDiscAmt", dataIndex: "ManualDiscAmt", readOnly: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: txtOrdDiscAmt_Change } } }, { id: "txtTxblAmt", width: 250, xtype: "numberfield", fieldLabel: HQ.common.getLang('TOTITEMAMT'), labelAlign: "right", labelWidth: 130, name: "TxblAmt", dataIndex: "TxblAmt", decimalPrecision: 0, decimalSeparator: ".", listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtFreightAmt", hidden: true, width: 280, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtMiscAmt.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('FRTMISC'), labelAlign: "right", labelWidth: 120, name: "FreightAmt", dataIndex: "FreightAmt", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: txtFreightAmt_Change } } }, { id: "cboSlsPerID", width: 280, xtype: "combobox", keyMap: { binding: { handler: function () { App.cboDeliveryID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('SLSPERID'), labelAlign: "right", labelWidth: 120, name: "SlsPerID", dataIndex: "SlsPerID", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('SLSPERID'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "SlsperID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SLSPERID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SlsperID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SlsperID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SlsperID", mapping: "SlsperID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "DeliveryID", mapping: "DeliveryID", type: "string" }, { name: "DiscSite", mapping: "DiscSite", type: "string" }, { name: "OMSite", mapping: "OMSite", type: "string" }] }), storeId: "cboSlsPerIDOM10100_pcSalesPerson", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": App.cboOrderType.getValue(), "param2": HQ.langID, "param3": HQ.cpnyID, "param4": HQ.userName, "procName": "OM10100_pcSalesPerson", "procParam": "@BranchID,@OrderType,@LangID,@CpnyID,@UserName,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: cboSlsPerID_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SlsperID,Name') } } } }, { id: "txtVolDiscAmt", margin: "0 0 0 5", width: 260, xtype: "numberfield", fieldLabel: HQ.common.getLang('VOL/LINEDISC'), labelAlign: "right", labelWidth: 180, name: "VolDiscAmt", dataIndex: "VolDiscAmt", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtCuryLineDiscAmt", margin: "0 0 0 5", width: 85, xtype: "numberfield", name: "CuryLineDiscAmt", dataIndex: "CuryLineDiscAmt", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtCuryTaxAmt", width: 250, xtype: "numberfield", fieldLabel: HQ.common.getLang('TOTTAX'), labelAlign: "right", labelWidth: 130, name: "CuryTaxAmt", dataIndex: "CuryTaxAmt", decimalPrecision: 0, decimalSeparator: ".", listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtSOFeeTot", hidden: true, width: 200, xtype: "numberfield", fieldLabel: HQ.common.getLang('SOFEE/MISCCHARGES'), labelAlign: "right", labelWidth: 120, name: "SOFeeTot", dataIndex: "SOFeeTot", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtMiscAmt", hidden: true, margin: "0 0 0 5", width: 75, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtIssueNumber.focus(true); }, key: 13 } }, name: "MiscAmt", dataIndex: "MiscAmt", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: txtMiscAmt_Change } } }, { id: "cboDeliveryID", width: 280, xtype: "combobox", keyMap: { binding: { handler: function () { App.txtVolDiscPct.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('DELIVERYID'), labelAlign: "right", labelWidth: 120, name: "DeliveryID", dataIndex: "DeliveryID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "SlsperID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SLSPERID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SlsperID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SlsperID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SlsperID", mapping: "SlsperID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }] }), storeId: "cboDeliveryIDOM10100_pcDeliveryID", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "procName": "OM10100_pcDeliveryID", "procParam": "@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SlsperID,Name') } } } }, { id: "txtRewardAmt", tag: "X", margin: "0 0 0 5", width: 350, xtype: "numberfield", fieldLabel: HQ.common.getLang('REWARDAMT'), labelAlign: "right", labelWidth: 180, name: "RewardAmt", dataIndex: "RewardAmt", readOnly: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: getTotalAmt } } }, { id: "txtCuryOrdAmt", width: 250, xtype: "numberfield", fieldLabel: HQ.common.getLang('TOTAL'), labelAlign: "right", labelWidth: 130, name: "CuryOrdAmt", dataIndex: "CuryOrdAmt", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: getTotalAmt } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtIssueNumber", hidden: true, width: 200, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtOrderNo.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ISSUENBR'), labelAlign: "right", labelWidth: 120, name: "IssueNumber", dataIndex: "IssueNumber", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtOrderNo", hidden: true, margin: "0 0 0 5", width: 75, xtype: "numberfield", keyMap: { binding: { handler: function () { App.cboMarkOrder.focus(true); }, key: 13 } }, name: "OrderNo", dataIndex: "OrderNo", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "chkDoNotCalDisc", margin: "0 0 0 125", width: 200, xtype: "checkboxfield", keyMap: { binding: { handler: function () { App.chkCreditHold.focus(true); }, key: 13 } }, name: "DoNotCalDisc", dataIndex: "DoNotCalDisc", boxLabel: HQ.common.getLang('DONOTCALCDISC'), inputValue: "App.chkDoNotCalDisc", listeners: { focus: { fn: function (item) { HQ.focus = 'batch'; } } } }, { id: "txtOrdQty", margin: "0 0 0 -40", width: 350, xtype: "numberfield", fieldLabel: HQ.common.getLang('QUANTITYTOTAL'), labelAlign: "right", labelWidth: 180, name: "OrdQty", dataIndex: "OrdQty", decimalPrecision: 0, decimalSeparator: ".", listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "cboMarkOrder", hidden: true, margin: "0 0 0 5", width: 200, xtype: "combobox", keyMap: { binding: { handler: function () { App.cboSlsPerID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('OM10100_MARKORDER'), labelAlign: "right", labelWidth: 80, name: "StationID", dataIndex: "StationID", blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('ORDERNBR'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "OrderNbr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('ORDERNBR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('REMAINDEBTPOINT') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{OrderNbr}</td><td style='min-width: 100px !important;'>{RemainDebtPoint}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "OrderNbr", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "OrderNbr", mapping: "OrderNbr", type: "string" }, { name: "RemainDebtPoint", mapping: "RemainDebtPoint", type: "float" }, { name: "OrigDebtPoint", mapping: "OrigDebtPoint", type: "float" }] }), storeId: "cboMarkOrderOM10100_pcMarkOrder", readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": App.cboOrderNbr.getValue(), "param2": App.cboCustID.getValue(), "param3": HQ.langID, "param4": HQ.cpnyID, "param5": HQ.userName, "procName": "OM10100_pcMarkOrder", "procParam": "@BranchID,@OrderNbr,@CustID,@LangID,@CpnyID,@UserName,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'OrderNbr,RemainDebtPoint') } } } }, { id: "txtCuryLineAmt", hidden: true, margin: "0 0 0 5", xtype: "numberfield", name: "CuryLineAmt", dataIndex: "CuryLineAmt", decimalSeparator: ".", minValue: 0.0 }, { id: "txtTotAmt", tag: "X", margin: "0 0 0 0", width: 250, xtype: "numberfield", fieldLabel: HQ.common.getLang('TOTAMT'), labelAlign: "right", labelWidth: 130, name: "TotAmt", readOnly: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtSalesMark", tag: "X", hidden: true, width: 200, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtPromoMark.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('OM10100SLSPROMOMARK'), labelAlign: "right", labelWidth: 120, name: "SalesMark", dataIndex: "SalesMark", readOnly: true, decimalPrecision: 1, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "txtPromoMark", tag: "X", hidden: true, margin: "0 0 0 5", width: 75, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtRewardAmt.focus(true); }, key: 13 } }, name: "PromoMark", dataIndex: "PromoMark", readOnly: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } } } }, { id: "chkCreditHold", margin: "0 0 0 125", width: 200, xtype: "checkboxfield", name: "CreditHold", dataIndex: "CreditHold", boxLabel: HQ.common.getLang('CREDITHOLD'), inputValue: "App.chkCreditHold", listeners: { focus: { fn: function (item) { HQ.focus = 'batch'; } } } }, { id: "txtDocBal", tag: "X", margin: "0 0 0 -40", width: 350, xtype: "numberfield", fieldLabel: HQ.common.getLang('OM10100DOCBAL'), labelAlign: "right", labelWidth: 160, name: "txtDocBal", decimalPrecision: 0, decimalSeparator: "." }], layout: "hbox" }], layout: "vbox" }, { region: "center", items: [{ id: "grdOrdDet", border: true, border: "1 0 0 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1 }], xtype: "grid", region: "center", columns: { items: [{ maxWidth: 100, width: 40, xtype: "rownumberer", listeners: { afterrender: { fn: function (item) { this.resizable = true } } } }, { id: "colBOType", width: 120, dataIndex: "BOType", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetBOType", xtype: "combobox", labelWidth: 130, submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDetBOTypeOM10100_pcBOType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM10100_pcBOType", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderBOType, text: HQ.common.getLang('TYPE') }, { id: "colBarCode", width: 120, dataIndex: "BarCode", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetBarCode", xtype: "combobox", labelWidth: 90, submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "BarCode", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('BARCODE') + "</th><th>" + HQ.common.getLang('INVTID') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{BarCode}</td><td>{InvtID}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, valueField: "BarCode", store: "stoInvt", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('BARCODE') }, { id: "colInvtID", width: 120, dataIndex: "InvtID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetInvtID", xtype: "combobox", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "InvtID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('INVTID') + "</th><th>" + HQ.common.getLang('DESCR') + "</th><th>" + HQ.common.getLang('DESCR1') + "</th><th>" + HQ.common.getLang('COLOR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{InvtID}</td><td>{Descr}</td><td>{Descr1}</td><td>{Color}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 500, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "InvtID", store: "stoInvt", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(App.cboDetInvtID, 'InvtID,Descr,Descr1,Color') } } } } }, {})), text: HQ.common.getLang('INVTID') }, { id: "colDescr", minWidth: 120, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { id: "colSlsUnit", width: 100, dataIndex: "SlsUnit", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetUnitDesc", xtype: "combobox", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], displayField: "FromUnit", queryMode: "local", valueField: "FromUnit", store: "stoUnit", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('UNIT') }, { id: "colSiteID", width: 120, dataIndex: "SiteID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetSiteID", xtype: "combobox", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "SiteID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SITEID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SiteID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SiteID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SiteID", mapping: "SiteID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "CpnyID", mapping: "CpnyID", type: "string" }] }), storeId: "cboDetSiteIDOM10100_pcSite", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "param1": App.cboOrderType.getValue(), "param2": App.cboSlsPerID.getValue(), "param3": HQ.langID, "param4": HQ.cpnyID, "param5": HQ.userName, "procName": "OM10100_pcSite", "procParam": "@BranchID,@OrderType,@SlsperID,@LangID,@CpnyID,@UserName,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SiteID,Name') } } } } }, {})), text: HQ.common.getLang('SITEID') }, { id: "colLineQty", style: "text-align:right", width: 75, xtype: "numbercolumn", align: "right", dataIndex: "LineQty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderQtyAmt, text: HQ.common.getLang('QTY') }, { width: 36, xtype: "componentcolumn", component: function () { return [{ xtype: "button", iconCls: "icon-item-lot", listeners: { click: { fn: btnLot_Click } } }]; } }, { id: "colSlsPrice", style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "SlsPrice", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "txtDetSlsPrice", xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 100000000.0, minValue: 0.0 } }, {})), renderer: renderQtyAmt, text: HQ.common.getLang('SALESPRICE') }, { id: "colLineAmt", style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "LineAmt", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "txtDetLineAmt", xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderQtyAmt, text: HQ.common.getLang('EXTCOST') }, { id: "colFreeItem", width: 80, xtype: "checkcolumn", dataIndex: "FreeItem", text: HQ.common.getLang('FREEITEM'), editable: true }, { id: "txtMark", style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "Mark", text: HQ.common.getLang('MARK'), format: "0,000.0" }, { width: 120, dataIndex: "POSM", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboPOSM", xtype: "combobox", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], displayField: "POSMID", queryMode: "local", valueField: "POSMID", store: "stoPOSMID", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('POSMID') }, { id: "colDiscCode", width: 120, dataIndex: "DiscCode", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetDiscCode", xtype: "combobox", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "DiscCode", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th>" + HQ.common.getLang('DISCCODE') + "</th><th>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td>{DiscCode}</td><td>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "DiscCode", store: "stoDisc", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('DISCCODE') }, { id: "colUnitRate", style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "UnitRate", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 1000.0, minValue: 0.0 } }, {})), text: HQ.common.getLang('CNVFACT') }, { id: "colQtyBO", style: "text-align:right", width: 90, xtype: "numbercolumn", align: "right", dataIndex: "QtyBO", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 10000.0, minValue: 0.0 } }, {})), renderer: renderQtyAmt, text: HQ.common.getLang('QTYBO') }, { id: "colDiscPct", style: "text-align:right", width: 90, xtype: "numbercolumn", align: "right", dataIndex: "DiscPct", renderer: renderQtyAmt2, text: HQ.common.getLang('DISCPCT') }, { id: "colDiscAmt", style: "text-align:right", width: 90, xtype: "numbercolumn", align: "right", dataIndex: "DiscAmt", renderer: renderQtyAmt, text: HQ.common.getLang('LINEDISCAMT') }, { id: "colManuDiscAmt", hidden: true, style: "text-align:right", width: 90, xtype: "numbercolumn", align: "right", dataIndex: "ManuDiscAmt", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 1000000000.0, minValue: 0.0 } }, {})), hideable: false, renderer: renderQtyAmt, text: HQ.common.getLang('MANUDISCAMT') }, { id: "colDocDiscAmt", style: "text-align:right", width: 90, xtype: "numbercolumn", align: "right", dataIndex: "SumDiscInvoice", renderer: renderQtyAmt, text: HQ.common.getLang('DOCDISCAMT') }, { id: "colSOFee", hidden: true, style: "text-align:right", width: 120, align: "right", dataIndex: "SOFee", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 1000000000.0, minValue: 0.0 } }, {})), hideable: false, renderer: renderQtyAmt, text: HQ.common.getLang('SOFEE') }, { id: "colBOCustID", width: 120, dataIndex: "BOCustID", text: HQ.common.getLang('BOCUSTID') }, { id: "colBudgetID1", width: 120, dataIndex: "BudgetID1", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetBudgetID", xtype: "combobox", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "BudgetID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('BUDGETID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{BudgetID}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "BudgetID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BudgetID", mapping: "BudgetID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDetBudgetIDOM10100_pcBudget", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.txtBranchID.getValue(), "procName": "OM10100_pcBudget", "procParam": "@branchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'BudgetID,Descr') } } } } }, {})), text: HQ.common.getLang('BUDGETID') }, { id: "colTaxCat", width: 120, dataIndex: "TaxCat", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetTaxCat", xtype: "combobox", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Code", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDetTaxCatOM10100_pcTaxCat", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "OM10100_pcTaxCat", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), text: HQ.common.getLang('TAXCAT') }, { id: "colTaxID", width: 120, dataIndex: "TaxID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDetTaxID", xtype: "netmulticombo", submitValue: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, displayField: "TaxID", forceSelection: true, valueField: "TaxID", store: "stoTax", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } } } } }, {})), text: HQ.common.getLang('TAXID') }, { id: "colOrigOrderNbr", width: 120, dataIndex: "OrigOrderNbr", text: HQ.common.getLang('ORIGORDERNBR') }, { width: 120, dataIndex: "DisplayID", text: HQ.common.getLang('OM10100DISPLAYID') }, { width: 120, dataIndex: "DisplayPeriodID", text: HQ.common.getLang('OM10100PERIODID') }] }, selModel: window.App.smlOrdDet = Ext.create("Ext.selection.RowModel", { proxyId: "smlOrdDet", selType: "rowmodel" }), store: "stoOrdDet", features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "BOType", type: "string" }, { dataIndex: "BarCode", type: "string" }, { dataIndex: "InvtID", type: "string" }, { dataIndex: "Descr", type: "string" }, { dataIndex: "FreeItem", type: "boolean" }, { dataIndex: "Mark", type: "numeric" }, { dataIndex: "POSM", type: "string" }, { dataIndex: "DiscCode", type: "string" }, { dataIndex: "SlsUnit", type: "string" }, { dataIndex: "UnitRate", type: "numeric" }, { dataIndex: "LineQty", type: "numeric" }, { dataIndex: "SiteID", type: "string" }, { dataIndex: "QtyBO", type: "numeric" }, { dataIndex: "SlsPrice", type: "numeric" }, { dataIndex: "DiscPct", type: "numeric" }, { dataIndex: "DiscAmt", type: "numeric" }, { dataIndex: "ManuDiscAmt", type: "numeric" }, { dataIndex: "DocDiscAmt", type: "numeric" }, { dataIndex: "LineAmt", type: "numeric" }, { dataIndex: "SOFee", type: "numeric" }, { dataIndex: "BOCustID", type: "string" }, { dataIndex: "BudgetID1", type: "string" }, { dataIndex: "TaxCat", type: "string" }, { dataIndex: "TaxID", type: "string" }, { dataIndex: "OrigOrderNbr", type: "string" }, { dataIndex: "DisplayID", type: "string" }, { dataIndex: "DisplayPeriodID", type: "string" }] })], viewConfig: { xtype: "gridview", allowCopy: true, trackOver: false, enableTextSelection: true }, listeners: { beforeedit: { fn: grdOrdDet_BeforeEdit }, edit: { fn: grdOrdDet_Edit }, selectionchange: { fn: grdOrdDet_SelectionChange }, select: { fn: function (item, record, index) { HQ.focus = 'det'; } }, validateedit: { fn: grdOrdDet_ValidateEdit } } }], layout: "fit" }], layout: "border", title: HQ.common.getLang('ORDINVCINFO') }, { id: "itmShipping", padding: "5 0 5 0", autoScroll: true, items: [{ xtype: "fieldcontainer", items: [{ id: "cboReasonCode", width: 500, xtype: "combobox", keyMap: { binding: { handler: function () { App.txtExpiryDate.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('REASONCD'), labelAlign: "right", labelWidth: 130, name: "ReasonCode", dataIndex: "ReasonCode", delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboReasonCodeOM10100_pcReasonCode", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "OM10100_pcReasonCode", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtOrigOrderNbr", width: 250, xtype: "textfield", fieldLabel: HQ.common.getLang('ORIGORDERNBR'), labelWidth: 130, name: "OrigOrderNbr", dataIndex: "OrigOrderNbr" }, { id: "txtOrderWeight", width: 250, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtUnitsShipped.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ORDWEIGHT'), labelAlign: "right", labelWidth: 130, name: "OrderWeight", dataIndex: "OrderWeight", decimalSeparator: "." }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtExpiryDate", width: 250, xtype: "datefield", keyMap: { binding: { handler: function () { App.txtShipDate.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('CANCELDATE'), labelAlign: "right", labelWidth: 130, name: "ExpiryDate", dataIndex: "ExpiryDate", format: HQ.formatDateJS, submitFormat: "m/d/Y" }, { id: "txtUnitsShipped", width: 250, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtFreightCost.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('UNITSHIPPED'), labelAlign: "right", labelWidth: 130, name: "UnitsShipped", decimalSeparator: "." }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtShipDate", width: 250, xtype: "datefield", keyMap: { binding: { handler: function () { App.txtARDocDate.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('SHIPDATE'), labelAlign: "right", labelWidth: 130, name: "ShipDate", dataIndex: "ShipDate", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('SHIPDATE'), format: HQ.formatDateJS, submitFormat: "m/d/Y" }, { id: "txtFreightCost", width: 250, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtFreightAllocAmt.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('FREIGHTCOST'), labelAlign: "right", labelWidth: 130, name: "FreightCost", dataIndex: "FreightCost", decimalSeparator: ".", minValue: 0.0 }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtARDocDate", width: 250, xtype: "datefield", keyMap: { binding: { handler: function () { App.cboTerms.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('INVCDATE'), labelAlign: "right", labelWidth: 130, name: "ARDocDate", dataIndex: "ARDocDate", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('INVCDATE'), format: HQ.formatDateJS, submitFormat: "m/d/Y" }, { id: "txtFreightAllocAmt", width: 250, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtPremFreightAmt.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('FREIGHTALLOCAMT'), labelAlign: "right", labelWidth: 130, name: "FreightAllocAmt", decimalSeparator: ".", minValue: 0.0 }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtARRefNbr", width: 250, xtype: "textfield", fieldLabel: HQ.common.getLang('REFNBR'), labelWidth: 130, name: "ARRefNbr", dataIndex: "ARRefNbr" }, { id: "txtPremFreightAmt", width: 250, xtype: "numberfield", keyMap: { binding: { handler: function () { App.txtCustOrderNbr.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('PREMFREIGHTAMT'), labelAlign: "right", labelWidth: 130, name: "PremFreightAmt", dataIndex: "PremFreightAmt", decimalSeparator: "." }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtLastInvcNbr", width: 250, xtype: "textfield", fieldLabel: HQ.common.getLang('LASTINVCNBR'), labelWidth: 130, name: "LastInvcNbr", dataIndex: "LastInvcNbr" }, { id: "txtCustOrderNbr", width: 250, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtCmmnPct.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('CUSTORDERNBR'), labelWidth: 130, name: "CustOrderNbr", dataIndex: "CustOrderNbr" }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "cboTerms", width: 250, xtype: "combobox", keyMap: { binding: { handler: function () { App.txtOrderWeight.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('TERM'), labelAlign: "right", labelWidth: 130, name: "Terms", dataIndex: "Terms", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('TERM'), matchFieldWidth: false, delimiter: ",", displayField: "TermsID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('TERMSID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{TermsID}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "TermsID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "TermsID", mapping: "TermsID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboTermsOM10100_pcTerms", autoLoad: true, readParameters: function (operation) { return { apply: { "procName": "OM10100_pcTerms", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'TermsID,Descr') } } } }, { id: "txtCmmnPct", width: 250, xtype: "numberfield", keyMap: { binding: { handler: function () { App.cboReasonCode.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('CMMNPCT'), labelAlign: "right", labelWidth: 130, name: "CmmnPct", dataIndex: "CmmnPct", decimalSeparator: "." }], layout: "hbox" }, { xtype: "fieldcontainer", items: [{ id: "txtOrdFormat2", width: 500, xtype: "textfield", fieldLabel: HQ.common.getLang('OM10100ORDFORMAT2'), labelWidth: 130, name: "txtOrdFormat2", readOnly: true }], layout: "hbox" }], layout: "vbox", title: HQ.common.getLang('SHIPINFO') }, { id: "itmAddress", padding: "5 0 5 0", autoScroll: true, items: [{ id: "txtShipPriority", xtype: "hiddenfield", name: "ShipPriority", dataIndex: "ShipPriority" }, { id: "cboShiptoID", width: 300, xtype: "combobox", keyMap: { binding: { handler: function () { App.txtBillName.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('SHIPTOID'), labelAlign: "right", labelWidth: 130, name: "ShiptoID", dataIndex: "ShiptoID", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('SHIPTOID'), delimiter: ",", displayField: "ShipToId", forceSelection: true, queryMode: "local", valueField: "ShipToId", store: "stoShipToID", listeners: { focus: { fn: function (item) { HQ.focus = 'order'; } }, change: { fn: cboShiptoID_Change } } }, { padding: "5 10 0 10", xtype: "fieldcontainer", autoScroll: true, items: [{ minWidth: 400, padding: "0 10 5 10", xtype: "fieldset", items: [{ id: "txtBillName", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillAttn.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('NAME'), labelWidth: 110, name: "BillName", dataIndex: "BillName" }, { id: "txtBillAttn", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillAddrLine1.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ATTN'), labelWidth: 110, name: "BillAttn", dataIndex: "BillAttn" }, { id: "txtBillAddrLine1", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillAddrLine2.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ADDRESS1'), labelWidth: 110, name: "BillAddrLine1", dataIndex: "BillAddrLine1" }, { id: "txtBillAddrLine2", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillZip.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ADDRESS2'), labelWidth: 110, name: "BillAddrLine2", dataIndex: "BillAddrLine2" }, { id: "txtBillZip", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillPhone.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ZIP'), labelWidth: 110, name: "BillZip", dataIndex: "BillZip" }, { id: "txtBillPhone", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillFax.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('PHONE'), labelWidth: 110, name: "BillPhone", dataIndex: "BillPhone" }, { id: "txtBillFax", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillStateID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('FAX'), labelWidth: 110, name: "BillFax", dataIndex: "BillFax" }, { id: "txtBillStateID", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtBillCntryID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('STATE'), labelWidth: 110, name: "BillStateID", dataIndex: "BillStateID" }, { id: "txtBillCntryID", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtTaxRegNbr.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('COUNTRY'), labelWidth: 110, name: "BillCntryID", dataIndex: "BillCntryID" }, { id: "txtTaxRegNbr", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipName.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('TAXREGNBR'), labelWidth: 110, name: "TaxRegNbr", dataIndex: "TaxRegNbr" }], layout: "vbox", title: "<span style=\"font-size:12px;font-weight:bold;\">" + HQ.common.getLang('BILLING') + "</span>" }, { margin: "0 0 0 10", minWidth: 400, padding: "0 10 5 10", xtype: "fieldset", items: [{ id: "txtShipName", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipAttn.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('NAME'), labelWidth: 110, name: "ShipName", dataIndex: "ShipName" }, { id: "txtShipAttn", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipAddrLine1.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ATTN'), labelWidth: 110, name: "ShipAttn", dataIndex: "ShipAttn" }, { id: "txtShipAddrLine1", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipAddrLine2.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ADDRESS1'), labelWidth: 110, name: "ShipAddrLine1", dataIndex: "ShipAddrLine1" }, { id: "txtShipAddrLine2", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipZip.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ADDRESS2'), labelWidth: 110, name: "ShipAddrLine2", dataIndex: "ShipAddrLine2" }, { id: "txtShipZip", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipPhone.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('ZIP'), labelWidth: 110, name: "ShipZip", dataIndex: "ShipZip" }, { id: "txtShipPhone", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipFax.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('PHONE'), labelWidth: 110, name: "ShipPhone", dataIndex: "ShipPhone" }, { id: "txtShipFax", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipStateID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('FAX'), labelWidth: 110, name: "ShipFax", dataIndex: "ShipFax" }, { id: "txtShipStateID", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.txtShipCntryID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('STATE'), labelWidth: 110, name: "ShipStateID", dataIndex: "ShipStateID" }, { id: "txtShipCntryID", width: 480, xtype: "textfield", keyMap: { binding: { handler: function () { App.cboShiptoID.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('COUNTRY'), labelWidth: 110, name: "ShipCntryID", dataIndex: "ShipCntryID" }, { margin: "11 0 0 0", xtype: "netlabel" }], layout: "vbox", title: "<span style=\"font-size:12px;font-weight:bold;\">" + HQ.common.getLang('SHIPPING') + "</span>" }], layout: "hbox" }], layout: "anchor", title: HQ.common.getLang('ADDRESS') }, { id: "itmTax", anchor: "100% 100%", items: [{ id: "grdTaxTrans", xtype: "grid", anchor: "100% 50%", columns: { items: [{ xtype: "rownumberer" }, { width: 120, dataIndex: "LineRef", text: HQ.common.getLang('LINEREF') }, { width: 120, dataIndex: "TaxID", text: HQ.common.getLang('TAXID') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TaxRate", renderer: renderQtyAmt, text: HQ.common.getLang('TAXRATE') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TaxAmt", renderer: renderQtyAmt, text: HQ.common.getLang('TAXAMT') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TxblAmt", renderer: renderQtyAmt, text: HQ.common.getLang('TXBLAMT') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TaxLevel", renderer: renderQtyAmt, text: HQ.common.getLang('LEVEL') }] }, selModel: window.App.smlTaxTrans = Ext.create("Ext.selection.RowModel", { proxyId: "smlTaxTrans", selType: "rowmodel" }), store: "stoTaxTrans", viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }, { border: false, items: [{ margin: 5, xtype: "netlabel", anchor: "100%", text: HQ.common.getLang('TAXTOTAL') }], layout: { type: "vbox", align: "center" } }, { id: "grdTaxDoc", xtype: "grid", anchor: "100% 45%", columns: { items: [{ xtype: "rownumberer" }, { width: 120, dataIndex: "TaxID", text: HQ.common.getLang('TAXID') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TaxRate", renderer: renderQtyAmt, text: HQ.common.getLang('TAXRATE') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TaxAmt", renderer: renderQtyAmt, text: HQ.common.getLang('TAXAMT') }, { style: "text-align:left", width: 120, align: "right", dataIndex: "TxblAmt", renderer: renderQtyAmt, text: HQ.common.getLang('TXBLAMT') }] }, selModel: window.App.smlTaxDoc = Ext.create("Ext.selection.RowModel", { proxyId: "smlTaxDoc", selType: "rowmodel" }), store: "stoTaxDoc", viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }], layout: "anchor", title: HQ.common.getLang('TAX') }, { id: "itemDiscount", autoScroll: true, items: [{ id: "grdDisc", xtype: "grid", columns: { items: [{ xtype: "rownumberer" }, { dataIndex: "DiscID", text: HQ.common.getLang('DISCID') }, { dataIndex: "DiscSeq", text: HQ.common.getLang('DISCSEQ') }, { dataIndex: "DiscBreakLineRef", text: HQ.common.getLang('LINEREF') }, { dataIndex: "DiscType", text: HQ.common.getLang('TYPE') }, { style: "text-align:left", align: "right", dataIndex: "DiscAmt", renderer: renderQtyAmt, text: HQ.common.getLang('DISCAMT') }, { hidden: true, style: "text-align:left", width: 150, align: "right", dataIndex: "DisctblAmt", hideable: false, renderer: renderQtyAmt, text: HQ.common.getLang('DISCTBLAMT') }, { style: "text-align:left", align: "right", dataIndex: "DisctblQty", renderer: renderQtyAmt, text: HQ.common.getLang('OM10100QTY') }, { dataIndex: "FreeItemID", text: HQ.common.getLang('FREEITEMID') }, { style: "text-align:left", align: "right", dataIndex: "FreeItemQty", renderer: renderQtyAmt, text: HQ.common.getLang('FREEITEMQTY') }, { style: "text-align:left", align: "right", dataIndex: "OrigFreeItemQty", renderer: renderQtyAmt, text: HQ.common.getLang('ORIGFREEITEMQTY') }, { dataIndex: "SlsPerID", text: HQ.common.getLang('SLSPERID') }, { minWidth: 120, flex: 1, dataIndex: "UserOperationLog", text: HQ.common.getLang('USERLOG') }] }, selModel: window.App.smlOrdDisc = Ext.create("Ext.selection.RowModel", { proxyId: "smlOrdDisc", selType: "rowmodel" }), store: "stoOrdDisc", viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }], layout: "fit", title: HQ.common.getLang('DISCOUNT') }], layout: "border", activeTab: 0 }], layout: "border", bbar: { xtype: "toolbar", items: [{ xtype: "tbfill" }, { id: "lblQtyAvail", margin: "0 5 0 5", style: "text-align:right;", width: 300, xtype: "netlabel" }] }, tbar: { id: "toolbar", xtype: "toolbar", items: [{ id: "menuClickbtnFirst", iconCls: "#ResultsetFirst", tooltip: HQ.common.getLang('BTNFIRST'), listeners: { click: { fn: function (item, e) { menuClick('first'); } } } }, { id: "menuClickbtnPrev", iconCls: "#ResultsetPrevious", tooltip: HQ.common.getLang('BTNPREV'), listeners: { click: { fn: function (item, e) { menuClick('prev'); } } } }, { id: "menuClickbtnNext", iconCls: "#ResultsetNext", tooltip: HQ.common.getLang('BTNNEXT'), listeners: { click: { fn: function (item, e) { menuClick('next'); } } } }, { id: "menuClickbtnLast", iconCls: "#ResultsetLast", tooltip: HQ.common.getLang('BTNLAST'), listeners: { click: { fn: function (item, e) { menuClick('last'); } } } }, { id: "menuClickbtnRefresh", iconCls: "#ArrowRefresh", tooltip: HQ.common.getLang('BTNREFRESH'), listeners: { click: { fn: function (item, e) { menuClick('refresh'); } } } }, { xtype: "tbseparator" }, { id: "menuClickbtnNew", iconCls: "#Add", tooltip: HQ.common.getLang('BTNNEW'), listeners: { click: { fn: function (item, e) { menuClick('new'); } } } }, { id: "menuClickbtnSave", iconCls: "#Disk", tooltip: HQ.common.getLang('BTNSAVE'), listeners: { click: { fn: function (item, e) { menuClick('save'); } } } }, { id: "menuClickbtnDelete", iconCls: "#Delete", tooltip: HQ.common.getLang('BTNDELETE'), listeners: { click: { fn: function (item, e) { menuClick('delete'); } } } }, { id: "menuClickbtnPrint", iconCls: "#Printer", tooltip: HQ.common.getLang('BTNPRINT'), listeners: { click: { fn: function (item, e) { menuClick('print'); } } } }, { xtype: "tbseparator" }, { hidden: true, xtype: "filefield" }, { id: "btnBackOrder", iconCls: "#PageBack", tooltip: HQ.common.getLang('BACKORDER'), listeners: { click: { fn: btnBackOrder_Click } } }, { hidden: true, xtype: "filefield" }, { id: "btnSearchBackOrder", iconCls: "#CartRemove", tooltip: HQ.common.getLang('BACKORDER'), listeners: { click: { fn: btnSearchBackOrder_Click } } }, { id: "btnNote", iconCls: "#NoteEdit", tooltip: HQ.common.getLang('NOTE'), listeners: { click: { fn: btnNote_Click } } }, { id: "btnShowGift", hidden: true, iconCls: "#Ipod", tooltip: HQ.common.getLang('GIFT'), listeners: { click: { fn: btnShowGift_Click } } }, { id: "btnShowReward", hidden: true, iconCls: "#MoneyDollar", tooltip: HQ.common.getLang('OM10100REWARD'), listeners: { click: { fn: btnShowReward_Click } } }, { id: "btnImport", hidden: true, xtype: "filefield", iconCls: "#PageExcel", buttonConfig: { iconCls: "#PageExcel" }, buttonText: HQ.common.getLang('IMPORT'), buttonOnly: true, listeners: { change: { fn: btnImport_Click } } }, { id: "btnManualPromo", iconCls: "#UserEdit", tooltip: HQ.common.getLang('OM10100MANUALPROMO'), listeners: { click: { fn: btnManualPromo_Click } } }] }, trackResetOnLoad: true, waitMsgTarget: "", fieldDefaults: { labelAlign: "right", labelWidth: 120 }, listeners: { boxready: { fn: frmMain_BoxReady }, fieldchange: { fn: frmMain_FieldChange } } }], layout: "fit" }); Ext.create("Ext.window.Window", { id: "winDetail", height: 400, renderTo: Ext.getBody(), width: 600, items: [{ id: "grdDetail", border: false, plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: PopupwinDetail.grdDetail_beforeEdit }, validateedit: { fn: PopupwinDetail.grdDetail_validateEdit } } }], xtype: "grid", anchor: "100% -0", columns: { items: [{ xtype: "rownumberer", renderer: PopupwinDetail.renderRowNumberDetail }, { width: 120, dataIndex: "DiscType", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDiscType", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "DiscType", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDiscTypeOM10100_pcDiscType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM10100_pcDiscType", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } } }, {})), renderer: renderDiscType, text: HQ.common.getLang('DISCTYPE') }, { width: 120, dataIndex: "Code", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboCode", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "Code", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "DiscType", mapping: "DiscType", type: "string" }, { name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboCodeOM10100_pcCodeProgram", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM10100_pcCodeProgram", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, expand: { fn: PopupwinDetail.cboCode_expand }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } } }, {})), renderer: renderCodeProgram, text: HQ.common.getLang('CODEPROGRAM') }, { width: 120, dataIndex: "Descr", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "textfield", maxLength: 1 } }, {})), text: HQ.common.getLang('GIFTNAME') }, { style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "Qty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 10000.0, minValue: 0.0 } }, {})), text: HQ.common.getLang('QTY'), format: "##,###" }] }, selModel: window.App.smlDetail = Ext.create("Ext.selection.RowModel", { proxyId: "smlDetail", selType: "rowmodel" }), store: "stoEditDetail", viewConfig: { xtype: "gridview", trackOver: false, getRowClass: PopupwinDetail.grdDetail_RowClass } }], layout: "anchor", buttons: [{ id: "btnAddnew", text: HQ.common.getLang('ADDNEW'), listeners: { click: { fn: PopupwinDetail.btnAddnew_Click } } }, { id: "btnDelete", text: HQ.common.getLang('DELETE'), listeners: { click: { fn: PopupwinDetail.btnDelete_Click } } }, { id: "btnDetailOk", text: HQ.common.getLang('OK'), listeners: { click: { fn: PopupwinDetail.btnDetailOK_Click } } }], title: HQ.common.getLang('GIFT'), modal: true }); Ext.create("Ext.window.Window", { id: "winRewardAmt", height: 400, minHeight: 100, minWidth: 150, renderTo: Ext.getBody(), width: 600, items: [{ store: { model: Ext.define("App.mdlRewardAmt", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "DisplayID", type: "string" }, { name: "SlsperID", type: "string" }, { name: "CustID", type: "string" }, { name: "RewardAmt", type: "float" }, { name: "Descr", type: "string" }, { name: "BranchID", type: "string" }, { name: "Paid", type: "boolean" }] }), storeId: "stoRewardAmt", readParameters: function (operation) { return { apply: { "branchID": App.txtBranchID.getValue(), "slsperID": App.cboSlsPerID.getValue(), "custID": App.cboCustID.getValue(), "displayIDs": _displayIDs } }; }, serverProxy: { type: "ajax", url: "OM10100/GetRewardAmt" }, pageSize: 50, proxy: { type: 'memory' }, listeners: { beforeload: { fn: function (store, operation) { App.grdOrdDet.view.loadMask.disable(); } }, load: { fn: PopupwinReward.stoRewardAmt_Load } } }, id: "grdRewardAmt", border: true, border: "1 0 0 0", margin: "5 0 5 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: PopupwinReward.grdRewardAmt_beforeEdit } } }], xtype: "grid", anchor: "100% -25", columns: { items: [{ xtype: "rownumberer" }, { width: 40, xtype: "checkcolumn", align: "center", dataIndex: "Selected", editable: true }, { dataIndex: "DisplayID", text: HQ.common.getLang('DISPLAYID') }, { minWidth: 150, flex: 1, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { style: "text-align:right", xtype: "numbercolumn", align: "right", dataIndex: "RewardAmt", text: HQ.common.getLang('REWARDAMT'), format: "0,000" }] }, selModel: window.App.smlRewardAmt = Ext.create("Ext.selection.RowModel", { proxyId: "smlRewardAmt", selType: "rowmodel" }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "Selected", type: "boolean" }, { dataIndex: "Descr", type: "string" }, { dataIndex: "DisplayID", type: "string" }, { dataIndex: "RewardAmt", type: "numeric" }] })], viewConfig: { xtype: "gridview", trackOver: false } }], layout: "anchor", buttons: [{ id: "btnRewardExit", text: HQ.common.getLang('EXIT'), listeners: { click: { fn: function (item, e) { App.winRewardAmt.close() } } } }, { id: "btnRewardOK", text: HQ.common.getLang('OK'), listeners: { click: { fn: PopupwinReward.btnRewardOK_Click } } }], modal: true }); Ext.create("Ext.window.Window", { id: "winCustID", height: 350, renderTo: Ext.getBody(), width: 350, defaultButton: "btnSearch", items: [{ xtype: "form", items: [{ margin: "5 0 0 0", xtype: "container", region: "north", items: [{ id: "cboState", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('STATE'), labelAlign: "right", labelWidth: 130, name: "State", blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('STATE'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboStateOM10100_pcState", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM10100_pcState", "procParam": "@CpnyID,@Username,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: function (item, newValue, oldValue) { App.cboDistrict.store.reload(); } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }, { id: "cboDistrict", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('DISTRICT'), labelAlign: "right", labelWidth: 130, name: "District", blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('DISTRICT'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDistrictOM10100_pcDistrict", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "param3": App.cboState.getValue(), "procName": "OM10100_pcDistrict", "procParam": "@CpnyID,@Username,@LangID,@State,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }, { id: "cboClass", width: 300, xtype: "combobox", fieldLabel: HQ.common.getLang('CLASS'), labelAlign: "right", labelWidth: 130, name: "Class", blankText: HQ.common.getLang('INPUT') + ' ' + HQ.common.getLang('CLASS'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboClassOM10100_pcClass", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM10100_pcClass", "procParam": "@CpnyID,@Username,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }, { xtype: "container", items: [{ id: "txtKeySearch", width: 300, xtype: "textfield", fieldLabel: HQ.common.getLang('OM1010KEYSEARCH'), labelAlign: "right", labelWidth: 130 }, { id: "btnSearch", margin: "0 0 0 5", minWidth: 100, xtype: "button", iconCls: "#ArrowRefresh", text: HQ.common.getLang('SEARCH'), listeners: { click: { fn: btnSearch_Click } } }], layout: "hbox" }], layout: "vbox" }, { margin: "5 0 0 0", xtype: "container", region: "center", items: [{ store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "CustID", mapping: "CustID;150", type: "string" }, { name: "CustName", mapping: "CustName;250", type: "string" }, { name: "Addr1", mapping: "Addr1;150", type: "string" }, { name: "Addr2", mapping: "Addr2;150", type: "string" }, { name: "Terms", mapping: "Terms;150", type: "string" }, { name: "DfltShipToId", mapping: "DfltShipToId", type: "string" }, { name: "State", mapping: "State", type: "string" }, { name: "District", mapping: "District;150", type: "string" }] }), storeId: "grdCustIDOM10100_pgCust", type: "paging", readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "param3": App.txtBranchID.getValue(), "param4": App.cboState.getValue(), "param5": App.cboDistrict.getValue(), "param6": App.cboClass.getValue(), "param7": App.txtKeySearch.getValue(), "procName": "OM10100_pgCust", "procParam": "@CpnyID,@Username,@LangID,@BranchID,@State,@District,@ClassID,@KeySearch,", "sys": "False" } }; }, serverProxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, pageSize: 50, proxy: { type: 'pagingmemory' } }, id: "grdCustID", tag: "CustID;150", xtype: "grid", layout: "fit", bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "50", value: "50" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "grdCustIDOM10100_pgCust", hideRefresh: true }, columnLines: true, columns: { items: [{ xtype: "rownumberer" }, { width: 150, dataIndex: "CustID", text: HQ.common.getLang('CUSTID') }, { width: 250, dataIndex: "CustName", text: HQ.common.getLang('CUSTNAME') }, { width: 150, dataIndex: "Addr1", text: HQ.common.getLang('ADDR1') }, { width: 150, dataIndex: "Addr2", text: HQ.common.getLang('ADDR2') }, { width: 150, dataIndex: "Terms", text: HQ.common.getLang('TERMS') }, { dataIndex: "DfltShipToId", text: HQ.common.getLang('DFLTSHIPTOID') }, { dataIndex: "State", text: HQ.common.getLang('STATE') }, { width: 150, dataIndex: "District", text: HQ.common.getLang('DISTRICT') }] }, selModel: Ext.create("Ext.selection.CheckboxModel", { selType: "checkboxmodel", mode: "single", showHeaderCheckbox: false }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "CustID", type: "string" }, { dataIndex: "CustName", type: "string" }, { dataIndex: "Addr1", type: "string" }, { dataIndex: "Addr2", type: "string" }, { dataIndex: "Terms", type: "string" }, { dataIndex: "DfltShipToId", type: "string" }, { dataIndex: "State", type: "string" }, { dataIndex: "District", type: "string" }] })], listeners: { celldblclick: { fn: grdCustID_CellDblClick } } }], layout: "fit" }], layout: "border", waitMsgTarget: "", fieldDefaults: { labelAlign: "right", labelWidth: 150 } }], layout: "fit", title: HQ.common.getLang('SEARCHCUSTID'), maximizable: false, maximized: true }); Ext.net.ResourceMgr.registerIcon(["ArrowRefresh", "Disk", "ApplicationHome", "ResultsetFirst", "ResultsetPrevious", "ResultsetNext", "ResultsetLast", "Add", "Delete", "Printer", "PageBack", "CartRemove", "NoteEdit", "Ipod", "MoneyDollar", "PageExcel", "UserEdit", "Find"]); });
