Ext.net.ResourceMgr.init({ isMVC: true }); Ext.onReady(function () { Ext.ns("App.direct"); Ext.apply(App.direct, { OM10100GetNote: function (branchID, orderNbr, config) { return Ext.net.DirectMethod.request("OM10100GetNote", Ext.applyIf(config || {}, { params: { branchID: branchID, orderNbr: orderNbr }, url: "/OM10100/OM10100GetNote" })); }, OM10100UpdateNote: function (branchID, orderNbr, noteText, config) { return Ext.net.DirectMethod.request("OM10100UpdateNote", Ext.applyIf(config || {}, { params: { branchID: branchID, orderNbr: orderNbr, noteText: noteText }, url: "/OM10100/OM10100UpdateNote" })); }, PO10200POPrice: function (branchID, invtID, Unit, podate, orderDate, config) { return Ext.net.DirectMethod.request("PO10200POPrice", Ext.applyIf(config || {}, { params: { branchID: branchID, invtID: invtID, Unit: Unit, podate: podate, orderDate: orderDate }, url: "/PO10200/PO10200POPrice" })); }, PO10200ItemSitePrice: function (branchID, invtID, siteID, config) { return Ext.net.DirectMethod.request("PO10200ItemSitePrice", Ext.applyIf(config || {}, { params: { branchID: branchID, invtID: invtID, siteID: siteID }, url: "/PO10200/PO10200ItemSitePrice" })); }, PO10200ItemSiteQty: function (branchID, invtID, siteID, batNbr, rcptNbr, lineRef, whseLoc, showWhseLoc, config) { return Ext.net.DirectMethod.request("PO10200ItemSiteQty", Ext.applyIf(config || {}, { params: { branchID: branchID, invtID: invtID, siteID: siteID, batNbr: batNbr, rcptNbr: rcptNbr, lineRef: lineRef, whseLoc: whseLoc, showWhseLoc: showWhseLoc }, url: "/PO10200/PO10200ItemSiteQty" })); }, INNumberingLot: function (invtID, tranDate, getType, config) { return Ext.net.DirectMethod.request("INNumberingLot", Ext.applyIf(config || {}, { params: { invtID: invtID, tranDate: tranDate, getType: getType }, url: "/PO10200/INNumberingLot" })); }, GetPO10200_pdWhseLoc: function (siteID, branchID, invtID, config) { return Ext.net.DirectMethod.request("GetPO10200_pdWhseLoc", Ext.applyIf(config || {}, { params: { siteID: siteID, branchID: branchID, invtID: invtID }, url: "/PO10200/GetPO10200_pdWhseLoc" })); }, CallMessageTimeOut: function (config) { return Ext.net.DirectMethod.request("CallMessageTimeOut", Ext.applyIf(config || {}, { url: "HQ/CallMessageTimeOut" })); }, CallMessage: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessage", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessage" })); }, CallMessageArray: function (code, parm, fn, config) { return Ext.net.DirectMethod.request("CallMessageArray", Ext.applyIf(config || {}, { params: { code: code, parm: parm, fn: fn }, url: "HQ/CallMessageArray" })); }, PlayMedia: function (PathVideo, fileVideo, config) { return Ext.net.DirectMethod.request("PlayMedia", Ext.applyIf(config || {}, { params: { PathVideo: PathVideo, fileVideo: fileVideo }, url: "HQ/PlayMedia" })); } }); Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature" }); Ext.create("Ext.ux.ProgressBarPager", {}); window.App.stoChoice = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlChoice", { extend: "Ext.data.Model", fields: [{ name: "Sel", type: "boolean" }, { name: "Unit", type: "string" }, { name: "FreeItemID", type: "string" }, { name: "FreeSiteID", type: "string" }, { name: "FreeItemUnit", type: "string" }, { name: "FreeItemQty", type: "float" }, { name: "FreeItemDescr", type: "string" }, { name: "FreeItemQtyBase", type: "float" }, { name: "BudgetID", type: "string" }, { name: "GroupItem", type: "string" }, { name: "Priority", type: "int" }, { name: "MaxQtyInGroup", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "PromoPrice", type: "float" }, { name: "tempLineAmt", type: "float" }, { name: "SiteType", type: "string" }, { name: "IsSetPrioritySite", type: "boolean" }, { name: "FreeItemCnvFact", type: "float" }, { name: "FeeItemUnitMultDiv", type: "string" }, { name: "TotalBudget", type: "float" }, { name: "ToTalQtyFreeItem", type: "float" }, { name: "CnvFact", type: "float" }, { name: "Index", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "DiscLineRef", type: "string" }, { name: "Descr", type: "string" }, { name: "DiscDescr", type: "string" }, { name: "Qty", type: "float" }, { name: "MaxQty", type: "float" }, { name: "InvtID", type: "string" }, { name: "DonateGroupProduct", type: "boolean" }, { name: "LineRef", type: "string" }, { name: "SubBreakType", type: "string" }, { name: "BreakBoundType", type: "string" }, { name: "LevelID", type: "float" }, { name: "PromoAmt", type: "float" }, { name: "ConvertDiscAmtToFreeItem", type: "boolean" }, { name: "PromoBonusAmt", type: "float" }, { name: "PromoLineAmt", type: "float" }, { name: "GroupLineRef", type: "string" }] }), storeId: "stoChoice", proxy: { type: 'memory' } }); window.App.stoChoiceHeader = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlChoiceHeader", { extend: "Ext.data.Model", fields: [{ name: "Index", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscSeq", type: "string" }, { name: "DiscLineRef", type: "string" }, { name: "Descr", type: "string" }, { name: "DiscDescr", type: "string" }, { name: "Qty", type: "float" }, { name: "MaxQty", type: "float" }, { name: "InvtID", type: "string" }, { name: "DonateGroupProduct", type: "boolean" }, { name: "LineRef", type: "string" }, { name: "SubBreakType", type: "string" }, { name: "BreakBoundType", type: "string" }, { name: "LevelID", type: "float" }, { name: "PromoAmt", type: "float" }, { name: "ConvertDiscAmtToFreeItem", type: "boolean" }, { name: "PromoBonusAmt", type: "float" }, { name: "PromoLineAmt", type: "float" }, { name: "GroupLineRef", type: "string" }] }), storeId: "stoChoiceHeader", proxy: { type: 'memory' } }); window.App.stoDet4Save = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlDet4Save", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "InvtID", type: "string" }, { name: "Descr", type: "string" }, { name: "FreeItem", type: "boolean" }, { name: "LineQty", type: "float" }, { name: "QtyShip", type: "float" }, { name: "QtyShipped", type: "float" }, { name: "Qty", type: "float" }, { name: "SlsUnit", type: "string" }, { name: "SlsPrice", type: "float" }, { name: "DiscAmt", type: "float" }, { name: "LineAmt", type: "float" }, { name: "DiscCode", type: "string" }, { name: "SiteID", type: "string" }, { name: "DiscType", type: "string" }, { name: "TaxID", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscPct", type: "float" }, { name: "Mark", type: "float" }, { name: "MMark", type: "float" }, { name: "QtyShipD", type: "float" }, { name: "QtyERP", type: "float" }, { name: "POLineRef", type: "string" }, { name: "PODiscID", type: "string" }, { name: "PODiscSeq", type: "string" }, { name: "DisplayID", type: "string" }, { name: "DisplayPeriodID", type: "string" }, { name: "Qty1", type: "float" }, { name: "Qty2", type: "float" }, { name: "LineQty1", type: "float" }, { name: "LineQty2", type: "float" }, { name: "QtyShip1", type: "float" }, { name: "QtyShip2", type: "float" }, { name: "QtyShipped1", type: "float" }, { name: "QtyShipped2", type: "float" }, { name: "QtyShipD1", type: "float" }, { name: "QtyShipD2", type: "float" }, { name: "QtyERP1", type: "float" }, { name: "QtyERP2", type: "float" }, { name: "DfltSOUnit", type: "string" }, { name: "ClassID", type: "string" }, { name: "UnitRate1", type: "float" }, { name: "UnitMultDiv1", type: "string" }, { name: "StkUnit", type: "string" }, { name: "SiteType", type: "string" }, { name: "GroupDiscAmt1", type: "float" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "UnitWeight", type: "float" }, { name: "SOFee", type: "float" }, { name: "BudgetID1", type: "string" }, { name: "BudgetID2", type: "string" }, { name: "DiscPct1", type: "float" }, { name: "DiscPct2", type: "float" }, { name: "DiscID1", type: "string" }, { name: "DiscID2", type: "string" }, { name: "DiscSeq1", type: "string" }, { name: "DiscSeq2", type: "string" }, { name: "DiscAmt1", type: "float" }, { name: "DiscAmt2", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "GroupDiscPct1", type: "float" }, { name: "GroupDiscPct2", type: "float" }, { name: "GroupDiscID1", type: "string" }, { name: "GroupDiscID2", type: "string" }, { name: "GroupDiscSeq1", type: "string" }, { name: "GroupDiscSeq2", type: "string" }, { name: "GroupDiscAmt2", type: "float" }, { name: "POSM", type: "string" }, { name: "StkItem", type: "int" }, { name: "StkWt", type: "float" }, { name: "ManuDiscAmt", type: "float" }, { name: "ManuDiscPct", type: "float" }] }), storeId: "stoDet4Save", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "orderNbr": _selOrderNbr } }; }, serverProxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, url: "OM20500/GetDet", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, proxy: { type: 'memory' }, listeners: { load: { fn: Store.stoDet4Save_load } } }); window.App.stoDoc = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlDoc", { extend: "Ext.data.Model", fields: [{ name: "DocBranchID", type: "string" }, { name: "DocNbr", type: "string" }, { name: "DocBal", type: "float" }, { name: "DocBalApproved", type: "float" }, { name: "DocBalPay", type: "float" }, { name: "OrdNbr", type: "string" }, { name: "BatNbr", type: "string" }, { name: "RefNbr", type: "string" }, { name: "CustId", type: "string" }, { name: "DocDate", type: "date", dateFormat: "c" }, { name: "DocDesc", type: "string" }, { name: "DocType", type: "string" }, { name: "Rlsed", type: "int" }, { name: "SlsperId", type: "string" }, { name: "Editable", type: "boolean" }, { name: "DocBalPaid", type: "float" }, { name: "MaxDocBal", type: "float" }] }), storeId: "stoDoc", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "slsperID": App.txtSlsperId.getValue(), "custID": App.cboCustID.getValue(), "status": App.cboStatus.getValue().join(','), "startDate": Ext.Date.format(App.dteStartDate.getValue(), 'm-d-Y'), "endDate": Ext.Date.format(App.dteEndDate.getValue(), 'm-d-Y') } }; }, serverProxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "OM20500/GetDoc", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, proxy: { type: 'memory' }, listeners: { load: { fn: Store.stoDoc_load } } }); window.App.stoHisOrd = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlHisOrd", { extend: "Ext.data.Model", fields: [{ name: "OrderNbr", type: "string" }, { name: "CustID", type: "string" }, { name: "CustName", type: "string" }, { name: "Addr1", type: "string" }, { name: "SlsPerID", type: "string" }, { name: "DeliveryID", type: "string" }, { name: "OrderDate", type: "date", dateFormat: "c" }, { name: "ARDocDate", type: "date", dateFormat: "c" }, { name: "Status", type: "string" }, { name: "OrdQty", type: "float" }, { name: "OrdAmt", type: "float" }, { name: "TaxTot", type: "float" }, { name: "StatusDescr", type: "string" }, { name: "SalesMark", type: "float" }, { name: "PromoMark", type: "float" }, { name: "RewardAmt", type: "float" }, { name: "RewardID", type: "string" }, { name: "OrdQty1", type: "float" }, { name: "OrdQty2", type: "float" }, { name: "ApproveDate", type: "date", dateFormat: "c" }] }), storeId: "stoHisOrd", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "orderNbr": App.slmOrder.selected.items.length ? App.slmOrder.selected.items[0].data.OrderNbr : '' } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "OM20500/GetHisOrd", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: function (store, operation) { HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: Store.stoHisOrd_load } } }); window.App.stoHisDet = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlHisDet", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "InvtID", type: "string" }, { name: "Descr", type: "string" }, { name: "FreeItem", type: "boolean" }, { name: "LineQty", type: "float" }, { name: "SlsUnit", type: "string" }, { name: "SlsPrice", type: "float" }, { name: "DiscAmt", type: "float" }, { name: "LineAmt", type: "float" }, { name: "DiscCode", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxID", type: "string" }, { name: "DiscPct", type: "float" }, { name: "Mark", type: "float" }, { name: "DisplayID", type: "string" }, { name: "DisplayPeriodID", type: "string" }, { name: "DfltSOUnit", type: "string" }, { name: "ClassID", type: "string" }, { name: "UnitRate1", type: "float" }, { name: "UnitMultDiv1", type: "string" }, { name: "LineQty1", type: "float" }, { name: "LineQty2", type: "float" }, { name: "GroupDiscAmt1", type: "float" }] }), storeId: "stoHisDet", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "orderNbr": App.slmHisOrd.selected.items.length ? App.slmHisOrd.selected.items[0].data.OrderNbr : '' } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "OM20500/GetHisDet", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: function (store, operation) { HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: Store.stoHisDet_load } } }); window.App.stoImage = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlImage", { extend: "Ext.data.Model", fields: [{ name: "ImageName", type: "string" }, { name: "ImageSrc", type: "string" }, { name: "Descr", type: "string" }] }), storeId: "stoImage", readParameters: function (operation) { return { apply: { "branchID": App.frmImage.getRecord().data.BranchID, "custID": App.frmImage.getRecord().data.CustID, "orderNbr": App.frmImage.getRecord().data.OrderNbr, "slsperID": App.frmImage.getRecord().data.SlsPerID, "imgType": _imageType, "width": App.cboImageSize.valueModels.length ? App.cboImageSize.valueModels[0].data.Width : 195, "height": App.cboImageSize.valueModels.length ? App.cboImageSize.valueModels[0].data.Height : 120 } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "OM20500/GetImage", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoItemSite = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlItemSite", { extend: "Ext.data.Model", fields: [{ name: "InvtID", type: "string" }, { name: "SiteID", type: "string" }, { name: "AvgCost", type: "float" }, { name: "QtyAlloc", type: "float" }, { name: "QtyAllocIN", type: "float" }, { name: "QtyAllocPORet", type: "float" }, { name: "QtyAllocSO", type: "float" }, { name: "QtyAvail", type: "float" }, { name: "QtyInTransit", type: "float" }, { name: "QtyOnBO", type: "float" }, { name: "QtyOnHand", type: "float" }, { name: "QtyOnPO", type: "float" }, { name: "QtyOnTransferOrders", type: "float" }, { name: "QtyOnSO", type: "float" }, { name: "QtyShipNotInv", type: "float" }, { name: "StkItem", type: "int" }, { name: "TotCost", type: "float" }, { name: "QtyUncosted", type: "float" }, { name: "LastPurchaseDate", type: "date", dateFormat: "c" }, { name: "tstamp", type: "string" }, { name: "LastPurchasePrice", type: "float" }, { name: "QtyAllocPDASO", type: "float" }, { name: "EntityState" }, { name: "EntityKey" }] }), storeId: "stoItemSite", proxy: { type: "ajax", reader: { type: "json", root: "data" }, url: "OM20500/GetItemSite", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoEditDetail = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlDetail", { extend: "Ext.data.Model", fields: [{ name: "LineRef", type: "string" }, { name: "DiscType", type: "string" }, { name: "Code", type: "string" }, { name: "InvtID", type: "string" }, { name: "SlsUnit", type: "string" }, { name: "Descr", type: "string" }, { name: "Qty", type: "float" }, { name: "Edit", type: "boolean" }, { name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }] }), storeId: "stoEditDetail", proxy: { type: 'memory' } }); window.App.stoCodeProgram = Ext.create("Ext.data.Store", { model: Ext.define("App.stoCodeProgrammdl", { extend: "Ext.data.Model", fields: [{ name: "DiscType", mapping: "DiscType", type: "string" }, { name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "stoCodeProgram", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM20500_pcCodeProgram", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoRole = Ext.create("Ext.data.Store", { model: Ext.define("App.stoRolemdl", { extend: "Ext.data.Model", fields: [{ name: "Status", mapping: "Status", type: "string" }, { name: "EditStatus", mapping: "EditStatus", type: "string" }, { name: "HiddenColumn", mapping: "HiddenColumn", type: "string" }, { name: "EditColumn", mapping: "EditColumn", type: "string" }, { name: "DefaultStatus", mapping: "DefaultStatus", type: "string" }, { name: "IsHO", mapping: "IsHO", type: "boolean" }, { name: "IsDist", mapping: "IsDist", type: "boolean" }, { name: "OutOfStockHeaderColor", mapping: "OutOfStockHeaderColor", type: "string" }, { name: "OutOfStockColor", mapping: "OutOfStockColor", type: "string" }, { name: "ShowDfltSOUnitStkUnit", mapping: "ShowDfltSOUnitStkUnit", type: "boolean" }] }), storeId: "stoRole", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pdRole", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: Store.stoRole_load } } }); window.App.stoHisOrdCalcPromo = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlHistoryOrdCalcPromo", { extend: "Ext.data.Model", fields: [{ name: "OrderNbr", type: "string" }, { name: "CustID", type: "string" }, { name: "CustName", type: "string" }, { name: "Addr1", type: "string" }, { name: "SlsPerID", type: "string" }, { name: "DeliveryID", type: "string" }, { name: "OrderDate", type: "date", dateFormat: "c" }, { name: "ARDocDate", type: "date", dateFormat: "c" }, { name: "Status", type: "string" }, { name: "StatusDescr", type: "string" }, { name: "OrdQty", type: "float" }, { name: "OrdQty1", type: "float" }, { name: "OrdQty2", type: "float" }, { name: "OrdAmt", type: "float" }, { name: "TaxTot", type: "float" }, { name: "SalesMark", type: "float" }, { name: "PromoMark", type: "float" }, { name: "RewardAmt", type: "float" }, { name: "RewardID", type: "string" }, { name: "ID", type: "int" }, { name: "DateCalc", type: "date", dateFormat: "c" }, { name: "LineDiscAmt", type: "float" }, { name: "OrdDiscAmt", type: "float" }, { name: "OutOfStockBudget", type: "int" }] }), storeId: "stoHisOrdCalcPromo", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "orderNbr": App.slmOrder.selected.items.length ? App.slmOrder.selected.items[0].data.OrderNbr : '' } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "OM20500/GetHisOrdCalcPromo", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: function (store, operation) { HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: Store.stoHisOrdCalcPromo_load } } }); window.App.stoHisDetcalcPromo = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlHisDetCalcPromo", { extend: "Ext.data.Model", fields: [{ name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "InvtID", type: "string" }, { name: "Descr", type: "string" }, { name: "FreeItem", type: "boolean" }, { name: "LineQty", type: "float" }, { name: "LineQty1", type: "float" }, { name: "LineQty2", type: "float" }, { name: "SlsUnit", type: "string" }, { name: "SlsPrice", type: "float" }, { name: "DiscAmt", type: "float" }, { name: "LineAmt", type: "float" }, { name: "DiscCode", type: "string" }, { name: "SiteID", type: "string" }, { name: "TaxID", type: "string" }, { name: "DiscPct", type: "float" }, { name: "Mark", type: "float" }, { name: "DisplayID", type: "string" }, { name: "DisplayPeriodID", type: "string" }, { name: "DfltSOUnit", type: "string" }, { name: "ClassID", type: "string" }, { name: "UnitRate1", type: "float" }, { name: "UnitMultDiv1", type: "string" }, { name: "ID", type: "int" }, { name: "SumDiscInvoice", type: "float" }] }), storeId: "stoHisDetcalcPromo", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "orderNbr": App.slmOrderCalcPromo.selected.items.length ? App.slmOrderCalcPromo.selected.items[0].data.OrderNbr : '', "id": App.slmOrderCalcPromo.selected.items.length ? App.slmOrderCalcPromo.selected.items[0].data.ID : '' } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "OM20500/GetHisDetCalcPromo", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { beforeload: { fn: function (store, operation) { HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: Store.stoHisDetCalcPromo_load } } }); window.App.stoOrderCheck = Ext.create("Ext.data.Store", { model: Ext.define("App.mdlOrderCheck", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "CustID", type: "string" }, { name: "CustName", type: "string" }, { name: "CodeHT", type: "string" }, { name: "OrderDate", type: "date", dateFormat: "c" }, { name: "PriceClassID", type: "string" }, { name: "Addr1", type: "string" }, { name: "SlsPerID", type: "string" }, { name: "Status", type: "string" }, { name: "StatusDescr", type: "string" }, { name: "OrdQty", type: "float" }, { name: "OrdAmt", type: "float" }, { name: "Remark", type: "string" }, { name: "RemarkOrd", type: "string" }, { name: "LineDiscAmt", type: "float" }, { name: "VolDiscAmt", type: "float" }, { name: "OrdDiscAmt", type: "float" }, { name: "TaxTot", type: "float" }, { name: "Color", type: "string" }, { name: "PayAmt", type: "float" }, { name: "DiscSite", type: "string" }, { name: "InvcNbr", type: "string" }, { name: "InvcNote", type: "string" }, { name: "RewardAmt", type: "float" }, { name: "RewardAmt4Display", type: "float" }, { name: "RewardID", type: "string" }, { name: "SalesMark", type: "float" }, { name: "PromoMark", type: "float" }, { name: "ToStatus", type: "string" }, { name: "HiddenColumn", type: "string" }, { name: "EditColumn", type: "string" }, { name: "CheckQty", type: "string" }, { name: "Editable", type: "boolean" }, { name: "DistrictDescr", type: "string" }, { name: "StateDescr", type: "string" }, { name: "PONbr", type: "string" }, { name: "OrigBranchID", type: "string" }, { name: "LDateTime", type: "date", dateFormat: "c" }, { name: "CDateTime", type: "date", dateFormat: "c" }, { name: "DeliveryUnit", type: "string" }, { name: "ApprovalDate", type: "date", dateFormat: "c" }, { name: "SyncDate", type: "date", dateFormat: "c" }, { name: "RemarkKM", type: "string" }, { name: "IsSelected", type: "boolean" }, { name: "tstamp", type: "string" }, { name: "OutOfStockLineRef", type: "string" }, { name: "OrdQty1", type: "float" }, { name: "OrdQty2", type: "float" }, { name: "ForceCalcPromo", type: "boolean" }, { name: "ShipDate", type: "date", dateFormat: "c" }, { name: "ShiftID", type: "string" }, { name: "PayMethod", type: "string" }, { name: "PayType", type: "string" }, { name: "OrderType", type: "string" }, { name: "OrderNbrImp", type: "boolean" }, { name: "ARDocDateTmp", type: "date", dateFormat: "c" }, { name: "DeliveryIDTmp", type: "string" }, { name: "ShipDateTmp", type: "date", dateFormat: "c" }] }), storeId: "stoOrderCheck", proxy: { type: 'memory' } }); window.App.stoOM20500_pdIN_Inventory = Ext.create("Ext.data.Store", { model: Ext.define("App.stoOM20500_pdIN_Inventorymdl", { extend: "Ext.data.Model", fields: [{ name: "InvtID", mapping: "InvtID", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }, { name: "InvtType", mapping: "InvtType", type: "string" }, { name: "LotSerTrack", mapping: "LotSerTrack", type: "string" }, { name: "StkUnit", mapping: "StkUnit", type: "string" }, { name: "StkWtUnit", mapping: "StkWtUnit", type: "string" }, { name: "LotSerRcptAuto", mapping: "LotSerRcptAuto", type: "boolean" }] }), storeId: "stoOM20500_pdIN_Inventory", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "procName": "OM20500_pdIN_Inventory", "procParam": "@UserID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }); window.App.stoHasDelivery = Ext.create("Ext.data.Store", { model: Ext.define("App.stoHasDeliverymdl", { extend: "Ext.data.Model", fields: [{ name: "HasDelivery", mapping: "HasDelivery", type: "boolean" }] }), storeId: "stoHasDelivery", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": App.cboCpnyID.getValue(), "param1": HQ.userName, "param2": HQ.cpnyID, "param3": HQ.langID, "procName": "OM20500_pdHasDelivery", "procParam": "@BranchID,@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: Store.stoHasDelivery_load } } }); Ext.create("Ext.container.Viewport", { renderTo: Ext.getBody(), items: [{ id: "frmMain", xtype: "form", defaultAnchor: "100%", defaultButton: "btnLoad", items: [{ id: "pnlHeader", border: false, region: "north", autoScroll: true, items: [{ margin: "0 0 5 0", minWidth: 200, xtype: "container", items: [{ id: "cboTerritory", margin: "5 0 0 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('TERRITORY'), labelAlign: "right", name: "cboTerritory", dataIndex: "Territory", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('TERRITORY') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Territory}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, multiSelect: true, queryMode: "local", valueField: "Territory", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Territory", mapping: "Territory", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboTerritoryOM20500_pcTerritory", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcTerritory", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: Event.Form.cboTerritory_Bur }, focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: Event.Form.cboTerritory_Change }, triggerclick: { fn: Event.Form.cboTerritory_Click }, collapse: { fn: Event.Form.cboTerritory_Collapse }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Territory,Descr') } }, beforeselect: { fn: FilterCombo_BeforeSelect } } }, { id: "cboState", margin: "5 0 0 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('STATE'), labelAlign: "right", name: "cboState", dataIndex: "State", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('STATE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{State}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, multiSelect: true, queryMode: "local", valueField: "State", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "State", mapping: "State", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "Country", mapping: "Country", type: "string" }, { name: "Territory", mapping: "Territory", type: "string" }] }), storeId: "cboStateOM20500_pcState", readParameters: function (operation) { return { apply: { "param0": joinParams(App.cboTerritory), "param1": HQ.userName, "param2": HQ.cpnyID, "param3": HQ.langID, "procName": "OM20500_pcState", "procParam": "@Territory,@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: function (item) { this.forceSelection = false; } }, focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: Event.Form.cboState_Click }, collapse: { fn: Event.Form.cboState_Collapse }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'State,Descr') } }, beforeselect: { fn: FilterCombo_BeforeSelect } } }, { id: "cboDistrict", hidden: true, margin: "5 0 0 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('DISTRICT'), labelAlign: "right", name: "cboDistrict", dataIndex: "District", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Name", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('DISTRICT') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{District}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, multiSelect: true, queryMode: "local", valueField: "District", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "CountryState", mapping: "CountryState", type: "string" }, { name: "District", mapping: "District", type: "string" }, { name: "Name", mapping: "Name", type: "string" }] }), storeId: "cboDistrictOM20500_pcDistrict", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "param3": joinParams(App.cboState), "procName": "OM20500_pcDistrict", "procParam": "@UserName,@CpnyID,@LangID,@State,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, change: { fn: Event.Form.cboDistrict_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'District,Name') } }, beforeselect: { fn: FilterCombo_BeforeSelect } } }, { id: "cboCpnyID", margin: "5 0 0 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('CPNYID'), labelAlign: "right", name: "cboCpnyID", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "BranchID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('BRANCHID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('BRANCHNAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{BranchID}</td><td style='min-width: 100px !important;'>{BranchName}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "BranchID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "BranchID", mapping: "BranchID", type: "string" }, { name: "BranchName", mapping: "BranchName", type: "string" }, { name: "Addr", mapping: "Addr", type: "string" }, { name: "Territory", mapping: "Territory", type: "string" }, { name: "State", mapping: "State", type: "string" }] }), storeId: "cboCpnyIDOM20500_pcBranchAllByUser", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "param3": joinParams(App.cboState), "param4": joinParams(App.cboTerritory), "procName": "OM20500_pcBranchAllByUser", "procParam": "@UserID,@CpnyID,@LangID,@State,@Territory,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { blur: { fn: Event.Form.cboCpnyID_Blur }, change: { fn: Event.Form.cboCpnyID_change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, expand: { fn: Event.Form.cboCpnyID_Expand }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'BranchID,BranchName') } } } }], layout: { type: "vbox", align: "stretch" } }, { margin: "5 0 5 0", minWidth: 200, xtype: "container", items: [{ xtype: "container", items: [{ id: "txtSlsperId", tag: "X", width: 250, xtype: "textfield", fieldLabel: HQ.common.getLang('SLSPERID'), readOnly: true }, { id: "btnFindSlsperId", xtype: "button", iconCls: "#Find", listeners: { click: { fn: btnFindSlsperId_Click } } }], layout: "hbox" }, { id: "cboChannel", margin: "5 0 0 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('OM20500FCHANNEL'), labelAlign: "right", name: "cboChannel", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboChannelOM20500_pcChannel", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcChannel", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }, { id: "cboStatus", margin: "5 0 0 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('STATUS'), labelAlign: "right", name: "cboStatus", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, multiSelect: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboStatusOM20500_pcApproveStatus", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "param3": App.cboCpnyID.getValue(), "procName": "OM20500_pcApproveStatus", "procParam": "@UserName,@CpnyID,@LangID,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { this.forceSelection = true; } }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } }, beforeselect: { fn: FilterCombo_BeforeSelect } } }, { id: "cboRemarkOrd", hidden: true, margin: "5 0 5 0", width: 270, xtype: "combobox", fieldLabel: HQ.common.getLang('OM20500FTREMARDORD'), labelAlign: "right", name: "cboRemarkOrd", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboRemarkOrdOM20500_pcRemarkOrdFilterType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcRemarkOrdFilterType", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: Event.Form.cboCpnyID_change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } }], layout: { type: "vbox", align: "stretch" } }, { margin: "5 0 5 0", minWidth: 200, xtype: "container", items: [{ margin: "0 0 5 0", xtype: "container", items: [{ id: "dteStartDate", width: 240, xtype: "datefield", fieldLabel: HQ.common.getLang('FROMDATE'), labelAlign: "right", value: new Date(2021, 0, 4, 16, 43, 33, 838), allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.setValue(''); } } } } }, { id: "dteStartTime", width: 65, xtype: "timefield", value: "00:00", format: "H:i", increment: 30, submitFormat: "h:i a", triggerAction: "all" }], layout: "hbox" }, { margin: "0 0 5 0", xtype: "container", items: [{ id: "dteEndDate", width: 240, xtype: "datefield", fieldLabel: HQ.common.getLang('TODATE'), labelAlign: "right", value: new Date(2021, 0, 4, 16, 43, 33, 886), allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.setValue(''); } } } } }, { id: "dteEndTime", width: 65, xtype: "timefield", value: "23:59", format: "H:i", increment: 30, submitFormat: "h:i a", triggerAction: "all" }], layout: "hbox" }, { id: "cboDateFilterBy", xtype: "combobox", fieldLabel: HQ.common.getLang('DATEFILTER'), labelAlign: "right", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDateFilterByOM20500_pcDateFilterBy", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcDateFilterBy", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) }, listeners: { load: { fn: function (store, records, successful) { App.cboDateFilterBy.setValue("C") } } } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }], layout: { type: "vbox", align: "stretch" } }, { margin: "5 5 5 30", width: 150, xtype: "container", items: [{ id: "btnLoad", width: 150, xtype: "button", handler: Event.Form.btnLoad_click, iconCls: "#ArrowRefresh", text: HQ.common.getLang('LOADDATA') }, { id: "btnClose", margin: "5 0 0 0", width: 150, xtype: "button", handler: Event.Form.btnClose_click, iconCls: "#LockEdit", text: HQ.common.getLang('CLOSEPO') }, { id: "cboCustID", hidden: true, xtype: "combobox", fieldLabel: HQ.common.getLang('CUSTID'), labelAlign: "right", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "CustID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CUSTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('REFCUSTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('ADDR1') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('ADDR2') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{CustID}</td><td style='min-width: 100px !important;'>{RefCustID}</td><td style='min-width: 100px !important;'>{Name}</td><td style='min-width: 100px !important;'>{Addr1}</td><td style='min-width: 100px !important;'>{Addr2}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "CustID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "CustID", mapping: "CustID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }, { name: "Addr1", mapping: "Addr1", type: "string" }, { name: "Addr2", mapping: "Addr2", type: "string" }, { name: "Terms", mapping: "Terms", type: "string" }, { name: "BranchID", mapping: "BranchID", type: "string" }, { name: "RefCustID", mapping: "RefCustID", type: "string" }] }), storeId: "cboCustIDOM20500_pcCustomerActive", readParameters: function (operation) { return { apply: { "param0": joinParams(App.cboTerritory), "param1": joinParams(App.cboState), "param2": joinParams(App.cboDistrict), "param3": App.cboCpnyID.getValue(), "param4": HQ.userName, "procName": "OM20500_pcCustomerActive", "procParam": "@Territory,@State,@District,@BranchID,@UserName,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'CustID,RefCustID,Name,Addr1,Addr2') } } } }, { id: "btnDelOrdNbrImp", margin: "5 0 0 0", width: 150, xtype: "button", handler: Event.Form.btnDelOrdNbrImp_click, iconCls: "#Delete", text: HQ.common.getLang('DELORDNBRIMP') }], layout: { type: "vbox", align: "stretch" } }], layout: { type: "hbox" } }, { id: "pnlOrder", region: "center", items: [{ store: { model: Ext.define("App.mdlOrder", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "BranchID", type: "string" }, { name: "OrderNbr", type: "string" }, { name: "CustID", type: "string" }, { name: "CustName", type: "string" }, { name: "CodeHT", type: "string" }, { name: "OrderDate", type: "date", dateFormat: "c" }, { name: "PriceClassID", type: "string" }, { name: "Addr1", type: "string" }, { name: "SlsPerID", type: "string" }, { name: "Status", type: "string" }, { name: "StatusDescr", type: "string" }, { name: "OrdQty", type: "float" }, { name: "OrdAmt", type: "float" }, { name: "Remark", type: "string" }, { name: "RemarkOrd", type: "string" }, { name: "LineDiscAmt", type: "float" }, { name: "VolDiscAmt", type: "float" }, { name: "OrdDiscAmt", type: "float" }, { name: "TaxTot", type: "float" }, { name: "Color", type: "string" }, { name: "PayAmt", type: "float" }, { name: "DiscSite", type: "string" }, { name: "InvcNbr", type: "string" }, { name: "InvcNote", type: "string" }, { name: "RewardAmt", type: "float" }, { name: "RewardAmt4Display", type: "float" }, { name: "RewardID", type: "string" }, { name: "SalesMark", type: "float" }, { name: "PromoMark", type: "float" }, { name: "ToStatus", type: "string" }, { name: "HiddenColumn", type: "string" }, { name: "EditColumn", type: "string" }, { name: "CheckQty", type: "string" }, { name: "Editable", type: "boolean" }, { name: "DistrictDescr", type: "string" }, { name: "StateDescr", type: "string" }, { name: "PONbr", type: "string" }, { name: "OrigBranchID", type: "string" }, { name: "LDateTime", type: "date", dateFormat: "c" }, { name: "CDateTime", type: "date", dateFormat: "c" }, { name: "DeliveryUnit", type: "string" }, { name: "ApprovalDate", type: "date", dateFormat: "c" }, { name: "SyncDate", type: "date", dateFormat: "c" }, { name: "RemarkKM", type: "string" }, { name: "IsSelected", type: "boolean" }, { name: "tstamp", type: "string" }, { name: "OutOfStockLineRef", type: "string" }, { name: "OrdQty1", type: "float" }, { name: "OrdQty2", type: "float" }, { name: "ForceCalcPromo", type: "boolean" }, { name: "ShipDate", type: "date", dateFormat: "c" }, { name: "ShiftID", type: "string" }, { name: "PayMethod", type: "string" }, { name: "PayType", type: "string" }, { name: "OrderType", type: "string" }, { name: "OrderNbrImp", type: "boolean" }, { name: "ARDocDateTmp", type: "date", dateFormat: "c" }, { name: "DeliveryIDTmp", type: "string" }, { name: "ShipDateTmp", type: "date", dateFormat: "c" }] }), storeId: "stoOrder", type: "paging", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "slsperID": App.txtSlsperId.getValue(), "custID": App.cboCustID.getValue(), "status": App.cboStatus.getValue().join(','), "startDate": App.dteStartDate.getValue(), "endDate": App.dteEndDate.getValue(), "startTime": App.dteStartTime.getValue(), "endTime": App.dteEndTime.getValue(), "remark": App.cboRemarkOrd.getValue(), "channel": App.cboChannel.getValue(), "dateFilterBy": App.cboDateFilterBy.getValue(), "territory": joinParams(App.cboTerritory), "state": joinParams(App.cboState), "district": joinParams(App.cboDistrict) } }; }, serverProxy: { type: "ajax", timeout: 2147483647, url: "OM20500/GetOrder" }, pageSize: 50, proxy: { type: 'pagingmemory' }, listeners: { beforeload: { fn: function (store, operation) { HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: Store.stoOrder_load } } }, id: "grdOrder", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: Event.Grid.grdOrder_beforeEdit }, edit: { fn: Event.Grid.grdOrder_edit }, validateedit: { fn: Event.Grid.grdOrder_validateEdit } } }], xtype: "grid", region: "center", flex: 1, layout: "fit", bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "50", value: "50" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoOrder", hideRefresh: true }, columns: { items: [{ width: 40, xtype: "rownumberer" }, { width: 35, xtype: "checkcolumn", headerItems: [{ id: "chkSelectHeaderOrder", xtype: "checkboxfield", handler: Event.Grid.chkSelectHeaderOrder_change, inputValue: "App.chkSelectHeaderOrder" }], hideTitleEl: true, align: "center", dataIndex: "Selected", tooltip: HQ.common.getLang('SELECTED'), editable: true, listeners: { beforecheckchange: { fn: chkSelected_BeforeCheckChange } } }, { width: 85, xtype: "checkcolumn", dataIndex: "ForceCalcPromo", text: HQ.common.getLang('FORCECALCPROMO'), editable: true }, { id: "btnCalcPromo", width: 80, dataIndex: "CalcPromoOnly", renderer: linkRenderer, text: HQ.common.getLang('CALCPROMO') }, { hidden: true, width: 30, xtype: "imagecommandcolumn", text: HQ.common.getLang(' '), commands: [{ command: "EditOM205", iconCls: "#TabEdit", tooltip: { text: HQ.common.getLang('EDITOM205') } }], listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { Event.Form.showEditDetail(record); } } } }, { dataIndex: "OrderNbr", renderer: renderHeaderColor, text: HQ.common.getLang('ORDERNBR') }, { width: 120, dataIndex: "CustID", renderer: renderHeaderColor, text: HQ.common.getLang('CUSTID') }, { width: 150, dataIndex: "CustName", renderer: renderHeaderColor, text: HQ.common.getLang('CUSTNAME') }, { dataIndex: "CodeHT", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "textfield", enforceMaxLength: true, maxLength: 50 } }, {})), renderer: renderHeaderColor, text: HQ.common.getLang('CODEHT') }, { width: 150, xtype: "datecolumn", dataIndex: "OrderDate", renderer: renderOrderDateColor, text: HQ.common.getLang('ORDERDATE'), format: HQ.formatDateJS, listeners: { added: { fn: function (a, b, c) {; } } } }, { width: 150, dataIndex: "DeliveryUnit", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDeliveryUnit", xtype: "combobox", name: "cboDeliveryUnit", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('DELIVERYUNIT'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "CheckStock", mapping: "CheckStock", type: "string" }, { name: "IsChangeSiteID", mapping: "IsChangeSiteID", type: "boolean" }] }), storeId: "cboDeliveryUnitOM20500_pcDeliveryUnit", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM20500_pcDeliveryUnit", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: cboDeliveryUnit_Change }, triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, expand: { fn: cboDeliveryUnit_Expand }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderDeliveryUnit, text: HQ.common.getLang('DELIVERYUNIT') }, { width: 150, xtype: "datecolumn", dataIndex: "ShipDate", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "colShipDate", xtype: "datefield", format: HQ.formatDateJS, submitFormat: "m/d/Y" } }, {})), text: HQ.common.getLang('SHIPDATE'), format: HQ.formatDateJS }, { width: 150, dataIndex: "ShiftID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboShiftID", xtype: "combobox", name: "cboShiftID", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('OM20500SHIFTID'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboShiftIDOM20500_pcShiftID", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM20500_pcShiftID", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderShiftID, text: HQ.common.getLang('OM20500SHIFTID') }, { width: 150, dataIndex: "PayMethod", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboPayMethod", xtype: "combobox", name: "cboPayMethod", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('PAYMETHOD'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "PayMethodCode", mapping: "PayMethodCode", type: "string" }, { name: "PayMethodDescr", mapping: "PayMethodDescr", type: "string" }] }), storeId: "cboPayMethodOM20500_pcPayMethod", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM20500_pcPayMethod", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderPayMethod, text: HQ.common.getLang('PAYMETHOD') }, { width: 150, dataIndex: "PayType", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboPayType", xtype: "combobox", name: "cboPayType", allowBlank: false, blankText: HQ.common.getLang('SELECT') + ' ' + HQ.common.getLang('PAYTYPE'), triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboPayTypeOM20500_pcPayType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "param3": _payMethod, "procName": "OM20500_pcPayType", "procParam": "@CpnyID,@UserName,@LangID,@PayMethod,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderPayType, text: HQ.common.getLang('PAYTYPE') }, { dataIndex: "Remark", renderer: renderHeaderColor, text: HQ.common.getLang('OM20500REMARK') }, { dataIndex: "RemarkOrd", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "textfield", enforceMaxLength: true, maxLength: 1000 } }, {})), renderer: renderHeaderColor, text: HQ.common.getLang('REMARKORD') }, { dataIndex: "StatusDescr", renderer: renderHeaderColor, text: HQ.common.getLang('STATUS') }, { dataIndex: "PriceClassID", renderer: renderHeaderColor, text: HQ.common.getLang('CLASSID') }, { dataIndex: "Addr1", renderer: renderHeaderColor, text: HQ.common.getLang('ADDRESS') }, { dataIndex: "DistrictDescr", renderer: renderHeaderColor, text: HQ.common.getLang('DISTRICT') }, { dataIndex: "StateDescr", renderer: renderHeaderColor, text: HQ.common.getLang('STATE') }, { dataIndex: "SlsPerID", renderer: renderHeaderColor, text: HQ.common.getLang('SLSPERID') }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty1", renderer: renderHeaderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty2", renderer: renderHeaderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('QTY') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty", renderer: renderHeaderNumberColor, text: HQ.common.getLang('QTY'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "LineDiscAmt", renderer: renderHeaderNumberColor, text: HQ.common.getLang('LINEDISCAMT'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "VolDiscAmt", renderer: renderHeaderNumberColor, text: HQ.common.getLang('VOLDISCAMT'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "OrdDiscAmt", renderer: renderHeaderNumberColor, text: HQ.common.getLang('OM20500ORDDISCAMT'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "OrdAmt", renderer: renderHeaderNumberColor, text: HQ.common.getLang('LINEAMT'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "TaxTot", renderer: renderHeaderNumberColor, text: HQ.common.getLang('TOTTAX'), format: "0,000" }, { id: "colInvcNbr", dataIndex: "InvcNbr", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "textfield", enforceMaxLength: true, maxLength: 30 } }, {})), renderer: renderHeaderColor, text: HQ.common.getLang('INVCNBR') }, { id: "colInvcNote", dataIndex: "InvcNote", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "textfield", enforceMaxLength: true, maxLength: 30 } }, {})), renderer: renderHeaderColor, text: HQ.common.getLang('INVCNOTE') }, { width: 150, xtype: "imagecommandcolumn", text: HQ.common.getLang('OM20500PROFILEPIC'), commands: [{ command: "ProfilePic", iconCls: "#ApplicationViewIcons", tooltip: { text: HQ.common.getLang('OM20500PROFILEPIC') } }], listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { Event.Form.showImage(record, 0); } } } }, { width: 130, xtype: "datecolumn", dataIndex: "ApprovalDate", renderer: renderDateColor, text: HQ.common.getLang('APPROVALDATE'), format: "d/m/Y H:i:s" }, { width: 130, xtype: "datecolumn", dataIndex: "SyncDate", renderer: renderDateColor, text: HQ.common.getLang('SYNCDATE'), format: "d/m/Y H:i:s" }, { width: 130, xtype: "datecolumn", dataIndex: "CDateTime", renderer: renderDateColor, text: HQ.common.getLang('CRTD_DATETIME'), format: "d/m/Y H:i:s" }] }, selModel: window.App.slmOrder = Ext.create("Ext.selection.RowModel", { proxyId: "slmOrder", selType: "rowmodel", listeners: { beforeselect: { fn: Event.Grid.slmOrder_BeforeSelect }, select: { fn: Event.Grid.slmOrder_select } } }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "OrderNbr", type: "string" }, { dataIndex: "CustID", type: "string" }, { dataIndex: "CustName", type: "string" }, { dataIndex: "OrderDate", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }, { dataIndex: "Remark", type: "string" }, { dataIndex: "RemarkOrd", type: "string" }, { dataIndex: "RemarkKM", type: "string" }, { dataIndex: "PriceClassID", type: "string" }, { dataIndex: "Addr1", type: "string" }, { dataIndex: "DistrictDescr", type: "string" }, { dataIndex: "StateDescr", type: "string" }, { dataIndex: "SlsPerID", type: "string" }, { dataIndex: "StatusDescr", type: "string" }, { dataIndex: "OrdQty", type: "numeric" }, { dataIndex: "OrdQty1", type: "numeric" }, { dataIndex: "OrdQty2", type: "numeric" }, { dataIndex: "LineDiscAmt", type: "numeric" }, { dataIndex: "VolDiscAmt", type: "numeric" }, { dataIndex: "OrdDiscAmt", type: "numeric" }, { dataIndex: "OrdAmt", type: "numeric" }, { dataIndex: "TaxTot", type: "numeric" }, { dataIndex: "PayAmt", type: "numeric" }, { dataIndex: "InvcNbr", type: "string" }, { dataIndex: "RewardAmt4Display", type: "numeric" }, { dataIndex: "RewardID", type: "string" }, { dataIndex: "InvcNote", type: "string" }, { dataIndex: "CodeHT", type: "string" }, { dataIndex: "DeliveryUnit", validateRecord: stringFilter, type: "string" }, { dataIndex: "SyncDate", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }, { dataIndex: "ApprovalDate", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }, { dataIndex: "LDateTime", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }, { dataIndex: "CDateTime", type: "date", format: HQ.formatDateJS, pickerOpts: { format: HQ.formatDateJS, longDayFormat: "d F Y" } }] })], viewConfig: { xtype: "gridview", trackOver: false, getRowClass: Event.Grid.grdOrder_color, enableTextSelection: true }, listeners: { cellclick: { fn: grdOrder_CellClick } } }], layout: "fit" }, { id: "tabInfo", xtype: "tabpanel", region: "south", split: true, flex: 2, items: [{ region: "center", items: [{ store: { model: Ext.define("App.mdlDet", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "OrderNbr", type: "string" }, { name: "LineRef", type: "string" }, { name: "InvtID", type: "string" }, { name: "Descr", type: "string" }, { name: "FreeItem", type: "boolean" }, { name: "LineQty", type: "float" }, { name: "QtyShip", type: "float" }, { name: "QtyShipped", type: "float" }, { name: "Qty", type: "float" }, { name: "SlsUnit", type: "string" }, { name: "SlsPrice", type: "float" }, { name: "DiscAmt", type: "float" }, { name: "LineAmt", type: "float" }, { name: "DiscCode", type: "string" }, { name: "SiteID", type: "string" }, { name: "DiscType", type: "string" }, { name: "TaxID", type: "string" }, { name: "DiscID", type: "string" }, { name: "DiscPct", type: "float" }, { name: "Mark", type: "float" }, { name: "MMark", type: "float" }, { name: "QtyShipD", type: "float" }, { name: "QtyERP", type: "float" }, { name: "POLineRef", type: "string" }, { name: "PODiscID", type: "string" }, { name: "PODiscSeq", type: "string" }, { name: "DisplayID", type: "string" }, { name: "DisplayPeriodID", type: "string" }, { name: "Qty1", type: "float" }, { name: "Qty2", type: "float" }, { name: "LineQty1", type: "float" }, { name: "LineQty2", type: "float" }, { name: "QtyShip1", type: "float" }, { name: "QtyShip2", type: "float" }, { name: "QtyShipped1", type: "float" }, { name: "QtyShipped2", type: "float" }, { name: "QtyShipD1", type: "float" }, { name: "QtyShipD2", type: "float" }, { name: "QtyERP1", type: "float" }, { name: "QtyERP2", type: "float" }, { name: "DfltSOUnit", type: "string" }, { name: "ClassID", type: "string" }, { name: "UnitRate1", type: "float" }, { name: "UnitMultDiv1", type: "string" }, { name: "StkUnit", type: "string" }, { name: "SiteType", type: "string" }, { name: "GroupDiscAmt1", type: "float" }, { name: "TaxCat", type: "string" }, { name: "TaxAmt00", type: "float" }, { name: "TaxAmt01", type: "float" }, { name: "TaxAmt02", type: "float" }, { name: "TaxAmt03", type: "float" }, { name: "TxblAmt00", type: "float" }, { name: "TxblAmt01", type: "float" }, { name: "TxblAmt02", type: "float" }, { name: "TxblAmt03", type: "float" }, { name: "TaxID00", type: "string" }, { name: "TaxID01", type: "string" }, { name: "TaxID02", type: "string" }, { name: "TaxID03", type: "string" }, { name: "UnitWeight", type: "float" }, { name: "SOFee", type: "float" }, { name: "BudgetID1", type: "string" }, { name: "BudgetID2", type: "string" }, { name: "DiscPct1", type: "float" }, { name: "DiscPct2", type: "float" }, { name: "DiscID1", type: "string" }, { name: "DiscID2", type: "string" }, { name: "DiscSeq1", type: "string" }, { name: "DiscSeq2", type: "string" }, { name: "DiscAmt1", type: "float" }, { name: "DiscAmt2", type: "float" }, { name: "DocDiscAmt", type: "float" }, { name: "GroupDiscPct1", type: "float" }, { name: "GroupDiscPct2", type: "float" }, { name: "GroupDiscID1", type: "string" }, { name: "GroupDiscID2", type: "string" }, { name: "GroupDiscSeq1", type: "string" }, { name: "GroupDiscSeq2", type: "string" }, { name: "GroupDiscAmt2", type: "float" }, { name: "POSM", type: "string" }, { name: "StkItem", type: "int" }, { name: "StkWt", type: "float" }, { name: "ManuDiscAmt", type: "float" }, { name: "ManuDiscPct", type: "float" }] }), storeId: "stoDet", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "orderNbr": _selOrderNbr } }; }, serverProxy: { type: "ajax", url: "OM20500/GetDet" }, pageSize: 50, proxy: { type: 'memory' }, listeners: { beforeload: { fn: function (store, operation) { App.frmMain.mask(); HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: Store.stoDet_load } } }, id: "grdDet", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: Event.Grid.grdDet_beforeEdit }, edit: { fn: Event.Grid.grdDet_edit }, validateedit: { fn: Event.Grid.grdDet_validateEdit } } }], xtype: "grid", region: "center", layout: "fit", columns: { items: [{ width: 40, xtype: "rownumberer" }, { width: 40, xtype: "checkcolumn", hideTitleEl: true, align: "center", dataIndex: "Selected", tooltip: HQ.common.getLang('SELECTED'), editable: true }, { width: 120, dataIndex: "InvtID", renderer: renderColor, text: HQ.common.getLang('INVTID') }, { width: 150, dataIndex: "Descr", renderer: renderColor, text: HQ.common.getLang('DESCR') }, { width: 70, xtype: "checkcolumn", dataIndex: "FreeItem", text: HQ.common.getLang('FREEITEM') }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LineQty1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LineQty2", renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('ORDQTY') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "LineQty", text: HQ.common.getLang('ORDQTY'), format: "0,000" }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "Qty1", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "Qty2", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('QTYAPPROVE') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "Qty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('QTYAPPROVE'), format: "0,000" }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "QtyERP1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "QtyERP2", renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('QTYERP') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "QtyERP", text: HQ.common.getLang('QTYERP'), format: "0,000" }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "QtyShipD1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "QtyShipD2", renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('QTYSHIPD') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "QtyShipD", text: HQ.common.getLang('QTYSHIPD'), format: "0,000" }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "QtyShip1", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "QtyShip2", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('SHIPQTYACTUAL') }, { hidden: true, width: 120, xtype: "numbercolumn", align: "right", dataIndex: "QtyShip", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('SHIPQTYACTUAL'), format: "0,000" }, { hidden: true, columns: [{ hidden: true, width: 70, align: "right", dataIndex: "QtyShipped1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT') }, { hidden: true, width: 70, align: "right", dataIndex: "QtyShipped2", renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT') }], text: HQ.common.getLang('SHIPPEDQTY') }, { hidden: true, align: "right", dataIndex: "QtyShipped", text: HQ.common.getLang('SHIPPEDQTY') }, { hidden: true, dataIndex: "SlsUnit", text: HQ.common.getLang('UNIT') }, { xtype: "numbercolumn", align: "right", dataIndex: "SlsPrice", renderer: renderNumberColor, text: HQ.common.getLang('SALESPRICE'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "DiscAmt", renderer: renderNumberColor, text: HQ.common.getLang('DISCAMT'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "GroupDiscAmt1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500GROUPDISCAMT1'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "LineAmt", renderer: renderNumberColor, text: HQ.common.getLang('LINEAMT'), format: "0,000" }, { dataIndex: "DiscCode", renderer: renderColor, text: HQ.common.getLang('DISCCODE') }, { dataIndex: "DisplayID", renderer: renderColor, text: HQ.common.getLang('OM10100DISPLAYID') }, { dataIndex: "DisplayPeriodID", renderer: renderColor, text: HQ.common.getLang('OM10100PERIODID') }, { dataIndex: "SiteID", renderer: renderColor, text: HQ.common.getLang('SITEID') }, { dataIndex: "TaxID", renderer: renderColor, text: HQ.common.getLang('TAXID') }] }, selModel: window.App.slmDet = Ext.create("Ext.selection.RowModel", { proxyId: "slmDet", selType: "rowmodel", listeners: { select: { fn: Event.Grid.slmDet_select } } }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true })], viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }], layout: "fit", title: HQ.common.getLang('ORDERPDA') }, { id: "tabHist", region: "center", items: [{ id: "grdHisOrd", xtype: "grid", region: "north", split: true, flex: 1, columns: { items: [{ width: 40, xtype: "rownumberer" }, { dataIndex: "OrderNbr", text: HQ.common.getLang('ORDERNBR') }, { width: 150, dataIndex: "CustID", text: HQ.common.getLang('CUSTID') }, { width: 150, dataIndex: "CustName", text: HQ.common.getLang('CUSTNAME') }, { dataIndex: "SlsPerID", text: HQ.common.getLang('SLSPERID') }, { dataIndex: "DeliveryID", text: HQ.common.getLang('DELIVERYID') }, { width: 150, xtype: "datecolumn", dataIndex: "OrderDate", text: HQ.common.getLang('ORDERDATE'), format: HQ.formatDateJS }, { xtype: "datecolumn", dataIndex: "ApproveDate", text: HQ.common.getLang('OM20500APPROVEDATE'), format: "d/m/Y H:i" }, { width: 180, xtype: "datecolumn", dataIndex: "ARDocDate", text: HQ.common.getLang('ARDOCDATE'), format: HQ.formatDateJS }, { dataIndex: "StatusDescr", text: HQ.common.getLang('STATUS') }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty2", renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('ORDQTY') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty", text: HQ.common.getLang('QTY'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "OrdAmt", text: HQ.common.getLang('LINEAMT'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "TaxTot", text: HQ.common.getLang('TOTTAX'), format: "0,000" }] }, selModel: window.App.slmHisOrd = Ext.create("Ext.selection.RowModel", { proxyId: "slmHisOrd", selType: "rowmodel", listeners: { select: { fn: Event.Grid.slmHisOrd_select } } }), store: "stoHisOrd", viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }, { id: "grdHisDet", xtype: "grid", region: "center", flex: 1, columns: { items: [{ width: 40, xtype: "rownumberer" }, { width: 120, dataIndex: "InvtID", text: HQ.common.getLang('INVTID') }, { width: 150, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { xtype: "checkcolumn", dataIndex: "FreeItem", text: HQ.common.getLang('FREEITEM') }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LineQty1", text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LineQty2", text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('QTY') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "LineQty", text: HQ.common.getLang('QTY'), format: "0,000" }, { hidden: true, dataIndex: "SlsUnit", text: HQ.common.getLang('UNIT') }, { xtype: "numbercolumn", align: "right", dataIndex: "SlsPrice", text: HQ.common.getLang('SALESPRICE'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "DiscAmt", text: HQ.common.getLang('DISCAMT'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "GroupDiscAmt1", text: HQ.common.getLang('OM20500GROUPDISCAMT1'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "LineAmt", text: HQ.common.getLang('LINEAMT'), format: "0,000" }, { dataIndex: "DiscCode", text: HQ.common.getLang('DISCCODE') }, { dataIndex: "DisplayID", text: HQ.common.getLang('OM10100DISPLAYID') }, { dataIndex: "DisplayPeriodID", text: HQ.common.getLang('OM10100PERIODID') }, { dataIndex: "SiteID", text: HQ.common.getLang('SITEID') }, { dataIndex: "TaxID", text: HQ.common.getLang('TAXID') }] }, selModel: window.App.slmHisDet = Ext.create("Ext.selection.RowModel", { proxyId: "slmHisDet", selType: "rowmodel" }), store: "stoHisDet", viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }], layout: "border", title: HQ.common.getLang('DELIVHISTORY') }, { region: "center", items: [{ id: "grdDoc", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: Event.Grid.grdDoc_beforeEdit }, edit: { fn: Event.Grid.grdDoc_edit }, validateedit: { fn: Event.Grid.grdDoc_validateEdit } } }], xtype: "grid", region: "center", layout: "fit", columns: { items: [{ width: 40, xtype: "rownumberer" }, { width: 140, dataIndex: "DocNbr", text: HQ.common.getLang('DOCNBR') }, { width: 130, xtype: "numbercolumn", align: "right", dataIndex: "DocBal", text: HQ.common.getLang('DOCBAL'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "DocBalApproved", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", selectOnFocus: true, decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('DOCBALAPPROVED'), format: "0,000" }, { width: 130, xtype: "numbercolumn", align: "right", dataIndex: "DocBalPay", text: HQ.common.getLang('DOCBALPAY'), format: "0,000" }] }, selModel: window.App.slmDoc = Ext.create("Ext.selection.RowModel", { proxyId: "slmDoc", selType: "rowmodel", listeners: { select: { fn: Event.Grid.slmDoc_select } } }), store: "stoDoc", features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "OrdNbr", type: "list" }] })], viewConfig: { xtype: "gridview", trackOver: false, getRowClass: Event.Grid.grdDoc_color, enableTextSelection: true } }], layout: "fit", title: HQ.common.getLang('ORDERPDADOC') }, { id: "tabHistCalcPromo", region: "center", items: [{ id: "grdHisOrdCalcPromo", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: grdHisOrdCalcPromo_beforeEdit }, validateedit: { fn: grdHisOrdCalcPromo_ValidateEdit } } }], xtype: "grid", region: "north", split: true, flex: 1, columns: { items: [{ width: 40, xtype: "rownumberer" }, { width: 150, xtype: "checkcolumn", dataIndex: "SelOrder", text: HQ.common.getLang('APPROVALORDER'), editable: true }, { dataIndex: "OrderNbr", text: HQ.common.getLang('ORDERNBR') }, { width: 120, dataIndex: "CustID", text: HQ.common.getLang('CUSTID') }, { width: 120, dataIndex: "CustName", text: HQ.common.getLang('CUSTNAME') }, { dataIndex: "SlsPerID", text: HQ.common.getLang('SLSPERID') }, { dataIndex: "DeliveryID", text: HQ.common.getLang('DELIVERYID') }, { width: 120, xtype: "datecolumn", dataIndex: "OrderDate", text: HQ.common.getLang('ORDERDATE'), format: HQ.formatDateJS }, { width: 120, xtype: "datecolumn", dataIndex: "ARDocDate", text: HQ.common.getLang('ARDOCDATE'), format: HQ.formatDateJS }, { dataIndex: "StatusDescr", text: HQ.common.getLang('STATUS') }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty1", renderer: renderNumberColor, text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty2", renderer: renderNumberColor, text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('ORDQTY') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "OrdQty", text: HQ.common.getLang('QTY'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "LineDiscAmt", text: HQ.common.getLang('LINEDISCAMT'), format: "0,000" }, { width: 120, xtype: "numbercolumn", align: "right", dataIndex: "OrdDiscAmt", text: HQ.common.getLang('ORDDISCAMT'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "OrdAmt", text: HQ.common.getLang('LINEAMT'), format: "0,000" }, { width: 120, xtype: "numbercolumn", align: "right", dataIndex: "TaxTot", text: HQ.common.getLang('TOTTAX'), format: "0,000" }, { width: 150, xtype: "numbercolumn", align: "right", dataIndex: "RewardAmt", text: HQ.common.getLang('REWARDAMT'), format: "0,000" }, { dataIndex: "RewardID", text: HQ.common.getLang('REWARDID') }, { width: 130, xtype: "datecolumn", dataIndex: "DateCalc", text: HQ.common.getLang('OM20500DATECALC'), format: "d/m/Y H:i:s" }] }, selModel: window.App.slmOrderCalcPromo = Ext.create("Ext.selection.RowModel", { proxyId: "slmOrderCalcPromo", selType: "rowmodel", listeners: { select: { fn: Event.Grid.slmOrderCalcPromo_select } } }), store: "stoHisOrdCalcPromo", viewConfig: { xtype: "gridview", trackOver: false, getRowClass: grdHisOrdCalcPromo_color, enableTextSelection: true }, listeners: { cellclick: { fn: grdHisOrdCalcPromo_CellClick } } }, { id: "grdHisDetCalcPromo", xtype: "grid", region: "center", flex: 1, columns: { items: [{ width: 40, xtype: "rownumberer" }, { width: 120, dataIndex: "InvtID", text: HQ.common.getLang('INVTID') }, { width: 150, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { xtype: "checkcolumn", dataIndex: "FreeItem", text: HQ.common.getLang('FREEITEM') }, { hidden: true, columns: [{ hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LineQty1", text: HQ.common.getLang('OM20500SOUNIT'), format: "0,000" }, { hidden: true, width: 70, xtype: "numbercolumn", align: "right", dataIndex: "LineQty2", text: HQ.common.getLang('OM20500STKUNIT'), format: "0,000" }], text: HQ.common.getLang('QTY') }, { hidden: true, xtype: "numbercolumn", align: "right", dataIndex: "LineQty", text: HQ.common.getLang('QTY'), format: "0,000" }, { hidden: true, dataIndex: "SlsUnit", text: HQ.common.getLang('UNIT') }, { xtype: "numbercolumn", align: "right", dataIndex: "SlsPrice", text: HQ.common.getLang('SALESPRICE'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "DiscPct", text: HQ.common.getLang('DISCPCT') }, { xtype: "numbercolumn", align: "right", dataIndex: "DiscAmt", text: HQ.common.getLang('DISCAMT'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "SumDiscInvoice", text: HQ.common.getLang('DOCDISCAMT'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "LineAmt", text: HQ.common.getLang('LINEAMT'), format: "0,000" }, { dataIndex: "DiscCode", text: HQ.common.getLang('DISCCODE') }, { dataIndex: "DisplayID", text: HQ.common.getLang('OM10100DISPLAYID') }, { dataIndex: "DisplayPeriodID", text: HQ.common.getLang('OM10100PERIODID') }, { id: "colDetSiteType", dataIndex: "SiteID", text: HQ.common.getLang('OM20500SITETYPE') }, { dataIndex: "TaxID", text: HQ.common.getLang('TAXID') }] }, selModel: window.App.slmHisDetCalcPromo = Ext.create("Ext.selection.RowModel", { proxyId: "slmHisDetCalcPromo", selType: "rowmodel" }), store: "stoHisDetcalcPromo", viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }], layout: "border", title: HQ.common.getLang('CALCPROMOHISTORY') }], layout: "border", activeTab: 0, listeners: { tabchange: { fn: tabInfo_TabChange } } }], layout: "border", bodyBorder: 5, bbar: { xtype: "toolbar", items: [{ xtype: "tbfill" }, { id: "lblQtyAvail", style: "text-align:right;margin-right: 10px !important;", width: 300, xtype: "netlabel" }] }, tbar: { id: "toolbarEvent.menuClick", xtype: "toolbar", items: [{ id: "Event.menuClickbtnSave", iconCls: "#Disk", tooltip: HQ.common.getLang('BTNSAVE'), listeners: { click: { fn: function (item, e) { Event.menuClick('save'); } } } }, { xtype: "tbseparator" }, { id: "btnImport", hidden: true, xtype: "filefield", iconCls: "#BookAdd", buttonConfig: { iconCls: "#BookAdd" }, buttonText: "Import", buttonOnly: true, listeners: { change: { fn: btnImport_Click } } }, { id: "btnUpload", iconCls: "#BookAdd", text: HQ.common.getLang('IMPORT'), listeners: { click: { fn: function (item, e) { Ext.get('btnImport-button-fileInputEl').dom.click(); } } } }, { id: "btnExport", iconCls: "#ArrowTurnRight", text: HQ.common.getLang('EXPORT'), listeners: { click: { fn: btnExport_Click } } }, { id: "btnForceCalcPromo", text: HQ.common.getLang('FORCECALCPROMO'), listeners: { click: { fn: btnForceCalcPromo_Click } } }, { id: "btnDiscManual", text: HQ.common.getLang('OM20500DISCMANUAL'), listeners: { click: { fn: btnDiscManual_Click } } }, { id: "btnDeliveryID", iconCls: "icon-invisible", text: HQ.common.getLang('OM20500UPDELIVERY'), listeners: { click: { fn: btnDeliveryID_Click } } }] }, trackResetOnLoad: true, waitMsgTarget: "", fieldDefaults: { labelAlign: "right", labelWidth: 110 }, listeners: { boxready: { fn: Event.Form.frmMain_boxReady } } }, { id: "winChoice", height: 500, width: 900, xtype: "window", items: [{ border: false, region: "north", flex: 5, items: [{ id: "grdChoiceHeader", border: true, border: "1 0 0 0", xtype: "grid", title: HQ.common.getLang('OM10100CHOICEHEADER'), columns: { items: [{ xtype: "rownumberer" }, { width: 100, dataIndex: "DiscID", text: HQ.common.getLang('DISCID') }, { width: 100, dataIndex: "DiscSeq", text: HQ.common.getLang('DISCSEQ') }, { width: 200, dataIndex: "DiscDescr", text: HQ.common.getLang('DISCDESCR') }, { width: 110, xtype: "numbercolumn", align: "right", dataIndex: "MaxQty", renderer: rendererMaxQty, text: HQ.common.getLang('OM10100MAXQTY'), format: "0,000" }, { hidden: true, width: 110, xtype: "numbercolumn", align: "right", dataIndex: "PromoBonusAmt", hideable: false, text: HQ.common.getLang('OM10100PROMOAMT'), format: "0,000" }, { width: 70, xtype: "numbercolumn", dataIndex: "LevelID", text: HQ.common.getLang('OM10100LEVELID'), format: "0,000" }, { width: 120, dataIndex: "InvtID", text: HQ.common.getLang('INVTID') }, { width: 120, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { width: 70, dataIndex: "Unit", text: HQ.common.getLang('UNIT') }, { hidden: true, width: 150, xtype: "checkcolumn", dataIndex: "DonateGroupProduct", hideable: false, text: HQ.common.getLang('DONATEGROUPPRODUCT') }] }, selModel: window.App.smlChoiceHeader = Ext.create("Ext.selection.RowModel", { proxyId: "smlChoiceHeader", selType: "rowmodel" }), store: "stoChoiceHeader", viewConfig: { xtype: "gridview", trackOver: false }, listeners: { selectionchange: { fn: grdChoiceHeader_SelectionChange } } }], layout: "fit" }, { border: false, region: "center", flex: 4, items: [{ id: "grdChoice", border: true, border: "1 0 0 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1 }], xtype: "grid", title: HQ.common.getLang('OM10100CHOICEDET'), columns: { items: [{ xtype: "rownumberer" }, { id: "colSel", width: 30, xtype: "checkcolumn", dataIndex: "Sel", filterable: false, editable: true }, { width: 110, dataIndex: "FreeItemID", text: HQ.common.getLang('FREEITEMID') }, { width: 180, dataIndex: "FreeItemDescr", text: HQ.common.getLang('FREEITEMDESCR') }, { width: 100, dataIndex: "FreeItemUnit", text: HQ.common.getLang('FREEITEMUNIT') }, { id: "txtFreeItemQty", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "FreeItemQty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('SOSUAT'), format: "0,000" }, { id: "txtMaxQtyInGroup", align: "right", dataIndex: "MaxQtyInGroup", text: HQ.common.getLang('MAXQTYINGROUP') }, { xtype: "numbercolumn", align: "right", dataIndex: "FreeItemQtyBase", text: HQ.common.getLang('FREEITEMQTYBASE'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "TotQty", text: HQ.common.getLang('FREEITEMQTY'), format: "0,000" }, { dataIndex: "GroupItem", text: HQ.common.getLang('GROUPITEM') }, { xtype: "numbercolumn", align: "right", dataIndex: "Priority", text: HQ.common.getLang('PRIORITY') }, { xtype: "numbercolumn", align: "right", dataIndex: "PromoPrice", text: HQ.common.getLang('OM10100PROMOPRICE'), format: "0,000" }, { xtype: "numbercolumn", align: "right", dataIndex: "PromoLineAmt", text: HQ.common.getLang('OM10100PROMOLINEAMT'), format: "0,000" }] }, selModel: window.App.smlChoice = Ext.create("Ext.selection.RowModel", { proxyId: "smlChoice", selType: "rowmodel" }), store: "stoChoice", viewConfig: { xtype: "gridview", trackOver: false }, listeners: { edit: { fn: grdChoice_Edit }, validateedit: { fn: grdChoice_ValidateEdit } } }], layout: "fit" }], layout: "border", bbar: { id: "bottomBar", border: false, xtype: "toolbar", items: [{ id: "ctnBottomBar", xtype: "container", items: [{ id: "lblChoiceAmtUsed", margin: "0 0 0 5", style: "style='float: left;width: 300px;font-weight: bold;'", xtype: "netlabel" }, { id: "btnChoiceOk", style: "style='float: right;width: 100px;font-weight: bold; margin-right: 10px;'", xtype: "button", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnChoiceOk_Click } } }] }] }, modal: true, listeners: { hide: { fn: winChoice_Close }, close: { fn: winChoice_Close } } }, { id: "winOrder", height: 200, width: 400, xtype: "window", defaultButton: "btnOK", items: [{ width: 350, xtype: "container", margins: "5 0 5 0", items: [{ id: "cboDelivery", width: 300, xtype: "combobox", margins: "5 0 0 0", fieldLabel: HQ.common.getLang('OM20500DELIVERY'), labelAlign: "right", labelWidth: 150, name: "Delivery", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Name", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SLSPERID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SlsperID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SlsperID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SlsperID", mapping: "SlsperID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }] }), storeId: "cboDeliveryOM20500_pcDeliveryPerson", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboCpnyID.getValue(), "procName": "OM20500_pcDeliveryPerson", "procParam": "@UserName,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SlsperID,Name') } } } }, { id: "dteShipDate", xtype: "datefield", fieldLabel: HQ.common.getLang('SHIPDATE'), labelAlign: "right", labelWidth: 150, name: "dteShipDate", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.setValue(''); } } } } }, { id: "dteARDocDate", xtype: "datefield", fieldLabel: HQ.common.getLang('ARDOCDATE'), labelAlign: "right", labelWidth: 150, name: "dteARDocDate", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.setValue(''); } } } } }, { id: "chkAddStock", hidden: true, xtype: "checkboxfield", margins: "0 0 0 155", boxLabel: HQ.common.getLang('OM205ADDSTOCK'), inputValue: "App.chkAddStock" }], layout: { type: "vbox", align: "stretch" } }, { xtype: "container", items: [{ id: "btnOK", width: 95, xtype: "button", margins: "0 0 0 155", handler: Event.Popup.btnOK_click, text: HQ.common.getLang('BTNOK') }, { id: "btnCancel", width: 95, xtype: "button", margins: "0 0 0 5", handler: Event.Popup.btnCancel_click, text: HQ.common.getLang('BTNCANCEL') }], layout: "hbox" }], closable: false, title: HQ.common.getLang('OM205ORDER'), modal: true }, { id: "winOrderSave", height: 200, width: 400, xtype: "window", defaultButton: "btnOK", items: [{ width: 350, xtype: "container", margins: "5 0 5 0", items: [{ id: "cboDeliverySave", width: 300, xtype: "combobox", margins: "5 0 0 0", fieldLabel: HQ.common.getLang('OM20500DELIVERY'), labelAlign: "right", labelWidth: 150, name: "DeliverySave", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Name", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('SLSPERID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('NAME') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{SlsperID}</td><td style='min-width: 100px !important;'>{Name}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "SlsperID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "SlsperID", mapping: "SlsperID", type: "string" }, { name: "Name", mapping: "Name", type: "string" }] }), storeId: "cboDeliverySaveOM20500_pcDeliveryPerson", readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": App.cboCpnyID.getValue(), "procName": "OM20500_pcDeliveryPerson", "procParam": "@UserName,@BranchID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'SlsperID,Name') } } } }, { id: "dteShipDateSave", xtype: "datefield", fieldLabel: HQ.common.getLang('SHIPDATE'), labelAlign: "right", labelWidth: 150, name: "dteShipDateSave", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.setValue(''); } } } } }, { id: "dteARDocDateSave", xtype: "datefield", fieldLabel: HQ.common.getLang('ARDOCDATE'), labelAlign: "right", labelWidth: 150, name: "dteARDocDateSave", allowBlank: false, triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], format: HQ.formatDateJS, submitFormat: "m/d/Y", listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.setValue(''); } } } } }], layout: { type: "vbox", align: "stretch" } }, { xtype: "container", items: [{ id: "btnOKSave", width: 95, xtype: "button", margins: "0 0 0 155", handler: Event.Popup.btnOKSave_click, text: HQ.common.getLang('BTNOK') }, { id: "btnCancelSave", width: 95, xtype: "button", margins: "0 0 0 5", handler: Event.Popup.btnCancelSave_click, text: HQ.common.getLang('BTNCANCEL') }], layout: "hbox" }], closable: false, title: HQ.common.getLang('OM205ORDER'), modal: true }], layout: "fit" }); Ext.create("Ext.window.Window", { id: "winDetail", height: 400, renderTo: Ext.getBody(), width: 650, items: [{ id: "txtOrderNbr", tag: "X", margin: "5 0 5 50", xtype: "textfield", fieldLabel: HQ.common.getLang('ORDERNBR'), labelWidth: 80, readOnly: true, submitValue: false }, { id: "grdDetail", border: false, plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: PopupwinDetail.grdDetail_beforeEdit }, validateedit: { fn: PopupwinDetail.grdDetail_validateEdit } } }], xtype: "grid", anchor: "100% -35", columns: { items: [{ xtype: "rownumberer", renderer: PopupwinDetail.renderRowNumberDetail }, { width: 120, dataIndex: "DiscType", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboDiscType", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "DiscType", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], delimiter: ",", displayField: "Descr", forceSelection: true, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboDiscTypeOM20500_pcDiscType", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM20500_pcDiscType", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Descr') } } } } }, {})), renderer: renderDiscType, text: HQ.common.getLang('DISCTYPE') }, { width: 120, dataIndex: "Code", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboCode", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "Code", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "DiscType", mapping: "DiscType", type: "string" }, { name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboCodeOM20500_pcCodeProgram", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.langID, "procName": "OM20500_pcCodeProgram", "procParam": "@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, expand: { fn: PopupwinDetail.cboCode_expand }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } } }, {})), renderer: renderCodeProgram, text: HQ.common.getLang('CODEPROGRAM') }, { width: 120, dataIndex: "InvtID", editor: new Ext.grid.CellEditor(Ext.apply({ field: { id: "cboInvtID", xtype: "combobox", hideLabel: true, labelWidth: 0, name: "InvtID", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "InvtID", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('INVTID') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{InvtID}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "InvtID", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "InvtID", mapping: "InvtID", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "StkUnit", mapping: "StkUnit", type: "string" }, { name: "DfltSOUnit", mapping: "DfltSOUnit", type: "string" }, { name: "ClassID", mapping: "ClassID", type: "string" }] }), storeId: "cboInvtIDOM20500_pcInvtID", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.cpnyID, "param1": HQ.userName, "param2": HQ.langID, "procName": "OM20500_pcInvtID", "procParam": "@CpnyID,@UserName,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'InvtID,Descr') } } } } }, {})), text: HQ.common.getLang('INVTID') }, { width: 120, dataIndex: "Descr", renderer: renderInvtID, text: HQ.common.getLang('GIFTNAME') }, { width: 100, xtype: "numbercolumn", align: "right", dataIndex: "Qty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", maxValue: 10000.0, minValue: 0.0 } }, {})), text: HQ.common.getLang('QTY'), format: "##,###" }] }, selModel: window.App.smlDetail = Ext.create("Ext.selection.RowModel", { proxyId: "smlDetail", selType: "rowmodel" }), store: "stoEditDetail", viewConfig: { xtype: "gridview", trackOver: false, getRowClass: PopupwinDetail.grdDetail_RowClass } }], layout: "anchor", buttons: [{ id: "btnAddnew", text: HQ.common.getLang('ADDNEW'), listeners: { click: { fn: PopupwinDetail.btnAddnew_Click } } }, { id: "btnDelete", text: HQ.common.getLang('DELETE'), listeners: { click: { fn: PopupwinDetail.btnDelete_Click } } }, { id: "btnDetailOk", text: HQ.common.getLang('OK'), listeners: { click: { fn: PopupwinDetail.btnDetailOK_Click } } }], title: HQ.common.getLang('GIFT'), modal: true }); Ext.create("Ext.window.Window", { id: "winImage", height: 500, renderTo: Ext.getBody(), width: 700, items: [{ id: "frmImage", xtype: "form", defaultAnchor: "100%", items: [{ cls: "images-view", region: "center", items: [{ id: "grdImage", tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for=\".\">", "<tpl if=\"ImageSrc!=&quot;&quot;\">", "<div class=\"thumb-wrap\" id=\"{ImageName}\">", "<div class=\"thumb\"><a target=\"_blank\" href=\"{ImageName}\">{ImageSrc}</a></div>", "<span class=\"x-editable\">{Descr}</span>", "</div>", "</tpl>", "</tpl>", "<div class=\"x-clear\"></div>", ""] }), xtype: "dataview", autoScroll: true, emptyText: "No images to display", itemSelector: "div.thumb-wrap", overItemCls: "x-item-over", store: "stoImage", trackOver: true }], layout: "border", tbar: { xtype: "toolbar", items: [{ id: "cboImageSize", xtype: "combobox", fieldLabel: HQ.common.getLang('IMAGESIZE'), labelAlign: "right", editable: false, matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('WIDTH') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('HEIGHT') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td><td style='min-width: 100px !important;'>{Width}</td><td style='min-width: 100px !important;'>{Height}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "Width", mapping: "Width", type: "int" }, { name: "Height", mapping: "Height", type: "int" }] }), storeId: "cboImageSizeOM20500_pcImageSize", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcImageSize", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { change: { fn: function (item, newValue, oldValue) { App.stoImage.reload() } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr,Width,Height') } } } }] } }], layout: "border", bodyBorder: 0, bodyPadding: 5, trackResetOnLoad: true, waitMsgTarget: "", fieldDefaults: { labelAlign: "right" } }], layout: "fit", title: HQ.common.getLang(''), iconCls: "#ApplicationViewGallery", modal: true, listeners: { close: { fn: function (item) { App.grdImage.store.removeAll(); } } } }); Ext.create("Ext.window.Window", { id: "winSlsperID", height: 450, minHeight: 250, minWidth: 350, renderTo: Ext.getBody(), width: 650, items: [{ xtype: "form", defaultButton: "btnSearch", items: [{ margin: "5 0 5 0", xtype: "container", region: "north", items: [{ id: "cboSlsTerritory", margin: "5 0 5 0", width: 350, xtype: "combobox", fieldLabel: HQ.common.getLang('TERRITORY'), labelAlign: "right", name: "cboSlsTerritory", dataIndex: "Territory", triggersConfig: [{ iconCls: Ext.form.field.Trigger.getIcon("Clear") }], matchFieldWidth: false, delimiter: ",", displayField: "Descr", listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('TERRITORY') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Territory}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, multiSelect: true, queryMode: "local", valueField: "Territory", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Territory", mapping: "Territory", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }] }), storeId: "cboSlsTerritoryOM20500_pcTerritory", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcTerritory", "procParam": "@UserName,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { triggerclick: { fn: function (item, trigger, index, tag, e) { if (index == 0) { this.hasFocus; this.clearValue(); } } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Territory,Descr') } }, beforeselect: { fn: FilterCombo_BeforeSelect } } }, { id: "btnSearch", margin: "5 0 5 5", xtype: "button", iconCls: "#Find", text: HQ.common.getLang('SEARCH'), listeners: { click: { fn: function (item, e) { App.stoSlsperID.reload() } } } }], layout: "hbox" }, { xtype: "container", region: "center", items: [{ store: { model: Ext.define("App.mdlSalesPerson", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "SlsperId", type: "string" }, { name: "Name", type: "string" }, { name: "SupID", type: "string" }, { name: "SupName", type: "string" }, { name: "Position", type: "string" }] }), storeId: "stoSlsperID", type: "paging", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "territory": joinParams(App.cboSlsTerritory) } }; }, serverProxy: { type: "ajax", url: "OM20500/GetSalesPerson" }, pageSize: 20, proxy: { type: 'pagingmemory' }, listeners: { beforeload: { fn: function (store, operation) { HQ.common.showBusy(true, HQ.common.getLang('loadingData')); } }, load: { fn: function (store, records, successful) { HQ.common.showBusy(false); } } } }, id: "grdSlsperID", xtype: "grid", region: "center", layout: "fit", bbar: { plugins: [Ext.create("Ext.ux.ProgressBarPager", {})], xtype: "pagingtoolbar", items: [{ xtype: "netlabel", text: HQ.common.getLang('PAGESIZE') }, { width: 10, xtype: "tbspacer" }, { width: 80, xtype: "combobox", selectedItems: [{ text: "20", value: "20" }], queryMode: "local", store: [["1", "1"], ["2", "2"], ["10", "10"], ["20", "20"], ["30", "30"], ["50", "50"]], listeners: { select: { fn: HQ.grid.onPageSelect } } }], displayInfo: true, store: "stoSlsperID", hideRefresh: true }, columns: { items: [{ width: 30, xtype: "rownumberer" }, { width: 34, xtype: "checkcolumn", headerItems: [{ id: "chkSelectHeader", xtype: "checkboxfield", handler: chkSelectHeader_change, inputValue: "App.chkSelectHeader" }], hideTitleEl: true, align: "center", dataIndex: "Selected", filterable: true, tooltip: HQ.common.getLang('SELECTED'), editable: true }, { width: 110, dataIndex: "SupID", text: HQ.common.getLang('SUPID') }, { flex: 1, dataIndex: "SupName", text: HQ.common.getLang('SUPNAME') }, { width: 110, dataIndex: "SlsperId", text: HQ.common.getLang('SLSPERID') }, { flex: 1, dataIndex: "Name", text: HQ.common.getLang('SLSNAME') }] }, features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "Selected", type: "boolean" }, { dataIndex: "SlsperId", validateRecord: stringFilter, type: "string" }, { dataIndex: "Name", validateRecord: stringFilter, type: "string" }, { dataIndex: "SupID", validateRecord: stringFilter, type: "string" }, { dataIndex: "SupName", validateRecord: stringFilter, type: "string" }] })], viewConfig: { xtype: "gridview", trackOver: false, enableTextSelection: true } }], layout: "fit" }], layout: "border", waitMsgTarget: "", fieldDefaults: { labelAlign: "right", labelWidth: 150 } }], layout: "fit", buttons: [{ id: "btnCancelSlsperID", text: HQ.common.getLang('EXIT'), listeners: { click: { fn: btnCancelSlsperID_Click } } }, { id: "btnOKSlsperID", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnOKSlsperID_Click } } }], closable: false, title: HQ.common.getLang('SEARCHSLSPERID'), listeners: { beforehide: { fn: function (item) { App.frmMain.unmask(); } }, beforeshow: { fn: function (item) { App.frmMain.mask(); } }, beforeclose: { fn: function (item) { App.frmMain.unmask(); } } } }); Ext.create("Ext.window.Window", { id: "winManualPromo", height: 400, minHeight: 100, minWidth: 150, renderTo: Ext.getBody(), width: 1000, items: [{ store: { model: Ext.define("App.mdlManualPromo", { extend: "Ext.data.Model", fields: [{ name: "Selected", type: "boolean" }, { name: "DiscCode", type: "string" }, { name: "Descr", type: "string" }, { name: "PromoType", type: "string" }, { name: "Discount", type: "float" }, { name: "FreeItemID", type: "string" }, { name: "UnitDescr", type: "string" }, { name: "FreeItemQty", type: "float" }, { name: "SiteType", type: "string" }, { name: "TotalDiscout", type: "float" }, { name: "LineRef", type: "string" }, { name: "PromoTypeDescr", type: "string" }, { name: "QtyAvail", type: "float" }, { name: "ClassID", type: "string" }, { name: "StkUnit", type: "string" }, { name: "SOLineRef", type: "string" }] }), storeId: "stoManualPromo", readParameters: function (operation) { return { apply: { "branchID": App.cboCpnyID.getValue(), "slsperID": _slsperID, "custID": _custID, "orderDate": _orderDate, "totalAmt": _totalAmt, "orderNbr": _orderNbr } }; }, serverProxy: { type: "ajax", url: "OM20500/GetManualPromo" }, pageSize: 50, proxy: { type: 'memory' } }, id: "grdManualPromo", border: true, border: "1 0 0 0", margin: "5 0 5 0", plugins: [{ ptype: "cellediting", clicksToEdit: 1, listeners: { beforeedit: { fn: grdManualPromo_BeforeEdit }, edit: { fn: grdManualPromo_Edit }, validateedit: { fn: grdManualPromo_ValidateEdit } } }], xtype: "grid", anchor: "100% -25", columns: { items: [{ xtype: "rownumberer" }, { width: 40, xtype: "checkcolumn", align: "center", dataIndex: "Selected", editable: true }, { dataIndex: "DiscCode", text: HQ.common.getLang('DISCCODE') }, { minWidth: 150, dataIndex: "Descr", text: HQ.common.getLang('DESCR') }, { minWidth: 100, dataIndex: "PromoTypeDescr", text: HQ.common.getLang('PROMOTYPE') }, { style: "text-align:right", width: 80, xtype: "numbercolumn", align: "right", dataIndex: "Discount", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('DISCOUNT') }, { width: 100, dataIndex: "FreeItemID", text: HQ.common.getLang('FREEITEMID') }, { width: 60, dataIndex: "UnitDescr", text: HQ.common.getLang('UNITDESCR') }, { minWidth: 90, dataIndex: "SiteType", text: HQ.common.getLang('SITEID') }, { style: "text-align:right", width: 100, xtype: "numbercolumn", align: "right", dataIndex: "FreeItemQty", editor: new Ext.grid.CellEditor(Ext.apply({ field: { xtype: "numberfield", decimalPrecision: 0, decimalSeparator: ".", minValue: 0.0 } }, {})), text: HQ.common.getLang('FREEITEMQTY'), format: "0,000" }, { style: "text-align:right", width: 120, xtype: "numbercolumn", align: "right", dataIndex: "TotalDiscout", text: HQ.common.getLang('OM10100TOTALDISCOUT'), format: "0,000" }, { width: 150, xtype: "commandcolumn", commands: [{ xtype: "button", command: "reject", tooltip: { text: HQ.common.getLang('REJECTROWCHANGES') }, iconCls: "#ArrowUndo", text: HQ.common.getLang('REJECT') }], prepareToolbar: function (grid, toolbar, rowIndex, record) { toolbar.items.get(0).setVisible(record.dirty); }, listeners: { command: { fn: function (item, command, record, recordIndex, cellIndex) { grdManualPromo_Reject(record); } } } }] }, selModel: window.App.smlManualPromo = Ext.create("Ext.selection.RowModel", { proxyId: "smlManualPromo", selType: "rowmodel" }), features: [Ext.create("Ext.ux.grid.FiltersFeature", { ftype: "feature", local: true, filters: [{ dataIndex: "Selected", type: "boolean" }, { dataIndex: "DiscCode", type: "string" }, { dataIndex: "Descr", type: "string" }, { dataIndex: "PromoTypeDescr", type: "boolean" }, { dataIndex: "Discount", type: "numeric" }, { dataIndex: "FreeItemID", type: "string" }, { dataIndex: "UnitDescr", type: "string" }, { dataIndex: "SiteType", type: "string" }, { dataIndex: "FreeItemQty", type: "numeric" }, { dataIndex: "TotalDiscout", type: "numeric" }] })], viewConfig: { xtype: "gridview", trackOver: false } }], layout: "anchor", buttons: [{ id: "btnManualOk", iconCls: "icon-iconok", text: HQ.common.getLang('OK'), listeners: { click: { fn: btnManualOk_Click } } }], modal: true }); Ext.create("Ext.window.Window", { id: "winCloseOrder", renderTo: Ext.getBody(), width: 350, resizable: false, items: [{ id: "cboReasonCode", margin: "5 0 5 0", width: 300, xtype: "combobox", keyMap: { binding: { handler: function () { App.cboReasonCode.focus(true); }, key: 13 } }, fieldLabel: HQ.common.getLang('REASONCD'), labelAlign: "right", labelWidth: 130, name: "cboReasonCode", dataIndex: "ReasonCode", allowBlank: false, matchFieldWidth: false, delimiter: ",", displayField: "Descr", forceSelection: true, listConfig: { height: 400, tpl: Ext.create("Ext.net.XTemplate", { html: ["<tpl for='.'>", "<tpl if='[xindex] == 1'>", "<div class=\"ComboXtemplate\">", "<table>", "<tr ><th style='min-width: 100px !important;'>" + HQ.common.getLang('CODE') + "</th><th style='min-width: 100px !important;'>" + HQ.common.getLang('DESCR') + "</th></tr>", "</tpl>", "<tr class='x-boundlist-item' ><td style='min-width: 100px !important;'>{Code}</td><td style='min-width: 100px !important;'>{Descr}</td></tr>", "<tpl if='[xcount-xindex] == 0'>", "</table>", "</div>", "</tpl>", "</tpl>"] }), width: 300, itemSelector: ".x-boundlist-item", loadingText: HQ.common.getLang('LOADING') }, queryMode: "local", valueField: "Code", store: { model: Ext.define(Ext.id(), { extend: "Ext.data.Model", fields: [{ name: "Code", mapping: "Code", type: "string" }, { name: "Descr", mapping: "Descr", type: "string" }, { name: "ReasonIsShow", mapping: "ReasonIsShow", type: "boolean" }] }), storeId: "cboReasonCodeOM20500_pcReasonCode", autoLoad: true, readParameters: function (operation) { return { apply: { "param0": HQ.userName, "param1": HQ.cpnyID, "param2": HQ.langID, "procName": "OM20500_pcReasonCode", "procParam": "@UserID,@CpnyID,@LangID,", "sys": "False" } }; }, proxy: { type: "ajax", reader: { type: "json", root: "data", totalProperty: "totaldata" }, timeout: 2147483647, url: "HQ/GetData", actionMethods: Ext.apply({}, { read: "POST" }, Ext.data.proxy.Ajax.prototype.actionMethods) } }, listeners: { focus: { fn: function (item) { HQ.focus = 'closeOrder'; } }, beforequery: { fn: function (queryEvent) { FilterCombo(this, 'Code,Descr') } } } }], buttons: [{ id: "btnCloseOk", text: HQ.common.getLang('OK'), listeners: { click: { fn: Event.Form.btnCloseOk_Click } } }], title: HQ.common.getLang('CLOSEPO'), listeners: { beforehide: { fn: function (item) { App.frmMain.unmask(); } }, beforeshow: { fn: function (item) { App.frmMain.mask(); } }, beforeclose: { fn: function (item) { App.frmMain.unmask(); } } } }); Ext.net.ResourceMgr.registerIcon(["Disk", "BookAdd", "ArrowTurnRight", "Find", "ArrowRefresh", "LockEdit", "Delete", "TabEdit", "ApplicationViewIcons", "ApplicationViewGallery", "ArrowUndo"]); });
